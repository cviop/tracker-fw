
tracker_opu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005928  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08005ac0  08005ac0  00006ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  00007098  2**0
                  CONTENTS
  4 .ARM          00000000  08005d38  08005d38  00007098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d38  08005d38  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d3c  08005d3c  00006d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08005d40  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000098  08005dd8  00007098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005dd8  0000725c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052aa  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001330  00000000  00000000  0000c372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  0000d6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000311  00000000  00000000  0000db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163ef  00000000  00000000  0000de11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000075f6  00000000  00000000  00024200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088bda  00000000  00000000  0002b7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b43d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017ac  00000000  00000000  000b4414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b5bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005aa8 	.word	0x08005aa8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	08005aa8 	.word	0x08005aa8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <TIM5Config>:


#include "Delay.h"
#include "RccConfig.h"

void TIM5Config(void){
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1<<3);
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <TIM5Config+0x44>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8000be4 <TIM5Config+0x44>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->PSC = 84-1;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <TIM5Config+0x48>)
 8000bb2:	2253      	movs	r2, #83	@ 0x53
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 0xffff;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <TIM5Config+0x48>)
 8000bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Enable timer
	TIM5->CR1 |= (1<<0);
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <TIM5Config+0x48>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a09      	ldr	r2, [pc, #36]	@ (8000be8 <TIM5Config+0x48>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6013      	str	r3, [r2, #0]
	while(!(TIM5->SR & (1<<0))); 	//This bit is set by hardware on an update event. It is cleared by software.
 8000bca:	bf00      	nop
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <TIM5Config+0x48>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f9      	beq.n	8000bcc <TIM5Config+0x2c>
									//0: No update occurred.
									//1: Update interrupt pending. This bit is set by hardware when the registers are updated:
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40000c00 	.word	0x40000c00

08000bec <Delay_us>:

void Delay_us (uint32_t us){
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	TIM5->CNT = 0;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <Delay_us+0x28>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM5->CNT < us);
 8000bfa:	bf00      	nop
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <Delay_us+0x28>)
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d8fa      	bhi.n	8000bfc <Delay_us+0x10>
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40000c00 	.word	0x40000c00

08000c18 <Delay_ms>:

void Delay_ms(uint16_t ms){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0;i<ms;i++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	81fb      	strh	r3, [r7, #14]
 8000c26:	e006      	b.n	8000c36 <Delay_ms+0x1e>
	Delay_us(1000);
 8000c28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c2c:	f7ff ffde 	bl	8000bec <Delay_us>
	for(uint16_t i=0;i<ms;i++)
 8000c30:	89fb      	ldrh	r3, [r7, #14]
 8000c32:	3301      	adds	r3, #1
 8000c34:	81fb      	strh	r3, [r7, #14]
 8000c36:	89fa      	ldrh	r2, [r7, #14]
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d3f4      	bcc.n	8000c28 <Delay_ms+0x10>
}
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HMC5883L_Write>:
int16_t Mag_X_RAW = 0;
int16_t Mag_Y_RAW = 0;
int16_t Mag_Z_RAW = 0;


void HMC5883L_Write(uint8_t Address, uint8_t Reg, uint8_t Data){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
	I2C1_Start();
 8000c5a:	f000 f969 	bl	8000f30 <I2C1_Start>
	I2C1_Address(Address);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f9a3 	bl	8000fac <I2C1_Address>
	I2C1_Write(Reg);
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f97f 	bl	8000f6c <I2C1_Write>
	I2C1_Write(Data);
 8000c6e:	797b      	ldrb	r3, [r7, #5]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f97b 	bl	8000f6c <I2C1_Write>
	I2C1_Stop();
 8000c76:	f000 f9b9 	bl	8000fec <I2C1_Stop>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HMC5883L_Read>:

void HMC5883L_Read(uint8_t Address, uint8_t Reg, uint8_t *buffer, uint8_t size){
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	603a      	str	r2, [r7, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	460b      	mov	r3, r1
 8000c92:	71bb      	strb	r3, [r7, #6]
 8000c94:	4613      	mov	r3, r2
 8000c96:	717b      	strb	r3, [r7, #5]
	I2C1_Start();
 8000c98:	f000 f94a 	bl	8000f30 <I2C1_Start>
	I2C1_Address(Address);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f984 	bl	8000fac <I2C1_Address>
	I2C1_Write(Reg);
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f960 	bl	8000f6c <I2C1_Write>
	I2C1_Start();
 8000cac:	f000 f940 	bl	8000f30 <I2C1_Start>
	I2C1_Read(Address+0x01, buffer, size);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	797a      	ldrb	r2, [r7, #5]
 8000cb8:	6839      	ldr	r1, [r7, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f9a6 	bl	800100c <I2C1_Read>
	I2C1_Stop();
 8000cc0:	f000 f994 	bl	8000fec <I2C1_Stop>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HMC5883L_Init>:

void HMC5883L_Init (void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	uint8_t check;
	//uint8_t Data;

	// check device ID WHO_AM_I

	HMC5883L_Read (HMC5883L_ADDR,0x00, &check, 1);
 8000cd2:	1dfa      	adds	r2, r7, #7
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	203c      	movs	r0, #60	@ 0x3c
 8000cda:	f7ff ffd2 	bl	8000c82 <HMC5883L_Read>
	if(check==16){
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b10      	cmp	r3, #16
 8000ce2:	d10e      	bne.n	8000d02 <HMC5883L_Init+0x36>
		HMC5883L_Write(HMC5883L_ADDR, HMC5883L_CFG_A, 0b01011000);
 8000ce4:	2258      	movs	r2, #88	@ 0x58
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	203c      	movs	r0, #60	@ 0x3c
 8000cea:	f7ff ffad 	bl	8000c48 <HMC5883L_Write>
		HMC5883L_Write(HMC5883L_ADDR, HMC5883L_CFG_B, 0b00000000);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	203c      	movs	r0, #60	@ 0x3c
 8000cf4:	f7ff ffa8 	bl	8000c48 <HMC5883L_Write>
		HMC5883L_Write(HMC5883L_ADDR, HMC5883L_MODER, 0b00000000);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	203c      	movs	r0, #60	@ 0x3c
 8000cfe:	f7ff ffa3 	bl	8000c48 <HMC5883L_Write>
	}


}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	0000      	movs	r0, r0
 8000d0c:	0000      	movs	r0, r0
	...

08000d10 <HMC5883L_Read_Mag>:

void HMC5883L_Read_Mag(float *mag_data){
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	uint8_t Rx_data[6];

		// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HMC5883L_Read (HMC5883L_ADDR, HMC5883L_OUT_X_MSB, Rx_data, 6);
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	2103      	movs	r1, #3
 8000d20:	203c      	movs	r0, #60	@ 0x3c
 8000d22:	f7ff ffae 	bl	8000c82 <HMC5883L_Read>



	Mag_X_RAW = -(int16_t)(Rx_data[0] << 8 | Rx_data [1]);
 8000d26:	7a3b      	ldrb	r3, [r7, #8]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	7a7b      	ldrb	r3, [r7, #9]
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	425b      	negs	r3, r3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <HMC5883L_Read_Mag+0xf0>)
 8000d3e:	801a      	strh	r2, [r3, #0]
	Mag_Z_RAW = -(int16_t)(Rx_data[2] << 8 | Rx_data [3]);
 8000d40:	7abb      	ldrb	r3, [r7, #10]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	7afb      	ldrb	r3, [r7, #11]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	425b      	negs	r3, r3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	4b2b      	ldr	r3, [pc, #172]	@ (8000e04 <HMC5883L_Read_Mag+0xf4>)
 8000d58:	801a      	strh	r2, [r3, #0]
	Mag_Y_RAW = (int16_t)(Rx_data[4] << 8 | Rx_data [5]);
 8000d5a:	7b3b      	ldrb	r3, [r7, #12]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	7b7b      	ldrb	r3, [r7, #13]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <HMC5883L_Read_Mag+0xf8>)
 8000d6a:	801a      	strh	r2, [r3, #0]



	mag_data[0] = Mag_X_RAW/1.370;
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <HMC5883L_Read_Mag+0xf0>)
 8000d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fb82 	bl	800047c <__aeabi_i2d>
 8000d78:	a31f      	add	r3, pc, #124	@ (adr r3, 8000df8 <HMC5883L_Read_Mag+0xe8>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fd11 	bl	80007a4 <__aeabi_ddiv>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff feb9 	bl	8000b00 <__aeabi_d2f>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	601a      	str	r2, [r3, #0]
	mag_data[1] = Mag_Y_RAW/1.370;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HMC5883L_Read_Mag+0xf8>)
 8000d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fb6e 	bl	800047c <__aeabi_i2d>
 8000da0:	a315      	add	r3, pc, #84	@ (adr r3, 8000df8 <HMC5883L_Read_Mag+0xe8>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	f7ff fcfd 	bl	80007a4 <__aeabi_ddiv>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4610      	mov	r0, r2
 8000db0:	4619      	mov	r1, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	1d1c      	adds	r4, r3, #4
 8000db6:	f7ff fea3 	bl	8000b00 <__aeabi_d2f>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6023      	str	r3, [r4, #0]
	mag_data[2] = Mag_Z_RAW/1.370;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HMC5883L_Read_Mag+0xf4>)
 8000dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fb59 	bl	800047c <__aeabi_i2d>
 8000dca:	a30b      	add	r3, pc, #44	@ (adr r3, 8000df8 <HMC5883L_Read_Mag+0xe8>)
 8000dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd0:	f7ff fce8 	bl	80007a4 <__aeabi_ddiv>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f103 0408 	add.w	r4, r3, #8
 8000de2:	f7ff fe8d 	bl	8000b00 <__aeabi_d2f>
 8000de6:	4603      	mov	r3, r0
 8000de8:	6023      	str	r3, [r4, #0]
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	f3af 8000 	nop.w
 8000df8:	1eb851ec 	.word	0x1eb851ec
 8000dfc:	3ff5eb85 	.word	0x3ff5eb85
 8000e00:	200000b4 	.word	0x200000b4
 8000e04:	200000b8 	.word	0x200000b8
 8000e08:	200000b6 	.word	0x200000b6

08000e0c <I2C1_Config>:

#include "I2C.h"
#include "RccConfig.h"


void I2C1_Config(void){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0

#define T_rise 0 //us
#define T_high 1 //us
#define f_pclk1 42 //MHz

	RCC->APB1ENR |= (1<<21); //I2C clock begin
 8000e12:	4b44      	ldr	r3, [pc, #272]	@ (8000f24 <I2C1_Config+0x118>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a43      	ldr	r2, [pc, #268]	@ (8000f24 <I2C1_Config+0x118>)
 8000e18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40

	RCC->AHB1ENR |= (1<<1);
 8000e1e:	4b41      	ldr	r3, [pc, #260]	@ (8000f24 <I2C1_Config+0x118>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a40      	ldr	r2, [pc, #256]	@ (8000f24 <I2C1_Config+0x118>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER |= (1<<17);
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<19);
 8000e36:	4b3c      	ldr	r3, [pc, #240]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e40:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= (1<<8); //Piny musí být OD
 8000e42:	4b39      	ldr	r3, [pc, #228]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4a38      	ldr	r2, [pc, #224]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4c:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1<<9);
 8000e4e:	4b36      	ldr	r3, [pc, #216]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	4a35      	ldr	r2, [pc, #212]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e58:	6053      	str	r3, [r2, #4]

	GPIOB->OSPEEDR |= (3<<16);
 8000e5a:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4a32      	ldr	r2, [pc, #200]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e60:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000e64:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (3<<18);
 8000e66:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e6c:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8000e70:	6093      	str	r3, [r2, #8]

	GPIOB->PUPDR &= ~(1<<16);
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	4a2c      	ldr	r2, [pc, #176]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e7c:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1<<17);
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	4a29      	ldr	r2, [pc, #164]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000e88:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1<<18);
 8000e8a:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e94:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1<<19);
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	4a23      	ldr	r2, [pc, #140]	@ (8000f28 <I2C1_Config+0x11c>)
 8000e9c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000ea0:	60d3      	str	r3, [r2, #12]

	GPIOB->AFR[1] |= (4<<0);
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <I2C1_Config+0x11c>)
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <I2C1_Config+0x11c>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (4<<4);
 8000eae:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <I2C1_Config+0x11c>)
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <I2C1_Config+0x11c>)
 8000eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb8:	6253      	str	r3, [r2, #36]	@ 0x24

	//disable I2C
	I2C1->CR1 &= ~(1<<0); //disable I2C
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <I2C1_Config+0x120>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <I2C1_Config+0x120>)
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	6013      	str	r3, [r2, #0]


	//Reset I2C
	I2C1->CR1 |= (1<<15);
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <I2C1_Config+0x120>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a18      	ldr	r2, [pc, #96]	@ (8000f2c <I2C1_Config+0x120>)
 8000ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ed0:	6013      	str	r3, [r2, #0]
	//Write 0 to take it out of reset
	I2C1->CR1 &= ~(1<<15);
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <I2C1_Config+0x120>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a15      	ldr	r2, [pc, #84]	@ (8000f2c <I2C1_Config+0x120>)
 8000ed8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000edc:	6013      	str	r3, [r2, #0]

	I2C1->CR2 |= (f_pclk1<<0);
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <I2C1_Config+0x120>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <I2C1_Config+0x120>)
 8000ee4:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 8000ee8:	6053      	str	r3, [r2, #4]

	//CCR hodnota
	uint16_t ccr_value = (T_rise+T_high)*f_pclk1;
 8000eea:	232a      	movs	r3, #42	@ 0x2a
 8000eec:	80fb      	strh	r3, [r7, #6]
	I2C1->CCR |= (ccr_value<<0);
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <I2C1_Config+0x120>)
 8000ef0:	69da      	ldr	r2, [r3, #28]
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <I2C1_Config+0x120>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61cb      	str	r3, [r1, #28]

	//Trise calc
	uint8_t trise = T_rise*f_pclk1 +1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	717b      	strb	r3, [r7, #5]
	I2C1->TRISE |= (trise);
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <I2C1_Config+0x120>)
 8000f00:	6a1a      	ldr	r2, [r3, #32]
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	4909      	ldr	r1, [pc, #36]	@ (8000f2c <I2C1_Config+0x120>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	620b      	str	r3, [r1, #32]

	//Enable I2C
	I2C1->CR1 |= (1<<0); //Enable I2C
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <I2C1_Config+0x120>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a07      	ldr	r2, [pc, #28]	@ (8000f2c <I2C1_Config+0x120>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6013      	str	r3, [r2, #0]

}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40005400 	.word	0x40005400

08000f30 <I2C1_Start>:

void I2C1_Start(void){
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1<<10); //Enable the ACK
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <I2C1_Start+0x38>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <I2C1_Start+0x38>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<8); //Generate start
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <I2C1_Start+0x38>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <I2C1_Start+0x38>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & (1<<0))); //Wait for start bit to set
 8000f4c:	bf00      	nop
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <I2C1_Start+0x38>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f9      	beq.n	8000f4e <I2C1_Start+0x1e>
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40005400 	.word	0x40005400

08000f6c <I2C1_Write>:

void I2C1_Write(uint8_t data){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	while(!(I2C1->SR1 & (1<<7))); //Wait for TXEnable is set
 8000f76:	bf00      	nop
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <I2C1_Write+0x3c>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f9      	beq.n	8000f78 <I2C1_Write+0xc>
	I2C1->DR = data;
 8000f84:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <I2C1_Write+0x3c>)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1<<2))); //Wait for BTF (byte transfer finished)
 8000f8a:	bf00      	nop
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <I2C1_Write+0x3c>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f9      	beq.n	8000f8c <I2C1_Write+0x20>
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40005400 	.word	0x40005400

08000fac <I2C1_Address>:

void I2C1_Address(uint8_t Address){
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = Address;
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe8 <I2C1_Address+0x3c>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	6113      	str	r3, [r2, #16]
	while(!(I2C1->SR1 & (1<<1)));
 8000fbc:	bf00      	nop
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <I2C1_Address+0x3c>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f9      	beq.n	8000fbe <I2C1_Address+0x12>
	uint8_t temp = I2C1->SR1 | I2C1->SR2; //read SR1 and SR2 to clear the ADDR bit
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <I2C1_Address+0x3c>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <I2C1_Address+0x3c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	73fb      	strb	r3, [r7, #15]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40005400 	.word	0x40005400

08000fec <I2C1_Stop>:

void I2C1_Stop(void){
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1<<9);
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <I2C1_Stop+0x1c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <I2C1_Stop+0x1c>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40005400 	.word	0x40005400

0800100c <I2C1_Read>:
		size--;
	}
	while(!(I2C1->SR1 & (1<<2))); //Wait for BTF to set
}

void I2C1_Read(uint8_t Address, uint8_t *buffer, uint8_t size){
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]

	int remaining = size;
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	60fb      	str	r3, [r7, #12]
	if(size == 1){
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d12f      	bne.n	8001086 <I2C1_Read+0x7a>
		//Write the slave address
		I2C1->DR = Address;
 8001026:	4a4b      	ldr	r2, [pc, #300]	@ (8001154 <I2C1_Read+0x148>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	6113      	str	r3, [r2, #16]
		while(!(I2C1->SR1 & (1<<1))); //Wait for addr bit to set
 800102c:	bf00      	nop
 800102e:	4b49      	ldr	r3, [pc, #292]	@ (8001154 <I2C1_Read+0x148>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f9      	beq.n	800102e <I2C1_Read+0x22>

		//Clear the ACK
		I2C1->CR1 &= ~(1<<10);
 800103a:	4b46      	ldr	r3, [pc, #280]	@ (8001154 <I2C1_Read+0x148>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a45      	ldr	r2, [pc, #276]	@ (8001154 <I2C1_Read+0x148>)
 8001040:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001044:	6013      	str	r3, [r2, #0]
		uint8_t temp = I2C1->SR1 | I2C1->SR2; //Read SR1 and SR2 to clear the addr bit
 8001046:	4b43      	ldr	r3, [pc, #268]	@ (8001154 <I2C1_Read+0x148>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <I2C1_Read+0x148>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	72bb      	strb	r3, [r7, #10]
		I2C1->CR1 |= (1<<9); //Stop the I2C
 8001056:	4b3f      	ldr	r3, [pc, #252]	@ (8001154 <I2C1_Read+0x148>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3e      	ldr	r2, [pc, #248]	@ (8001154 <I2C1_Read+0x148>)
 800105c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001060:	6013      	str	r3, [r2, #0]

		//Wait for RXbuffer Not empty bit to set
		while(!(I2C1->SR1 & (1<<6)));
 8001062:	bf00      	nop
 8001064:	4b3b      	ldr	r3, [pc, #236]	@ (8001154 <I2C1_Read+0x148>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f9      	beq.n	8001064 <I2C1_Read+0x58>

		//Read the data from the DATA register
		buffer[size-remaining] = I2C1->DR;
 8001070:	4b38      	ldr	r3, [pc, #224]	@ (8001154 <I2C1_Read+0x148>)
 8001072:	6919      	ldr	r1, [r3, #16]
 8001074:	79ba      	ldrb	r2, [r7, #6]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	461a      	mov	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	b2ca      	uxtb	r2, r1
 8001082:	701a      	strb	r2, [r3, #0]
		//Read the LAST byte
		while(!(I2C1->SR1 & (1<<6)));
		buffer[size-remaining] = I2C1->DR;
	}

}
 8001084:	e060      	b.n	8001148 <I2C1_Read+0x13c>
		I2C1->DR = Address;
 8001086:	4a33      	ldr	r2, [pc, #204]	@ (8001154 <I2C1_Read+0x148>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	6113      	str	r3, [r2, #16]
		while(!(I2C1->SR1 & (1<<1))); //Wait for addr bit to set
 800108c:	bf00      	nop
 800108e:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <I2C1_Read+0x148>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f9      	beq.n	800108e <I2C1_Read+0x82>
		uint8_t temp = I2C1->SR1 | I2C1->SR2; //Read SR1 and SR2 to clear the addr bit
 800109a:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <I2C1_Read+0x148>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001154 <I2C1_Read+0x148>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	72fb      	strb	r3, [r7, #11]
		while(remaining > 2){
 80010aa:	e019      	b.n	80010e0 <I2C1_Read+0xd4>
			while(!(I2C1->SR1 & (1<<6)));
 80010ac:	bf00      	nop
 80010ae:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <I2C1_Read+0x148>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f9      	beq.n	80010ae <I2C1_Read+0xa2>
			buffer[size-remaining] = I2C1->DR; //Copy data to bufffffer
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <I2C1_Read+0x148>)
 80010bc:	6919      	ldr	r1, [r3, #16]
 80010be:	79ba      	ldrb	r2, [r7, #6]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
			I2C1->CR1 |= 1<<10; //Set ack bit to acknowledge the data received
 80010ce:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <I2C1_Read+0x148>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a20      	ldr	r2, [pc, #128]	@ (8001154 <I2C1_Read+0x148>)
 80010d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d8:	6013      	str	r3, [r2, #0]
			remaining--;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3b01      	subs	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
		while(remaining > 2){
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	dce2      	bgt.n	80010ac <I2C1_Read+0xa0>
		while(!(I2C1->SR1 & (1<<6))); //Wait for RXNE bit to set, bit is set when input buffer is not empty
 80010e6:	bf00      	nop
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <I2C1_Read+0x148>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f9      	beq.n	80010e8 <I2C1_Read+0xdc>
		buffer[size-remaining] = I2C1->DR;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <I2C1_Read+0x148>)
 80010f6:	6919      	ldr	r1, [r3, #16]
 80010f8:	79ba      	ldrb	r2, [r7, #6]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4413      	add	r3, r2
 8001104:	b2ca      	uxtb	r2, r1
 8001106:	701a      	strb	r2, [r3, #0]
		I2C1->CR1 &= ~(1<<10); //Clear the ACK bit
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <I2C1_Read+0x148>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a11      	ldr	r2, [pc, #68]	@ (8001154 <I2C1_Read+0x148>)
 800110e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001112:	6013      	str	r3, [r2, #0]
		I2C1->CR1 |= (1<<9); //Stop the I2C
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <I2C1_Read+0x148>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <I2C1_Read+0x148>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800111e:	6013      	str	r3, [r2, #0]
		remaining--;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3b01      	subs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
		while(!(I2C1->SR1 & (1<<6)));
 8001126:	bf00      	nop
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <I2C1_Read+0x148>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f9      	beq.n	8001128 <I2C1_Read+0x11c>
		buffer[size-remaining] = I2C1->DR;
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <I2C1_Read+0x148>)
 8001136:	6919      	ldr	r1, [r3, #16]
 8001138:	79ba      	ldrb	r2, [r7, #6]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	461a      	mov	r2, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4413      	add	r3, r2
 8001144:	b2ca      	uxtb	r2, r1
 8001146:	701a      	strb	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40005400 	.word	0x40005400

08001158 <MPU_Write>:
float Ax, Ay, Az, Gx, Gy, Gz, Temperature;

uint8_t check;


void MPU_Write(uint8_t Address, uint8_t Reg, uint8_t Data){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	460b      	mov	r3, r1
 8001164:	71bb      	strb	r3, [r7, #6]
 8001166:	4613      	mov	r3, r2
 8001168:	717b      	strb	r3, [r7, #5]
	I2C1_Start();
 800116a:	f7ff fee1 	bl	8000f30 <I2C1_Start>
	I2C1_Address(Address);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff1b 	bl	8000fac <I2C1_Address>
	I2C1_Write(Reg);
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fef7 	bl	8000f6c <I2C1_Write>
	I2C1_Write(Data);
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fef3 	bl	8000f6c <I2C1_Write>
	I2C1_Stop();
 8001186:	f7ff ff31 	bl	8000fec <I2C1_Stop>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <MPU_Read>:

void MPU_Read(uint8_t Address, uint8_t Reg, uint8_t *buffer, uint8_t size){
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	603a      	str	r2, [r7, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	460b      	mov	r3, r1
 80011a2:	71bb      	strb	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	717b      	strb	r3, [r7, #5]
	I2C1_Start();
 80011a8:	f7ff fec2 	bl	8000f30 <I2C1_Start>
	I2C1_Address(Address);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fefc 	bl	8000fac <I2C1_Address>
	I2C1_Write(Reg);
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fed8 	bl	8000f6c <I2C1_Write>
	I2C1_Start();
 80011bc:	f7ff feb8 	bl	8000f30 <I2C1_Start>
	I2C1_Read(Address+0x01, buffer, size);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	797a      	ldrb	r2, [r7, #5]
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff1e 	bl	800100c <I2C1_Read>
	I2C1_Stop();
 80011d0:	f7ff ff0c 	bl	8000fec <I2C1_Stop>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <MPU6050_Init>:

void MPU6050_Init (void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	MPU_Read (MPU6050_ADDR,WHO_AM_I_REG, &check, 1);
 80011e2:	1dba      	adds	r2, r7, #6
 80011e4:	2301      	movs	r3, #1
 80011e6:	2175      	movs	r1, #117	@ 0x75
 80011e8:	20d2      	movs	r0, #210	@ 0xd2
 80011ea:	f7ff ffd2 	bl	8001192 <MPU_Read>

	if (check == 112)  // 0x68 will be returned by the sensor if everything goes well
 80011ee:	79bb      	ldrb	r3, [r7, #6]
 80011f0:	2b70      	cmp	r3, #112	@ 0x70
 80011f2:	d11f      	bne.n	8001234 <MPU6050_Init+0x58>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	71fb      	strb	r3, [r7, #7]
		MPU_Write (MPU6050_ADDR, PWR_MGMT_1_REG, Data);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	461a      	mov	r2, r3
 80011fc:	216b      	movs	r1, #107	@ 0x6b
 80011fe:	20d2      	movs	r0, #210	@ 0xd2
 8001200:	f7ff ffaa 	bl	8001158 <MPU_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001204:	2307      	movs	r3, #7
 8001206:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU6050_ADDR, SMPLRT_DIV_REG, Data);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	461a      	mov	r2, r3
 800120c:	2119      	movs	r1, #25
 800120e:	20d2      	movs	r0, #210	@ 0xd2
 8001210:	f7ff ffa2 	bl	8001158 <MPU_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ? 2g
		Data = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU6050_ADDR, ACCEL_CONFIG_REG, Data);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	461a      	mov	r2, r3
 800121c:	211c      	movs	r1, #28
 800121e:	20d2      	movs	r0, #210	@ 0xd2
 8001220:	f7ff ff9a 	bl	8001158 <MPU_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ? 500 ?/s
		Data = 0b00001000;
 8001224:	2308      	movs	r3, #8
 8001226:	71fb      	strb	r3, [r7, #7]
		MPU_Write(MPU6050_ADDR, GYRO_CONFIG_REG, Data);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	461a      	mov	r2, r3
 800122c:	211b      	movs	r1, #27
 800122e:	20d2      	movs	r0, #210	@ 0xd2
 8001230:	f7ff ff92 	bl	8001158 <MPU_Write>
	}

}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	0000      	movs	r0, r0
	...

08001240 <MPU6050_Read_Accel>:
        }
    }
}
*/
void MPU6050_Read_Accel (float *accel_data)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

	uint8_t Rx_data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	MPU_Read (MPU6050_ADDR, ACCEL_XOUT_H_REG, Rx_data, 6);
 8001248:	f107 0208 	add.w	r2, r7, #8
 800124c:	2306      	movs	r3, #6
 800124e:	213b      	movs	r1, #59	@ 0x3b
 8001250:	20d2      	movs	r0, #210	@ 0xd2
 8001252:	f7ff ff9e 	bl	8001192 <MPU_Read>

	Accel_X_RAW = (int16_t)(Rx_data[0] << 8 | Rx_data [1]);
 8001256:	7a3b      	ldrb	r3, [r7, #8]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21a      	sxth	r2, r3
 800125c:	7a7b      	ldrb	r3, [r7, #9]
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b21a      	sxth	r2, r3
 8001264:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <MPU6050_Read_Accel+0xe0>)
 8001266:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rx_data[2] << 8 | Rx_data [3]);
 8001268:	7abb      	ldrb	r3, [r7, #10]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <MPU6050_Read_Accel+0xe4>)
 8001278:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rx_data[4] << 8 | Rx_data [5]);
 800127a:	7b3b      	ldrb	r3, [r7, #12]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21a      	sxth	r2, r3
 8001280:	7b7b      	ldrb	r3, [r7, #13]
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <MPU6050_Read_Accel+0xe8>)
 800128a:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	accel_data[0] = -Accel_X_RAW/1670.13251783894;
 800128c:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <MPU6050_Read_Accel+0xe0>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	425b      	negs	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f8f1 	bl	800047c <__aeabi_i2d>
 800129a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001318 <MPU6050_Read_Accel+0xd8>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff fa80 	bl	80007a4 <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fc28 	bl	8000b00 <__aeabi_d2f>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
	accel_data[1] = Accel_Y_RAW/1670.13251783894;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <MPU6050_Read_Accel+0xe4>)
 80012b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8dd 	bl	800047c <__aeabi_i2d>
 80012c2:	a315      	add	r3, pc, #84	@ (adr r3, 8001318 <MPU6050_Read_Accel+0xd8>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fa6c 	bl	80007a4 <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	1d1c      	adds	r4, r3, #4
 80012d8:	f7ff fc12 	bl	8000b00 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	6023      	str	r3, [r4, #0]
	accel_data[2] = -Accel_Z_RAW/1670.13251783894;
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MPU6050_Read_Accel+0xe8>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	425b      	negs	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f8c7 	bl	800047c <__aeabi_i2d>
 80012ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8001318 <MPU6050_Read_Accel+0xd8>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff fa56 	bl	80007a4 <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f103 0408 	add.w	r4, r3, #8
 8001306:	f7ff fbfb 	bl	8000b00 <__aeabi_d2f>
 800130a:	4603      	mov	r3, r0
 800130c:	6023      	str	r3, [r4, #0]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	b2c1a189 	.word	0xb2c1a189
 800131c:	409a1887 	.word	0x409a1887
 8001320:	200000ba 	.word	0x200000ba
 8001324:	200000bc 	.word	0x200000bc
 8001328:	200000be 	.word	0x200000be
 800132c:	00000000 	.word	0x00000000

08001330 <MPU6050_Read_Gyro>:
	MPU_Read (MPU6050_ADDR, ACCEL_XOUT_H_REG, accel_data_raw, 6);

}

void MPU6050_Read_Gyro (float *gyro_data)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

	uint8_t Rx_data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	MPU_Read (MPU6050_ADDR, GYRO_XOUT_H_REG, Rx_data, 6);
 8001338:	f107 0208 	add.w	r2, r7, #8
 800133c:	2306      	movs	r3, #6
 800133e:	2143      	movs	r1, #67	@ 0x43
 8001340:	20d2      	movs	r0, #210	@ 0xd2
 8001342:	f7ff ff26 	bl	8001192 <MPU_Read>

	Gyro_X_RAW = (int16_t)(Rx_data[0] << 8 | Rx_data [1]);
 8001346:	7a3b      	ldrb	r3, [r7, #8]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	7a7b      	ldrb	r3, [r7, #9]
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21a      	sxth	r2, r3
 8001354:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <MPU6050_Read_Gyro+0xe0>)
 8001356:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rx_data[2] << 8 | Rx_data [3]);
 8001358:	7abb      	ldrb	r3, [r7, #10]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	7afb      	ldrb	r3, [r7, #11]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21a      	sxth	r2, r3
 8001366:	4b2b      	ldr	r3, [pc, #172]	@ (8001414 <MPU6050_Read_Gyro+0xe4>)
 8001368:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rx_data[4] << 8 | Rx_data [5]);
 800136a:	7b3b      	ldrb	r3, [r7, #12]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <MPU6050_Read_Gyro+0xe8>)
 800137a:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	gyro_data[0] = -Gyro_X_RAW/3752.87355810689;
 800137c:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <MPU6050_Read_Gyro+0xe0>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	425b      	negs	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f879 	bl	800047c <__aeabi_i2d>
 800138a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001408 <MPU6050_Read_Gyro+0xd8>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff fa08 	bl	80007a4 <__aeabi_ddiv>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fbb0 	bl	8000b00 <__aeabi_d2f>
 80013a0:	4602      	mov	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
	gyro_data[1] = Gyro_Y_RAW/3752.87355810689;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <MPU6050_Read_Gyro+0xe4>)
 80013a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f865 	bl	800047c <__aeabi_i2d>
 80013b2:	a315      	add	r3, pc, #84	@ (adr r3, 8001408 <MPU6050_Read_Gyro+0xd8>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f9f4 	bl	80007a4 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	1d1c      	adds	r4, r3, #4
 80013c8:	f7ff fb9a 	bl	8000b00 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	6023      	str	r3, [r4, #0]
	gyro_data[2] = Gyro_Z_RAW/3752.87355810689;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MPU6050_Read_Gyro+0xe8>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f850 	bl	800047c <__aeabi_i2d>
 80013dc:	a30a      	add	r3, pc, #40	@ (adr r3, 8001408 <MPU6050_Read_Gyro+0xd8>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff f9df 	bl	80007a4 <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f103 0408 	add.w	r4, r3, #8
 80013f4:	f7ff fb84 	bl	8000b00 <__aeabi_d2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	6023      	str	r3, [r4, #0]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bd90      	pop	{r4, r7, pc}
 8001404:	f3af 8000 	nop.w
 8001408:	4302187f 	.word	0x4302187f
 800140c:	40ad51bf 	.word	0x40ad51bf
 8001410:	200000c0 	.word	0x200000c0
 8001414:	200000c2 	.word	0x200000c2
 8001418:	200000c4 	.word	0x200000c4

0800141c <SysClockConfig>:
 */

#include "RccConfig.h"


void SysClockConfig(void){
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
#define PLL_N 84
#define PLL_P 0 // to odpovídá PLLP = 2 (bit17:16 v PLLCFGR)

	//Main Clock
	// Enable HSE
	RCC->CR  |= RCC_CR_HSEON;
 8001420:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <SysClockConfig+0xac>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a28      	ldr	r2, [pc, #160]	@ (80014c8 <SysClockConfig+0xac>)
 8001426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142a:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSERDY));
 800142c:	bf00      	nop
 800142e:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <SysClockConfig+0xac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <SysClockConfig+0x12>

	// set the power enable clock and voltage regulator
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800143a:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <SysClockConfig+0xac>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <SysClockConfig+0xac>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	@ 0x40

	PWR->CR |= PWR_CR_VOS;
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <SysClockConfig+0xb0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a20      	ldr	r2, [pc, #128]	@ (80014cc <SysClockConfig+0xb0>)
 800144c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001450:	6013      	str	r3, [r2, #0]

	//Flash related
	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 8001452:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <SysClockConfig+0xb4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1e      	ldr	r2, [pc, #120]	@ (80014d0 <SysClockConfig+0xb4>)
 8001458:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800145c:	f043 0305 	orr.w	r3, r3, #5
 8001460:	6013      	str	r3, [r2, #0]

	//Prescalers
	//AHB PRes
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001462:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <SysClockConfig+0xac>)
 8001464:	4a18      	ldr	r2, [pc, #96]	@ (80014c8 <SysClockConfig+0xac>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	6093      	str	r3, [r2, #8]

	//APB1_PRes
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800146a:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <SysClockConfig+0xac>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4a16      	ldr	r2, [pc, #88]	@ (80014c8 <SysClockConfig+0xac>)
 8001470:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001474:	6093      	str	r3, [r2, #8]

	//APB2
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8001476:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <SysClockConfig+0xac>)
 8001478:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <SysClockConfig+0xac>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	6093      	str	r3, [r2, #8]

	//PLL (RCC_PLLCFGR register)
	RCC->PLLCFGR = (PLL_M << 0) | (PLL_N << 6) | (PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSI);
 800147e:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <SysClockConfig+0xac>)
 8001480:	f241 5208 	movw	r2, #5384	@ 0x1508
 8001484:	605a      	str	r2, [r3, #4]

	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <SysClockConfig+0xac>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0f      	ldr	r2, [pc, #60]	@ (80014c8 <SysClockConfig+0xac>)
 800148c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001490:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8001492:	bf00      	nop
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <SysClockConfig+0xac>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f9      	beq.n	8001494 <SysClockConfig+0x78>

	//Select clock source
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <SysClockConfig+0xac>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <SysClockConfig+0xac>)
 80014a6:	f043 0302 	orr.w	r3, r3, #2
 80014aa:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80014ac:	bf00      	nop
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <SysClockConfig+0xac>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d1f9      	bne.n	80014ae <SysClockConfig+0x92>

//sysclk 84 MHz, HCLK 84 MHz, PCLK1 42 MHz, APB1 TIM a APB2 per+tim 84 MHz

}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40007000 	.word	0x40007000
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	@ (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	@ (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	@ (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <USART1Config>:
#include "UART.h"

void USART1Config(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
    // 1) Enable peripheral clocks
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;   // USART1 on APB2
 800156a:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <USART1Config+0xc0>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	4a2d      	ldr	r2, [pc, #180]	@ (8001624 <USART1Config+0xc0>)
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	6453      	str	r3, [r2, #68]	@ 0x44
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;    // GPIOB
 8001576:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <USART1Config+0xc0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a2a      	ldr	r2, [pc, #168]	@ (8001624 <USART1Config+0xc0>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30

    // 2) Configure PB6=TX, PB7=RX to AF7
    GPIOB->MODER   &= ~((3<<12)|(3<<14));   // clear MODE6[13:12], MODE7[15:14]
 8001582:	4b29      	ldr	r3, [pc, #164]	@ (8001628 <USART1Config+0xc4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a28      	ldr	r2, [pc, #160]	@ (8001628 <USART1Config+0xc4>)
 8001588:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800158c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER   |=  (2<<12)|(2<<14);     // set AF mode
 800158e:	4b26      	ldr	r3, [pc, #152]	@ (8001628 <USART1Config+0xc4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a25      	ldr	r2, [pc, #148]	@ (8001628 <USART1Config+0xc4>)
 8001594:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8001598:	6013      	str	r3, [r2, #0]
    GPIOB->OSPEEDR |=  (3<<12)|(3<<14);     // very high speed
 800159a:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <USART1Config+0xc4>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4a22      	ldr	r2, [pc, #136]	@ (8001628 <USART1Config+0xc4>)
 80015a0:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80015a4:	6093      	str	r3, [r2, #8]
    GPIOB->AFR[0]  &= ~((0xF<<24)|(0xF<<28));
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <USART1Config+0xc4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001628 <USART1Config+0xc4>)
 80015ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80015b0:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0]  |=  (7<<24)|(7<<28);     // AF7 for USART1
 80015b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <USART1Config+0xc4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <USART1Config+0xc4>)
 80015b8:	f043 43ee 	orr.w	r3, r3, #1996488704	@ 0x77000000
 80015bc:	6213      	str	r3, [r2, #32]

    // 3) Ensure USART1 is disabled before config
    USART1->CR1 = 0;
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <USART1Config+0xc8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
    // 4) Compute and set BRR (oversampling by 16)
    //    USARTDIV = UART_CLOCK / BAUD_RATE
    //    Mantissa = floor(USARTDIV)
    //    Fraction = round((USARTDIV - Mantissa) * 16)
    {
        uint32_t clk = UART_CLOCK;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <USART1Config+0xcc>)
 80015c6:	60fb      	str	r3, [r7, #12]
        uint32_t baud = BAUD_RATE;
 80015c8:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 80015cc:	60bb      	str	r3, [r7, #8]
        uint32_t mant = clk / baud;
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	607b      	str	r3, [r7, #4]
        uint32_t frac = ((clk % baud) * 16 + baud/2) / baud;  // rounding
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	fb01 f202 	mul.w	r2, r1, r2
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	011a      	lsls	r2, r3, #4
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	441a      	add	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	603b      	str	r3, [r7, #0]
        USART1->BRR = (5 << 4) | (11<<0);
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <USART1Config+0xc8>)
 80015fa:	225b      	movs	r2, #91	@ 0x5b
 80015fc:	609a      	str	r2, [r3, #8]
    }

    // 5) Configure CR1: enable TE, RE, UE, RXNE interrupt
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <USART1Config+0xc8>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <USART1Config+0xc8>)
 8001604:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001608:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 800160c:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(USART1_IRQn, 1);
 800160e:	2101      	movs	r1, #1
 8001610:	2025      	movs	r0, #37	@ 0x25
 8001612:	f7ff ff7d 	bl	8001510 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8001616:	2025      	movs	r0, #37	@ 0x25
 8001618:	f7ff ff5c 	bl	80014d4 <__NVIC_EnableIRQ>
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	40020400 	.word	0x40020400
 800162c:	40011000 	.word	0x40011000
 8001630:	0501bd00 	.word	0x0501bd00

08001634 <USART1_SendChar>:

void USART1_SendChar(uint8_t c){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->SR & USART_SR_TXE)) {}
 800163e:	bf00      	nop
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <USART1_SendChar+0x3c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f9      	beq.n	8001640 <USART1_SendChar+0xc>
    USART1->DR = c;
 800164c:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <USART1_SendChar+0x3c>)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	6053      	str	r3, [r2, #4]
    // wait for TC (transmission complete)
    while(!(USART1->SR & USART_SR_TC));
 8001652:	bf00      	nop
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <USART1_SendChar+0x3c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f9      	beq.n	8001654 <USART1_SendChar+0x20>
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40011000 	.word	0x40011000

08001674 <USART1_SendFloat>:
    // wait for RXNE
    while(!(USART1->SR & USART_SR_RXNE));
    return (uint8_t)USART1->DR;
}

void USART1_SendFloat(float f) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	ed87 0a01 	vstr	s0, [r7, #4]
    union {
        float    ff;
        uint8_t  b[4];
    } u;
    u.ff = f;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60bb      	str	r3, [r7, #8]
    /* Send in little‑endian order: LSB first */
    for (int i = 0; i < 4; i++) {
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e00a      	b.n	800169e <USART1_SendFloat+0x2a>
    	USART1_SendChar(u.b[i]);
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ffce 	bl	8001634 <USART1_SendChar>
    for (int i = 0; i < 4; i++) {
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	ddf1      	ble.n	8001688 <USART1_SendFloat+0x14>
    }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <__NVIC_GetPriorityGrouping>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	@ (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	@ (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	@ (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	@ 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <update_wd_config>:

#include "data_update_watchdog.h"



void update_wd_config(uint16_t psc, uint16_t arr){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	460a      	mov	r2, r1
 80017ce:	80fb      	strh	r3, [r7, #6]
 80017d0:	4613      	mov	r3, r2
 80017d2:	80bb      	strh	r3, [r7, #4]

	//Enable clock of TIM3
	RCC->APB1ENR |= 1<<1;
 80017d4:	4b28      	ldr	r3, [pc, #160]	@ (8001878 <update_wd_config+0xb4>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	4a27      	ldr	r2, [pc, #156]	@ (8001878 <update_wd_config+0xb4>)
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM3->PSC = psc;
 80017e0:	4a26      	ldr	r2, [pc, #152]	@ (800187c <update_wd_config+0xb8>)
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM3->ARR = arr-1;
 80017e6:	88bb      	ldrh	r3, [r7, #4]
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	4b24      	ldr	r3, [pc, #144]	@ (800187c <update_wd_config+0xb8>)
 80017ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	//! 5. Enable auto reload buffering
	TIM3->CR1 |= TIM_CR1_ARPE;
 80017ee:	4b23      	ldr	r3, [pc, #140]	@ (800187c <update_wd_config+0xb8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a22      	ldr	r2, [pc, #136]	@ (800187c <update_wd_config+0xb8>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f8:	6013      	str	r3, [r2, #0]

	//! 6. Only counter overflow generate an interrupt
	TIM3->CR1 |= TIM_CR1_URS;
 80017fa:	4b20      	ldr	r3, [pc, #128]	@ (800187c <update_wd_config+0xb8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1f      	ldr	r2, [pc, #124]	@ (800187c <update_wd_config+0xb8>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6013      	str	r3, [r2, #0]

	//! 7. Transfer the content of the preload registers to buffers
	TIM3->EGR |= TIM_EGR_UG;
 8001806:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <update_wd_config+0xb8>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	4a1c      	ldr	r2, [pc, #112]	@ (800187c <update_wd_config+0xb8>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6153      	str	r3, [r2, #20]

	//! 8. Enable the update interrupt
	TIM3->DIER |= TIM_DIER_UIE;
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <update_wd_config+0xb8>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	4a19      	ldr	r2, [pc, #100]	@ (800187c <update_wd_config+0xb8>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	60d3      	str	r3, [r2, #12]
	TIM3->SR &= ~TIM_SR_UIF;    // Clear the interrupt
 800181e:	4b17      	ldr	r3, [pc, #92]	@ (800187c <update_wd_config+0xb8>)
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	4a16      	ldr	r2, [pc, #88]	@ (800187c <update_wd_config+0xb8>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6113      	str	r3, [r2, #16]

	//! 9. Configure the NVIC to run a callback function when interrupt occur
		/* Set interrupt priority */
	IRQn_Type IRQn = TIM3_IRQn;
 800182a:	231d      	movs	r3, #29
 800182c:	75fb      	strb	r3, [r7, #23]
	uint32_t prioritygroup = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
	uint32_t PreemptPriority = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
	uint32_t SubPriority = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
	prioritygroup = NVIC_GetPriorityGrouping();
 800183a:	f7ff ff39 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 800183e:	6138      	str	r0, [r7, #16]
	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	6938      	ldr	r0, [r7, #16]
 8001846:	f7ff ff89 	bl	800175c <NVIC_EncodePriority>
 800184a:	4602      	mov	r2, r0
 800184c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff58 	bl	8001708 <__NVIC_SetPriority>

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8001858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff35 	bl	80016cc <__NVIC_EnableIRQ>

	//! Optional: Stops the timer when debug is halted
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM3_STOP;
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <update_wd_config+0xbc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	4a06      	ldr	r2, [pc, #24]	@ (8001880 <update_wd_config+0xbc>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6093      	str	r3, [r2, #8]
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40000400 	.word	0x40000400
 8001880:	e0042000 	.word	0xe0042000

08001884 <update_wd_enable>:

void update_wd_enable(uint8_t state){
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]

	if (state == 0)
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d106      	bne.n	80018a2 <update_wd_enable+0x1e>
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8001894:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <update_wd_enable+0x38>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <update_wd_enable+0x38>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	6013      	str	r3, [r2, #0]
	else
		TIM3->CR1 |= TIM_CR1_CEN;
}
 80018a0:	e005      	b.n	80018ae <update_wd_enable+0x2a>
		TIM3->CR1 |= TIM_CR1_CEN;
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <update_wd_enable+0x38>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <update_wd_enable+0x38>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6013      	str	r3, [r2, #0]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40000400 	.word	0x40000400

080018c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018c4:	f3bf 8f4f 	dsb	sy
}
 80018c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <__NVIC_SystemReset+0x24>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80018d2:	4904      	ldr	r1, [pc, #16]	@ (80018e4 <__NVIC_SystemReset+0x24>)
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <__NVIC_SystemReset+0x28>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80018da:	f3bf 8f4f 	dsb	sy
}
 80018de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <__NVIC_SystemReset+0x20>
 80018e4:	e000ed00 	.word	0xe000ed00
 80018e8:	05fa0004 	.word	0x05fa0004

080018ec <TIM4_IRQHandler>:
//b1 - 1 = using external mag calib values
//b0 - 1 = using external gyro calib values
volatile uint8_t data_output_halt = 1;

void TIM4_IRQHandler ( void )
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
	if ( TIM4->SR & TIM_SR_UIF )
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <TIM4_IRQHandler+0x2c>)
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <TIM4_IRQHandler+0x22>
	{
		TIM4->SR &= ~TIM_SR_UIF;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <TIM4_IRQHandler+0x2c>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <TIM4_IRQHandler+0x2c>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6113      	str	r3, [r2, #16]
		//GPIOA->ODR |= 1<<5;
		CF_update_run = 1;
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <TIM4_IRQHandler+0x30>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
		//GPIOA->ODR &= ~(1<<5);
	}
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40000800 	.word	0x40000800
 800191c:	200000e0 	.word	0x200000e0

08001920 <TIM3_IRQHandler>:

void TIM3_IRQHandler ( void ) // watchdog
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
	if ( TIM3->SR & TIM_SR_UIF )
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <TIM3_IRQHandler+0x3c>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d010      	beq.n	8001952 <TIM3_IRQHandler+0x32>

	{
		TIM3->SR &= ~TIM_SR_UIF;
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <TIM3_IRQHandler+0x3c>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a09      	ldr	r2, [pc, #36]	@ (800195c <TIM3_IRQHandler+0x3c>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6113      	str	r3, [r2, #16]

		if(!run_complete & !data_output_halt){
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <TIM3_IRQHandler+0x40>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <TIM3_IRQHandler+0x44>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0

			//NVIC_SystemReset();
		}
		run_complete = 0;
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <TIM3_IRQHandler+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
	}
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40000400 	.word	0x40000400
 8001960:	20000030 	.word	0x20000030
 8001964:	20000031 	.word	0x20000031

08001968 <USART1_IRQHandler>:


volatile uint8_t reset_calib_values = 0;
volatile uint8_t send_angles_req = 0;

void USART1_IRQHandler(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
    if (!(USART1->SR & USART_SR_RXNE))
 800196e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b68 <USART1_IRQHandler+0x200>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80e9 	beq.w	8001b4e <USART1_IRQHandler+0x1e6>
        return;

    uint8_t data = (uint8_t)(USART1->DR & 0xFF);
 800197c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b68 <USART1_IRQHandler+0x200>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	71fb      	strb	r3, [r7, #7]
    static uint8_t state = WAIT_HEADER;
    //static uint8_t buf[48];
    static uint8_t count;
    static uint8_t msg_type;

    switch (state) {
 8001982:	4b7a      	ldr	r3, [pc, #488]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b04      	cmp	r3, #4
 8001988:	f200 80ea 	bhi.w	8001b60 <USART1_IRQHandler+0x1f8>
 800198c:	a201      	add	r2, pc, #4	@ (adr r2, 8001994 <USART1_IRQHandler+0x2c>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019a9 	.word	0x080019a9
 8001998:	080019bf 	.word	0x080019bf
 800199c:	08001aaf 	.word	0x08001aaf
 80019a0:	08001adf 	.word	0x08001adf
 80019a4:	08001b1f 	.word	0x08001b1f
        case WAIT_HEADER:
            if (data == 0xA9) {
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2ba9      	cmp	r3, #169	@ 0xa9
 80019ac:	f040 80d1 	bne.w	8001b52 <USART1_IRQHandler+0x1ea>
                state = GOT_TYPE;
 80019b0:	4b6e      	ldr	r3, [pc, #440]	@ (8001b6c <USART1_IRQHandler+0x204>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
                count = 0;
 80019b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b70 <USART1_IRQHandler+0x208>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
            }
            break;
 80019bc:	e0c9      	b.n	8001b52 <USART1_IRQHandler+0x1ea>

        case GOT_TYPE:
            msg_type = data;
 80019be:	4a6d      	ldr	r2, [pc, #436]	@ (8001b74 <USART1_IRQHandler+0x20c>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	7013      	strb	r3, [r2, #0]
            switch (msg_type) {
 80019c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b74 <USART1_IRQHandler+0x20c>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	2b11      	cmp	r3, #17
 80019cc:	d86a      	bhi.n	8001aa4 <USART1_IRQHandler+0x13c>
 80019ce:	a201      	add	r2, pc, #4	@ (adr r2, 80019d4 <USART1_IRQHandler+0x6c>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	08001a1d 	.word	0x08001a1d
 80019d8:	08001a31 	.word	0x08001a31
 80019dc:	08001a3f 	.word	0x08001a3f
 80019e0:	08001a47 	.word	0x08001a47
 80019e4:	08001a4f 	.word	0x08001a4f
 80019e8:	08001a5d 	.word	0x08001a5d
 80019ec:	08001a7d 	.word	0x08001a7d
 80019f0:	08001aa5 	.word	0x08001aa5
 80019f4:	08001aa5 	.word	0x08001aa5
 80019f8:	08001aa5 	.word	0x08001aa5
 80019fc:	08001aa5 	.word	0x08001aa5
 8001a00:	08001aa5 	.word	0x08001aa5
 8001a04:	08001aa5 	.word	0x08001aa5
 8001a08:	08001aa5 	.word	0x08001aa5
 8001a0c:	08001aa5 	.word	0x08001aa5
 8001a10:	08001a8b 	.word	0x08001a8b
 8001a14:	08001a93 	.word	0x08001a93
 8001a18:	08001aa1 	.word	0x08001aa1
                case 0x01:
                    send_angles_req   = 1;
 8001a1c:	4b56      	ldr	r3, [pc, #344]	@ (8001b78 <USART1_IRQHandler+0x210>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
                    send_raw_data     = 0;
 8001a22:	4b56      	ldr	r3, [pc, #344]	@ (8001b7c <USART1_IRQHandler+0x214>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
                    state             = WAIT_HEADER;
 8001a28:	4b50      	ldr	r3, [pc, #320]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001a2e:	e03d      	b.n	8001aac <USART1_IRQHandler+0x144>
                case 0x02:
                    send_raw_data     = 1;
 8001a30:	4b52      	ldr	r3, [pc, #328]	@ (8001b7c <USART1_IRQHandler+0x214>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
                    state             = WAIT_HEADER;
 8001a36:	4b4d      	ldr	r3, [pc, #308]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
                    break;
 8001a3c:	e036      	b.n	8001aac <USART1_IRQHandler+0x144>
                case 0x03:
                    state = RECV_GYRO_CAL;
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	701a      	strb	r2, [r3, #0]
                    break;
 8001a44:	e032      	b.n	8001aac <USART1_IRQHandler+0x144>
                case 0x04:
                    state = RECV_MAG_CAL;
 8001a46:	4b49      	ldr	r3, [pc, #292]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001a48:	2203      	movs	r2, #3
 8001a4a:	701a      	strb	r2, [r3, #0]
                    break;
 8001a4c:	e02e      	b.n	8001aac <USART1_IRQHandler+0x144>
                case 0x05:
                    send_status       = 1;
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <USART1_IRQHandler+0x218>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
                    state             = WAIT_HEADER;
 8001a54:	4b45      	ldr	r3, [pc, #276]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
                    break;
 8001a5a:	e027      	b.n	8001aac <USART1_IRQHandler+0x144>
                case 0x06:
                    data_output_halt  = 1;
 8001a5c:	4b49      	ldr	r3, [pc, #292]	@ (8001b84 <USART1_IRQHandler+0x21c>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
                    send_raw_data     = 0;
 8001a62:	4b46      	ldr	r3, [pc, #280]	@ (8001b7c <USART1_IRQHandler+0x214>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
                    GPIOA->ODR      &= ~(1<<5);
 8001a68:	4b47      	ldr	r3, [pc, #284]	@ (8001b88 <USART1_IRQHandler+0x220>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	4a46      	ldr	r2, [pc, #280]	@ (8001b88 <USART1_IRQHandler+0x220>)
 8001a6e:	f023 0320 	bic.w	r3, r3, #32
 8001a72:	6153      	str	r3, [r2, #20]
                    state             = WAIT_HEADER;
 8001a74:	4b3d      	ldr	r3, [pc, #244]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
                    break;
 8001a7a:	e017      	b.n	8001aac <USART1_IRQHandler+0x144>
                case 0x07:
                    data_output_halt  = 0;
 8001a7c:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <USART1_IRQHandler+0x21c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
                    state             = WAIT_HEADER;
 8001a82:	4b3a      	ldr	r3, [pc, #232]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
                    break;
 8001a88:	e010      	b.n	8001aac <USART1_IRQHandler+0x144>
                case 0x10:
                    state = RECV_GYRO_SCALE;
 8001a8a:	4b38      	ldr	r3, [pc, #224]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	701a      	strb	r2, [r3, #0]
                    break;
 8001a90:	e00c      	b.n	8001aac <USART1_IRQHandler+0x144>
                case 0x11:
                    reset_calib_values = 1;
 8001a92:	4b3e      	ldr	r3, [pc, #248]	@ (8001b8c <USART1_IRQHandler+0x224>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
                    state             = WAIT_HEADER;
 8001a98:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
                    break;
 8001a9e:	e005      	b.n	8001aac <USART1_IRQHandler+0x144>
                case 0x12:
                    NVIC_SystemReset();
 8001aa0:	f7ff ff0e 	bl	80018c0 <__NVIC_SystemReset>
                    /* no fall‑through */
                    break;
                default:
                    state = WAIT_HEADER;
 8001aa4:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
                    break;
 8001aaa:	bf00      	nop
            }
            break;
 8001aac:	e058      	b.n	8001b60 <USART1_IRQHandler+0x1f8>

        case RECV_GYRO_CAL:
        	rx_buffer[count++] = data;
 8001aae:	4b30      	ldr	r3, [pc, #192]	@ (8001b70 <USART1_IRQHandler+0x208>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	b2d1      	uxtb	r1, r2
 8001ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8001b70 <USART1_IRQHandler+0x208>)
 8001ab8:	7011      	strb	r1, [r2, #0]
 8001aba:	4619      	mov	r1, r3
 8001abc:	4a34      	ldr	r2, [pc, #208]	@ (8001b90 <USART1_IRQHandler+0x228>)
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	5453      	strb	r3, [r2, r1]
            if (count == 12) {
 8001ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b70 <USART1_IRQHandler+0x208>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d145      	bne.n	8001b56 <USART1_IRQHandler+0x1ee>

                uart_data_ready         = 1;
 8001aca:	4b32      	ldr	r3, [pc, #200]	@ (8001b94 <USART1_IRQHandler+0x22c>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
                external_gyro_calib     = 1;
 8001ad0:	4b31      	ldr	r3, [pc, #196]	@ (8001b98 <USART1_IRQHandler+0x230>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
                state                   = WAIT_HEADER;
 8001ad6:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001adc:	e03b      	b.n	8001b56 <USART1_IRQHandler+0x1ee>

        case RECV_MAG_CAL:
        	rx_buffer[count++] = data;
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <USART1_IRQHandler+0x208>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	b2d1      	uxtb	r1, r2
 8001ae6:	4a22      	ldr	r2, [pc, #136]	@ (8001b70 <USART1_IRQHandler+0x208>)
 8001ae8:	7011      	strb	r1, [r2, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	4a28      	ldr	r2, [pc, #160]	@ (8001b90 <USART1_IRQHandler+0x228>)
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	5453      	strb	r3, [r2, r1]
            if (count == 48) {
 8001af2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <USART1_IRQHandler+0x208>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b30      	cmp	r3, #48	@ 0x30
 8001af8:	d12f      	bne.n	8001b5a <USART1_IRQHandler+0x1f2>

                status_reg           |= (1<<1);
 8001afa:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <USART1_IRQHandler+0x234>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <USART1_IRQHandler+0x234>)
 8001b08:	701a      	strb	r2, [r3, #0]
                uart_data_ready       = 1;
 8001b0a:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <USART1_IRQHandler+0x22c>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
                external_mag_calib    = 1;
 8001b10:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <USART1_IRQHandler+0x238>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
                state                 = WAIT_HEADER;
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001b1c:	e01d      	b.n	8001b5a <USART1_IRQHandler+0x1f2>

        case RECV_GYRO_SCALE:
        	rx_buffer[count++] = data;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <USART1_IRQHandler+0x208>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	b2d1      	uxtb	r1, r2
 8001b26:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <USART1_IRQHandler+0x208>)
 8001b28:	7011      	strb	r1, [r2, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <USART1_IRQHandler+0x228>)
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	5453      	strb	r3, [r2, r1]
            if (count == 12) {
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <USART1_IRQHandler+0x208>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d111      	bne.n	8001b5e <USART1_IRQHandler+0x1f6>

                uart_data_ready              = 1;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <USART1_IRQHandler+0x22c>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
                external_gyro_scaling_calib  = 1;
 8001b40:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <USART1_IRQHandler+0x23c>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
                state                        = WAIT_HEADER;
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <USART1_IRQHandler+0x204>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001b4c:	e007      	b.n	8001b5e <USART1_IRQHandler+0x1f6>
        return;
 8001b4e:	bf00      	nop
 8001b50:	e006      	b.n	8001b60 <USART1_IRQHandler+0x1f8>
            break;
 8001b52:	bf00      	nop
 8001b54:	e004      	b.n	8001b60 <USART1_IRQHandler+0x1f8>
            break;
 8001b56:	bf00      	nop
 8001b58:	e002      	b.n	8001b60 <USART1_IRQHandler+0x1f8>
            break;
 8001b5a:	bf00      	nop
 8001b5c:	e000      	b.n	8001b60 <USART1_IRQHandler+0x1f8>
            break;
 8001b5e:	bf00      	nop
    }
}
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40011000 	.word	0x40011000
 8001b6c:	2000011a 	.word	0x2000011a
 8001b70:	2000011b 	.word	0x2000011b
 8001b74:	2000011c 	.word	0x2000011c
 8001b78:	20000119 	.word	0x20000119
 8001b7c:	200000e6 	.word	0x200000e6
 8001b80:	200000e7 	.word	0x200000e7
 8001b84:	20000031 	.word	0x20000031
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	20000118 	.word	0x20000118
 8001b90:	200000e8 	.word	0x200000e8
 8001b94:	200000e2 	.word	0x200000e2
 8001b98:	200000e3 	.word	0x200000e3
 8001b9c:	200000e1 	.word	0x200000e1
 8001ba0:	200000e5 	.word	0x200000e5
 8001ba4:	200000e4 	.word	0x200000e4

08001ba8 <main>:




int main(void){
 8001ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bac:	b0ec      	sub	sp, #432	@ 0x1b0
 8001bae:	af00      	add	r7, sp, #0
	uint8_t period_ms = 2;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
	float T = period_ms/1000.0;
 8001bb6:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc5e 	bl	800047c <__aeabi_i2d>
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4bdc      	ldr	r3, [pc, #880]	@ (8001f38 <main+0x390>)
 8001bc6:	f7fe fded 	bl	80007a4 <__aeabi_ddiv>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7fe ff95 	bl	8000b00 <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184

	float accel_alpha = 0.1;
 8001bdc:	4bd7      	ldr	r3, [pc, #860]	@ (8001f3c <main+0x394>)
 8001bde:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	float gyro_alpha = 0.05;
 8001be2:	4bd7      	ldr	r3, [pc, #860]	@ (8001f40 <main+0x398>)
 8001be4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
	float cf_alpha = 0.01;
 8001be8:	4bd6      	ldr	r3, [pc, #856]	@ (8001f44 <main+0x39c>)
 8001bea:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
	float mag_data_rearranged[3];
	float accel_data[3];
	float gyro_data[3];
	float temp_data[1];

	float mag_data_filt [3] = {0,0,0};
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	float accel_data_filt [3] = {0,0,0};
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	float gyro_data_filt [3] = {0,0,0};
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

	float phi_acc_est = 0;
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	float phi_acc_est_old = 0;
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174

	float theta_acc_est = 0;
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	float theta_acc_est_old = 0;
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

	float psi_mag_est = 0;
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	float psi_mag_est_old = 0;
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

	float phi_dot_est = 0;
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
	float theta_dot_est = 0;
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
	float psi_dot_est = 0;
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

	float rotmat[9] = {1,0,0,0,0,0,0,0,0};
 8001c7e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001c82:	2224      	movs	r2, #36	@ 0x24
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 fab8 	bl	80031fc <memset>
 8001c8c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	float phi_est = 0;
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	float theta_est = 0;
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	float psi_est = 0;
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

	float mag_unit[3] = {0,0,0};
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	float mag_unit_stab[3] = {0,0,0};
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	float rotmat_x[9] = {1,0,0,0,0,0,0,0,0};
 8001cdc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001ce0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	2324      	movs	r3, #36	@ 0x24
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2100      	movs	r1, #0
 8001cec:	f001 fa86 	bl	80031fc <memset>
 8001cf0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001cf4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cf8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cfc:	601a      	str	r2, [r3, #0]
	float rotmat_y[9] = {0,0,0,0,1,0,0,0,0};
 8001cfe:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d02:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d06:	4618      	mov	r0, r3
 8001d08:	2324      	movs	r3, #36	@ 0x24
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	f001 fa75 	bl	80031fc <memset>
 8001d12:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d16:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d1a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d1e:	611a      	str	r2, [r3, #16]
	float rotmat_x_reversed[9] = {1,0,0,0,0,0,0,0,0};
 8001d20:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d24:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d28:	4618      	mov	r0, r3
 8001d2a:	2324      	movs	r3, #36	@ 0x24
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2100      	movs	r1, #0
 8001d30:	f001 fa64 	bl	80031fc <memset>
 8001d34:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d38:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d3c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d40:	601a      	str	r2, [r3, #0]
	float east_horizon[3] = {0,0,0};
 8001d42:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d46:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d54:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
	float east_horizon_norm[3] = {0,0,0};
 8001d6c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d70:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d7e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d8c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]

	float rot_x_r_mag_unit[3] = {0,0,0};
 8001d96:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001d9a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001da8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001db6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]


	uint8_t first_run = 1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197

	int16_t phi;
	int16_t theta;
	int16_t psi;

	SysClockConfig();
 8001dc6:	f7ff fb29 	bl	800141c <SysClockConfig>
	TIM5Config();
 8001dca:	f7fe fee9 	bl	8000ba0 <TIM5Config>
	I2C1_Config();
 8001dce:	f7ff f81d 	bl	8000e0c <I2C1_Config>
	GPIOConfig();
 8001dd2:	f001 f863 	bl	8002e9c <GPIOConfig>
	USART1Config();
 8001dd6:	f7ff fbc5 	bl	8001564 <USART1Config>




	period_timer_config(12000, 7*period_ms);
 8001dda:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	00d2      	lsls	r2, r2, #3
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8001dee:	f001 f907 	bl	8003000 <period_timer_config>
	update_wd_config(12000, 7*100*period_ms);
 8001df2:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	0091      	lsls	r1, r2, #2
 8001e02:	461a      	mov	r2, r3
 8001e04:	460b      	mov	r3, r1
 8001e06:	4413      	add	r3, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	00d2      	lsls	r2, r2, #3
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8001e18:	f7ff fcd4 	bl	80017c4 <update_wd_config>


	period_timer_enable(1);
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f001 f94f 	bl	80030c0 <period_timer_enable>
	update_wd_enable(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7ff fd2e 	bl	8001884 <update_wd_enable>

	MPU6050_Init ();
 8001e28:	f7ff f9d8 	bl	80011dc <MPU6050_Init>
	HMC5883L_Init();
 8001e2c:	f7fe ff4e 	bl	8000ccc <HMC5883L_Init>


	while (1)
	{
		if(external_gyro_calib){
 8001e30:	4b45      	ldr	r3, [pc, #276]	@ (8001f48 <main+0x3a0>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d028      	beq.n	8001e8c <main+0x2e4>
			for(uint8_t i = 0; i<3; i++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
 8001e40:	e015      	b.n	8001e6e <main+0x2c6>
				gyro_callib_500_dps[i] = IntToFloat(&rx_buffer[4*i]);
 8001e42:	f897 3196 	ldrb.w	r3, [r7, #406]	@ 0x196
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4a40      	ldr	r2, [pc, #256]	@ (8001f4c <main+0x3a4>)
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f897 4196 	ldrb.w	r4, [r7, #406]	@ 0x196
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 ffeb 	bl	8002e2c <IntToFloat>
 8001e56:	eef0 7a40 	vmov.f32	s15, s0
 8001e5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f50 <main+0x3a8>)
 8001e5c:	00a3      	lsls	r3, r4, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	edc3 7a00 	vstr	s15, [r3]
			for(uint8_t i = 0; i<3; i++)
 8001e64:	f897 3196 	ldrb.w	r3, [r7, #406]	@ 0x196
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
 8001e6e:	f897 3196 	ldrb.w	r3, [r7, #406]	@ 0x196
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d9e5      	bls.n	8001e42 <main+0x29a>
			status_reg |= 1<<0;
 8001e76:	4b37      	ldr	r3, [pc, #220]	@ (8001f54 <main+0x3ac>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <main+0x3ac>)
 8001e84:	701a      	strb	r2, [r3, #0]
			external_gyro_calib = 0;
 8001e86:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <main+0x3a0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
		}
		if(external_gyro_scaling_calib){
 8001e8c:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <main+0x3b0>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d028      	beq.n	8001ee8 <main+0x340>
			for(uint8_t i = 0; i<3; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3195 	strb.w	r3, [r7, #405]	@ 0x195
 8001e9c:	e015      	b.n	8001eca <main+0x322>
				gyro_scaling_500_dps[i] = IntToFloat(&rx_buffer[4*i]);
 8001e9e:	f897 3195 	ldrb.w	r3, [r7, #405]	@ 0x195
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4a29      	ldr	r2, [pc, #164]	@ (8001f4c <main+0x3a4>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f897 4195 	ldrb.w	r4, [r7, #405]	@ 0x195
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 ffbd 	bl	8002e2c <IntToFloat>
 8001eb2:	eef0 7a40 	vmov.f32	s15, s0
 8001eb6:	4a29      	ldr	r2, [pc, #164]	@ (8001f5c <main+0x3b4>)
 8001eb8:	00a3      	lsls	r3, r4, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
			for(uint8_t i = 0; i<3; i++)
 8001ec0:	f897 3195 	ldrb.w	r3, [r7, #405]	@ 0x195
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f887 3195 	strb.w	r3, [r7, #405]	@ 0x195
 8001eca:	f897 3195 	ldrb.w	r3, [r7, #405]	@ 0x195
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d9e5      	bls.n	8001e9e <main+0x2f6>
			status_reg |= 1<<2;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <main+0x3ac>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <main+0x3ac>)
 8001ee0:	701a      	strb	r2, [r3, #0]
			external_gyro_scaling_calib = 0;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <main+0x3b0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
		}
		if(external_mag_calib){
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <main+0x3b8>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d060      	beq.n	8001fb4 <main+0x40c>
			for (uint8_t i = 0; i < 9; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3194 	strb.w	r3, [r7, #404]	@ 0x194
 8001ef8:	e015      	b.n	8001f26 <main+0x37e>
				A[i] = IntToFloat(&rx_buffer[4*i]);
 8001efa:	f897 3194 	ldrb.w	r3, [r7, #404]	@ 0x194
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <main+0x3a4>)
 8001f02:	4413      	add	r3, r2
 8001f04:	f897 4194 	ldrb.w	r4, [r7, #404]	@ 0x194
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 ff8f 	bl	8002e2c <IntToFloat>
 8001f0e:	eef0 7a40 	vmov.f32	s15, s0
 8001f12:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <main+0x3bc>)
 8001f14:	00a3      	lsls	r3, r4, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t i = 0; i < 9; i++)
 8001f1c:	f897 3194 	ldrb.w	r3, [r7, #404]	@ 0x194
 8001f20:	3301      	adds	r3, #1
 8001f22:	f887 3194 	strb.w	r3, [r7, #404]	@ 0x194
 8001f26:	f897 3194 	ldrb.w	r3, [r7, #404]	@ 0x194
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d9e5      	bls.n	8001efa <main+0x352>
			for (uint8_t i = 0; i < 3; i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3193 	strb.w	r3, [r7, #403]	@ 0x193
 8001f34:	e02f      	b.n	8001f96 <main+0x3ee>
 8001f36:	bf00      	nop
 8001f38:	408f4000 	.word	0x408f4000
 8001f3c:	3dcccccd 	.word	0x3dcccccd
 8001f40:	3d4ccccd 	.word	0x3d4ccccd
 8001f44:	3c23d70a 	.word	0x3c23d70a
 8001f48:	200000e3 	.word	0x200000e3
 8001f4c:	200000e8 	.word	0x200000e8
 8001f50:	200000d4 	.word	0x200000d4
 8001f54:	200000e1 	.word	0x200000e1
 8001f58:	200000e4 	.word	0x200000e4
 8001f5c:	20000024 	.word	0x20000024
 8001f60:	200000e5 	.word	0x200000e5
 8001f64:	20000000 	.word	0x20000000
				b[i] = IntToFloat(&rx_buffer[4*(i+9)]);  // now 'b' is your magnetometer array again
 8001f68:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 8001f6c:	3309      	adds	r3, #9
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4ac7      	ldr	r2, [pc, #796]	@ (8002290 <main+0x6e8>)
 8001f72:	4413      	add	r3, r2
 8001f74:	f897 4193 	ldrb.w	r4, [r7, #403]	@ 0x193
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 ff57 	bl	8002e2c <IntToFloat>
 8001f7e:	eef0 7a40 	vmov.f32	s15, s0
 8001f82:	4ac4      	ldr	r2, [pc, #784]	@ (8002294 <main+0x6ec>)
 8001f84:	00a3      	lsls	r3, r4, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t i = 0; i < 3; i++)
 8001f8c:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 8001f90:	3301      	adds	r3, #1
 8001f92:	f887 3193 	strb.w	r3, [r7, #403]	@ 0x193
 8001f96:	f897 3193 	ldrb.w	r3, [r7, #403]	@ 0x193
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d9e4      	bls.n	8001f68 <main+0x3c0>
			status_reg           |= (1<<1);
 8001f9e:	4bbe      	ldr	r3, [pc, #760]	@ (8002298 <main+0x6f0>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4bbb      	ldr	r3, [pc, #748]	@ (8002298 <main+0x6f0>)
 8001fac:	701a      	strb	r2, [r3, #0]
			external_mag_calib = 0;
 8001fae:	4bbb      	ldr	r3, [pc, #748]	@ (800229c <main+0x6f4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
		}
		if(send_status){
 8001fb4:	4bba      	ldr	r3, [pc, #744]	@ (80022a0 <main+0x6f8>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <main+0x42e>
			send_status = 0;
 8001fbe:	4bb8      	ldr	r3, [pc, #736]	@ (80022a0 <main+0x6f8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
			Delay_ms(2);
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f7fe fe27 	bl	8000c18 <Delay_ms>
			USART1_SendChar(status_reg);
 8001fca:	4bb3      	ldr	r3, [pc, #716]	@ (8002298 <main+0x6f0>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fb2f 	bl	8001634 <USART1_SendChar>
		}
		if(reset_calib_values){
 8001fd6:	4bb3      	ldr	r3, [pc, #716]	@ (80022a4 <main+0x6fc>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d05a      	beq.n	8002096 <main+0x4ee>
			reset_calib_values = 0;
 8001fe0:	4bb0      	ldr	r3, [pc, #704]	@ (80022a4 <main+0x6fc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
			A[0] = 1; A[1] = 0; A[2] = 0;
 8001fe6:	4bb0      	ldr	r3, [pc, #704]	@ (80022a8 <main+0x700>)
 8001fe8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	4bae      	ldr	r3, [pc, #696]	@ (80022a8 <main+0x700>)
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	4bac      	ldr	r3, [pc, #688]	@ (80022a8 <main+0x700>)
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
			A[3] = 0; A[4] = 1; A[5] = 0;
 8001ffe:	4baa      	ldr	r3, [pc, #680]	@ (80022a8 <main+0x700>)
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	4ba8      	ldr	r3, [pc, #672]	@ (80022a8 <main+0x700>)
 8002008:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800200c:	611a      	str	r2, [r3, #16]
 800200e:	4ba6      	ldr	r3, [pc, #664]	@ (80022a8 <main+0x700>)
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
			A[6] = 0; A[7] = 0; A[8] = 1;
 8002016:	4ba4      	ldr	r3, [pc, #656]	@ (80022a8 <main+0x700>)
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
 800201e:	4ba2      	ldr	r3, [pc, #648]	@ (80022a8 <main+0x700>)
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
 8002026:	4ba0      	ldr	r3, [pc, #640]	@ (80022a8 <main+0x700>)
 8002028:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800202c:	621a      	str	r2, [r3, #32]
			b[0] = 0; b[1] = 0; b[2] = 0;
 800202e:	4b99      	ldr	r3, [pc, #612]	@ (8002294 <main+0x6ec>)
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	4b97      	ldr	r3, [pc, #604]	@ (8002294 <main+0x6ec>)
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	4b95      	ldr	r3, [pc, #596]	@ (8002294 <main+0x6ec>)
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
			gyro_callib_500_dps[0] = 0; gyro_callib_500_dps[1] = 0; gyro_callib_500_dps[2] = 0;
 8002046:	4b99      	ldr	r3, [pc, #612]	@ (80022ac <main+0x704>)
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	4b97      	ldr	r3, [pc, #604]	@ (80022ac <main+0x704>)
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	4b95      	ldr	r3, [pc, #596]	@ (80022ac <main+0x704>)
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
			gyro_scaling_500_dps[0] = 1; gyro_scaling_500_dps[1] = 1; gyro_scaling_500_dps[2] = 1;
 800205e:	4b94      	ldr	r3, [pc, #592]	@ (80022b0 <main+0x708>)
 8002060:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	4b92      	ldr	r3, [pc, #584]	@ (80022b0 <main+0x708>)
 8002068:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	4b90      	ldr	r3, [pc, #576]	@ (80022b0 <main+0x708>)
 8002070:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002074:	609a      	str	r2, [r3, #8]
			status_reg &= ~(1<<0);
 8002076:	4b88      	ldr	r3, [pc, #544]	@ (8002298 <main+0x6f0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b85      	ldr	r3, [pc, #532]	@ (8002298 <main+0x6f0>)
 8002084:	701a      	strb	r2, [r3, #0]
			status_reg &= ~(1<<1);
 8002086:	4b84      	ldr	r3, [pc, #528]	@ (8002298 <main+0x6f0>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f023 0302 	bic.w	r3, r3, #2
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b81      	ldr	r3, [pc, #516]	@ (8002298 <main+0x6f0>)
 8002094:	701a      	strb	r2, [r3, #0]
		}

		if(CF_update_run){
 8002096:	4b87      	ldr	r3, [pc, #540]	@ (80022b4 <main+0x70c>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 860c 	beq.w	8002cba <main+0x1112>
			CF_update_run = 0;
 80020a2:	4b84      	ldr	r3, [pc, #528]	@ (80022b4 <main+0x70c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]

			HMC5883L_Read_Mag(mag_data);
 80020a8:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fe2f 	bl	8000d10 <HMC5883L_Read_Mag>

			MPU6050_Read_Accel(accel_data);
 80020b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f8c2 	bl	8001240 <MPU6050_Read_Accel>
			MPU6050_Read_Gyro(gyro_data);
 80020bc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f935 	bl	8001330 <MPU6050_Read_Gyro>

			//MPU6050_Read_All(accel_data, gyro_data);

			mag_data_callibrated[0] = (mag_data[0]-b[0])*A[0] + (mag_data[1]-b[1])*A[1] + (mag_data[2]-b[2])*A[2];
 80020c6:	ed97 7a53 	vldr	s14, [r7, #332]	@ 0x14c
 80020ca:	4b72      	ldr	r3, [pc, #456]	@ (8002294 <main+0x6ec>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020d4:	4b74      	ldr	r3, [pc, #464]	@ (80022a8 <main+0x700>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	edd7 6a54 	vldr	s13, [r7, #336]	@ 0x150
 80020e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002294 <main+0x6ec>)
 80020e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80020e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80020ec:	4b6e      	ldr	r3, [pc, #440]	@ (80022a8 <main+0x700>)
 80020ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80020f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020fa:	edd7 6a55 	vldr	s13, [r7, #340]	@ 0x154
 80020fe:	4b65      	ldr	r3, [pc, #404]	@ (8002294 <main+0x6ec>)
 8002100:	edd3 7a02 	vldr	s15, [r3, #8]
 8002104:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002108:	4b67      	ldr	r3, [pc, #412]	@ (80022a8 <main+0x700>)
 800210a:	edd3 7a02 	vldr	s15, [r3, #8]
 800210e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002116:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
			mag_data_callibrated[1] = (mag_data[0]-b[0])*A[3] + (mag_data[1]-b[1])*A[4] + (mag_data[2]-b[2])*A[5];
 800211a:	ed97 7a53 	vldr	s14, [r7, #332]	@ 0x14c
 800211e:	4b5d      	ldr	r3, [pc, #372]	@ (8002294 <main+0x6ec>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002128:	4b5f      	ldr	r3, [pc, #380]	@ (80022a8 <main+0x700>)
 800212a:	edd3 7a03 	vldr	s15, [r3, #12]
 800212e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002132:	edd7 6a54 	vldr	s13, [r7, #336]	@ 0x150
 8002136:	4b57      	ldr	r3, [pc, #348]	@ (8002294 <main+0x6ec>)
 8002138:	edd3 7a01 	vldr	s15, [r3, #4]
 800213c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002140:	4b59      	ldr	r3, [pc, #356]	@ (80022a8 <main+0x700>)
 8002142:	edd3 7a04 	vldr	s15, [r3, #16]
 8002146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800214e:	edd7 6a55 	vldr	s13, [r7, #340]	@ 0x154
 8002152:	4b50      	ldr	r3, [pc, #320]	@ (8002294 <main+0x6ec>)
 8002154:	edd3 7a02 	vldr	s15, [r3, #8]
 8002158:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800215c:	4b52      	ldr	r3, [pc, #328]	@ (80022a8 <main+0x700>)
 800215e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216a:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144
			mag_data_callibrated[2] = (mag_data[0]-b[0])*A[6] + (mag_data[1]-b[1])*A[7] + (mag_data[2]-b[2])*A[8];
 800216e:	ed97 7a53 	vldr	s14, [r7, #332]	@ 0x14c
 8002172:	4b48      	ldr	r3, [pc, #288]	@ (8002294 <main+0x6ec>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800217c:	4b4a      	ldr	r3, [pc, #296]	@ (80022a8 <main+0x700>)
 800217e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002186:	edd7 6a54 	vldr	s13, [r7, #336]	@ 0x150
 800218a:	4b42      	ldr	r3, [pc, #264]	@ (8002294 <main+0x6ec>)
 800218c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002190:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002194:	4b44      	ldr	r3, [pc, #272]	@ (80022a8 <main+0x700>)
 8002196:	edd3 7a07 	vldr	s15, [r3, #28]
 800219a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021a2:	edd7 6a55 	vldr	s13, [r7, #340]	@ 0x154
 80021a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <main+0x6ec>)
 80021a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80021ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80021b0:	4b3d      	ldr	r3, [pc, #244]	@ (80022a8 <main+0x700>)
 80021b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

			mag_data_rearranged[0] = -mag_data_callibrated[1];
 80021c2:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 80021c6:	eef1 7a67 	vneg.f32	s15, s15
 80021ca:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
			mag_data_rearranged[1] = -mag_data_callibrated[0];
 80021ce:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80021d2:	eef1 7a67 	vneg.f32	s15, s15
 80021d6:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
			mag_data_rearranged[2] = -mag_data_callibrated[2];
 80021da:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 80021de:	eef1 7a67 	vneg.f32	s15, s15
 80021e2:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c

			float mag_length = sqrt(pow(mag_data_rearranged[0],2)+pow(mag_data_rearranged[1],2)+pow(mag_data_rearranged[2],2));
 80021e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f958 	bl	80004a0 <__aeabi_f2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 8002288 <main+0x6e0>
 80021f8:	ec43 2b10 	vmov	d0, r2, r3
 80021fc:	f001 f832 	bl	8003264 <pow>
 8002200:	ec55 4b10 	vmov	r4, r5, d0
 8002204:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f949 	bl	80004a0 <__aeabi_f2d>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8002288 <main+0x6e0>
 8002216:	ec43 2b10 	vmov	d0, r2, r3
 800221a:	f001 f823 	bl	8003264 <pow>
 800221e:	ec53 2b10 	vmov	r2, r3, d0
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f7fd ffdd 	bl	80001e4 <__adddf3>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	461d      	mov	r5, r3
 8002232:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f932 	bl	80004a0 <__aeabi_f2d>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8002288 <main+0x6e0>
 8002244:	ec43 2b10 	vmov	d0, r2, r3
 8002248:	f001 f80c 	bl	8003264 <pow>
 800224c:	ec53 2b10 	vmov	r2, r3, d0
 8002250:	4620      	mov	r0, r4
 8002252:	4629      	mov	r1, r5
 8002254:	f7fd ffc6 	bl	80001e4 <__adddf3>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	ec43 2b17 	vmov	d7, r2, r3
 8002260:	eeb0 0a47 	vmov.f32	s0, s14
 8002264:	eef0 0a67 	vmov.f32	s1, s15
 8002268:	f001 f86c 	bl	8003344 <sqrt>
 800226c:	ec53 2b10 	vmov	r2, r3, d0
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc44 	bl	8000b00 <__aeabi_d2f>
 8002278:	4603      	mov	r3, r0
 800227a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

			for(uint8_t index = 0; index<3; index++){
 800227e:	2300      	movs	r3, #0
 8002280:	f887 3192 	strb.w	r3, [r7, #402]	@ 0x192
 8002284:	e041      	b.n	800230a <main+0x762>
 8002286:	bf00      	nop
 8002288:	00000000 	.word	0x00000000
 800228c:	40000000 	.word	0x40000000
 8002290:	200000e8 	.word	0x200000e8
 8002294:	200000c8 	.word	0x200000c8
 8002298:	200000e1 	.word	0x200000e1
 800229c:	200000e5 	.word	0x200000e5
 80022a0:	200000e7 	.word	0x200000e7
 80022a4:	20000118 	.word	0x20000118
 80022a8:	20000000 	.word	0x20000000
 80022ac:	200000d4 	.word	0x200000d4
 80022b0:	20000024 	.word	0x20000024
 80022b4:	200000e0 	.word	0x200000e0
				gyro_data[index] = (gyro_data[index] - gyro_callib_500_dps[index])*gyro_scaling_500_dps[index];
 80022b8:	f897 3192 	ldrb.w	r3, [r7, #402]	@ 0x192
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80022c2:	443b      	add	r3, r7
 80022c4:	3b94      	subs	r3, #148	@ 0x94
 80022c6:	ed93 7a00 	vldr	s14, [r3]
 80022ca:	f897 3192 	ldrb.w	r3, [r7, #402]	@ 0x192
 80022ce:	4a13      	ldr	r2, [pc, #76]	@ (800231c <main+0x774>)
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022dc:	f897 3192 	ldrb.w	r3, [r7, #402]	@ 0x192
 80022e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002320 <main+0x778>)
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	f897 3192 	ldrb.w	r3, [r7, #402]	@ 0x192
 80022ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80022f8:	443b      	add	r3, r7
 80022fa:	3b94      	subs	r3, #148	@ 0x94
 80022fc:	edc3 7a00 	vstr	s15, [r3]
			for(uint8_t index = 0; index<3; index++){
 8002300:	f897 3192 	ldrb.w	r3, [r7, #402]	@ 0x192
 8002304:	3301      	adds	r3, #1
 8002306:	f887 3192 	strb.w	r3, [r7, #402]	@ 0x192
 800230a:	f897 3192 	ldrb.w	r3, [r7, #402]	@ 0x192
 800230e:	2b02      	cmp	r3, #2
 8002310:	d9d2      	bls.n	80022b8 <main+0x710>
			}
			/* FILTERING */
			for(uint8_t index = 0; index<3; index++){
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3191 	strb.w	r3, [r7, #401]	@ 0x191
 8002318:	e05b      	b.n	80023d2 <main+0x82a>
 800231a:	bf00      	nop
 800231c:	200000d4 	.word	0x200000d4
 8002320:	20000024 	.word	0x20000024
				accel_data_filt[index] = accel_alpha * accel_data_filt[index] + (1-accel_alpha) * accel_data[index];
 8002324:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800232e:	443b      	add	r3, r7
 8002330:	3bb0      	subs	r3, #176	@ 0xb0
 8002332:	ed93 7a00 	vldr	s14, [r3]
 8002336:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 800233a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002342:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8002346:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800234a:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002354:	443b      	add	r3, r7
 8002356:	3b88      	subs	r3, #136	@ 0x88
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002360:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 8002364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800236e:	443b      	add	r3, r7
 8002370:	3bb0      	subs	r3, #176	@ 0xb0
 8002372:	edc3 7a00 	vstr	s15, [r3]
				gyro_data_filt[index] = gyro_alpha * gyro_data_filt[index] + (1-gyro_alpha) * gyro_data[index];
 8002376:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002380:	443b      	add	r3, r7
 8002382:	3bbc      	subs	r3, #188	@ 0xbc
 8002384:	ed93 7a00 	vldr	s14, [r3]
 8002388:	edd7 7a5f 	vldr	s15, [r7, #380]	@ 0x17c
 800238c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002394:	edd7 7a5f 	vldr	s15, [r7, #380]	@ 0x17c
 8002398:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800239c:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80023a6:	443b      	add	r3, r7
 80023a8:	3b94      	subs	r3, #148	@ 0x94
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b2:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 80023b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80023c0:	443b      	add	r3, r7
 80023c2:	3bbc      	subs	r3, #188	@ 0xbc
 80023c4:	edc3 7a00 	vstr	s15, [r3]
			for(uint8_t index = 0; index<3; index++){
 80023c8:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 80023cc:	3301      	adds	r3, #1
 80023ce:	f887 3191 	strb.w	r3, [r7, #401]	@ 0x191
 80023d2:	f897 3191 	ldrb.w	r3, [r7, #401]	@ 0x191
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d9a4      	bls.n	8002324 <main+0x77c>
			}

			/*ANGLES EST*/
			phi_acc_est_old = phi_acc_est;
 80023da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80023de:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
			theta_acc_est_old = theta_acc_est;
 80023e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80023e6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

			phi_acc_est = atan2(accel_data_filt[1],accel_data_filt[2]);
 80023ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f856 	bl	80004a0 <__aeabi_f2d>
 80023f4:	4604      	mov	r4, r0
 80023f6:	460d      	mov	r5, r1
 80023f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f84f 	bl	80004a0 <__aeabi_f2d>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	ec43 2b11 	vmov	d1, r2, r3
 800240a:	ec45 4b10 	vmov	d0, r4, r5
 800240e:	f000 ff27 	bl	8003260 <atan2>
 8002412:	ec53 2b10 	vmov	r2, r3, d0
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fb71 	bl	8000b00 <__aeabi_d2f>
 800241e:	4603      	mov	r3, r0
 8002420:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
			theta_acc_est = atan2(-accel_data_filt[0],sqrt(pow(accel_data_filt[1], 2)+pow(accel_data_filt[2], 2)));
 8002424:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002428:	eef1 7a67 	vneg.f32	s15, s15
 800242c:	ee17 3a90 	vmov	r3, s15
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f835 	bl	80004a0 <__aeabi_f2d>
 8002436:	4604      	mov	r4, r0
 8002438:	460d      	mov	r5, r1
 800243a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f82e 	bl	80004a0 <__aeabi_f2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	ed9f 1bb9 	vldr	d1, [pc, #740]	@ 8002730 <main+0xb88>
 800244c:	ec43 2b10 	vmov	d0, r2, r3
 8002450:	f000 ff08 	bl	8003264 <pow>
 8002454:	ec59 8b10 	vmov	r8, r9, d0
 8002458:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f81f 	bl	80004a0 <__aeabi_f2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	ed9f 1bb2 	vldr	d1, [pc, #712]	@ 8002730 <main+0xb88>
 800246a:	ec43 2b10 	vmov	d0, r2, r3
 800246e:	f000 fef9 	bl	8003264 <pow>
 8002472:	ec53 2b10 	vmov	r2, r3, d0
 8002476:	4640      	mov	r0, r8
 8002478:	4649      	mov	r1, r9
 800247a:	f7fd feb3 	bl	80001e4 <__adddf3>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	ec43 2b17 	vmov	d7, r2, r3
 8002486:	eeb0 0a47 	vmov.f32	s0, s14
 800248a:	eef0 0a67 	vmov.f32	s1, s15
 800248e:	f000 ff59 	bl	8003344 <sqrt>
 8002492:	eeb0 7a40 	vmov.f32	s14, s0
 8002496:	eef0 7a60 	vmov.f32	s15, s1
 800249a:	eeb0 1a47 	vmov.f32	s2, s14
 800249e:	eef0 1a67 	vmov.f32	s3, s15
 80024a2:	ec45 4b10 	vmov	d0, r4, r5
 80024a6:	f000 fedb 	bl	8003260 <atan2>
 80024aa:	ec53 2b10 	vmov	r2, r3, d0
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fb25 	bl	8000b00 <__aeabi_d2f>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

			rotmat[1] = sin(phi_acc_est)*tan(theta_acc_est); rotmat[2] = cos(phi_acc_est)*tan(theta_acc_est);
 80024bc:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 80024c0:	f7fd ffee 	bl	80004a0 <__aeabi_f2d>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	ec43 2b10 	vmov	d0, r2, r3
 80024cc:	f000 ffbc 	bl	8003448 <sin>
 80024d0:	ec55 4b10 	vmov	r4, r5, d0
 80024d4:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 80024d8:	f7fd ffe2 	bl	80004a0 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	ec43 2b10 	vmov	d0, r2, r3
 80024e4:	f001 f804 	bl	80034f0 <tan>
 80024e8:	ec53 2b10 	vmov	r2, r3, d0
 80024ec:	4620      	mov	r0, r4
 80024ee:	4629      	mov	r1, r5
 80024f0:	f7fe f82e 	bl	8000550 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe fb00 	bl	8000b00 <__aeabi_d2f>
 8002500:	4603      	mov	r3, r0
 8002502:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002506:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 800250a:	f7fd ffc9 	bl	80004a0 <__aeabi_f2d>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	ec43 2b10 	vmov	d0, r2, r3
 8002516:	f000 ff43 	bl	80033a0 <cos>
 800251a:	ec55 4b10 	vmov	r4, r5, d0
 800251e:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 8002522:	f7fd ffbd 	bl	80004a0 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	ec43 2b10 	vmov	d0, r2, r3
 800252e:	f000 ffdf 	bl	80034f0 <tan>
 8002532:	ec53 2b10 	vmov	r2, r3, d0
 8002536:	4620      	mov	r0, r4
 8002538:	4629      	mov	r1, r5
 800253a:	f7fe f809 	bl	8000550 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f7fe fadb 	bl	8000b00 <__aeabi_d2f>
 800254a:	4603      	mov	r3, r0
 800254c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			rotmat[4] = cos(phi_acc_est); 					rotmat[5] = -sin(phi_acc_est);
 8002550:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8002554:	f7fd ffa4 	bl	80004a0 <__aeabi_f2d>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	ec43 2b10 	vmov	d0, r2, r3
 8002560:	f000 ff1e 	bl	80033a0 <cos>
 8002564:	ec53 2b10 	vmov	r2, r3, d0
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe fac8 	bl	8000b00 <__aeabi_d2f>
 8002570:	4603      	mov	r3, r0
 8002572:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002576:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 800257a:	f7fd ff91 	bl	80004a0 <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	ec43 2b10 	vmov	d0, r2, r3
 8002586:	f000 ff5f 	bl	8003448 <sin>
 800258a:	ec53 2b10 	vmov	r2, r3, d0
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe fab5 	bl	8000b00 <__aeabi_d2f>
 8002596:	4603      	mov	r3, r0
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef1 7a67 	vneg.f32	s15, s15
 80025a0:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
			rotmat[7] = sin(phi_acc_est)*cos(theta_acc_est); rotmat[8] = cos(phi_acc_est)*cos(theta_acc_est);
 80025a4:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 80025a8:	f7fd ff7a 	bl	80004a0 <__aeabi_f2d>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	ec43 2b10 	vmov	d0, r2, r3
 80025b4:	f000 ff48 	bl	8003448 <sin>
 80025b8:	ec55 4b10 	vmov	r4, r5, d0
 80025bc:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 80025c0:	f7fd ff6e 	bl	80004a0 <__aeabi_f2d>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	ec43 2b10 	vmov	d0, r2, r3
 80025cc:	f000 fee8 	bl	80033a0 <cos>
 80025d0:	ec53 2b10 	vmov	r2, r3, d0
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fd ffba 	bl	8000550 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7fe fa8c 	bl	8000b00 <__aeabi_d2f>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80025ee:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 80025f2:	f7fd ff55 	bl	80004a0 <__aeabi_f2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	ec43 2b10 	vmov	d0, r2, r3
 80025fe:	f000 fecf 	bl	80033a0 <cos>
 8002602:	ec55 4b10 	vmov	r4, r5, d0
 8002606:	f8d7 01a8 	ldr.w	r0, [r7, #424]	@ 0x1a8
 800260a:	f7fd ff49 	bl	80004a0 <__aeabi_f2d>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	ec43 2b10 	vmov	d0, r2, r3
 8002616:	f000 fec3 	bl	80033a0 <cos>
 800261a:	ec53 2b10 	vmov	r2, r3, d0
 800261e:	4620      	mov	r0, r4
 8002620:	4629      	mov	r1, r5
 8002622:	f7fd ff95 	bl	8000550 <__aeabi_dmul>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe fa67 	bl	8000b00 <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
 8002634:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

			phi_dot_est = 	gyro_data_filt[0] + rotmat[1]*gyro_data_filt[1] + rotmat[2]*gyro_data_filt[2];
 8002638:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 800263c:	edd7 6a35 	vldr	s13, [r7, #212]	@ 0xd4
 8002640:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8002644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800264c:	edd7 6a36 	vldr	s13, [r7, #216]	@ 0xd8
 8002650:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168
			theta_dot_est = rotmat[4]*gyro_data_filt[1] + rotmat[5]*gyro_data_filt[2];
 8002660:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8002664:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8002668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266c:	edd7 6a39 	vldr	s13, [r7, #228]	@ 0xe4
 8002670:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267c:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
			psi_dot_est = 	rotmat[7]*gyro_data_filt[1] + rotmat[8]*gyro_data_filt[2];
 8002680:	ed97 7a3b 	vldr	s14, [r7, #236]	@ 0xec
 8002684:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8002688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268c:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 8002690:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269c:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160

			if(first_run){
 80026a0:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <main+0xb10>
				phi_est = phi_acc_est;
 80026a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80026ac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
				theta_est = theta_acc_est;
 80026b0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80026b4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
			}

			/*COMPLEMENTARY FILTER*/
			phi_est = phi_acc_est*cf_alpha + (1-cf_alpha)*(phi_est + T*phi_dot_est);
 80026b8:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 80026bc:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 80026c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026c8:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 80026cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026d0:	ed97 6a61 	vldr	s12, [r7, #388]	@ 0x184
 80026d4:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 80026d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026dc:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80026e0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80026e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ec:	edc7 7a68 	vstr	s15, [r7, #416]	@ 0x1a0
			theta_est = theta_acc_est*cf_alpha + (1-cf_alpha)*(theta_est+T*theta_dot_est);
 80026f0:	ed97 7a6a 	vldr	s14, [r7, #424]	@ 0x1a8
 80026f4:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 80026f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002700:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002704:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002708:	ed97 6a61 	vldr	s12, [r7, #388]	@ 0x184
 800270c:	edd7 7a59 	vldr	s15, [r7, #356]	@ 0x164
 8002710:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002714:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002718:	ee76 7a27 	vadd.f32	s15, s12, s15
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002724:	edc7 7a67 	vstr	s15, [r7, #412]	@ 0x19c


			//Mag
			for(uint8_t iter = 0; iter<3; iter++){
 8002728:	2300      	movs	r3, #0
 800272a:	f887 3190 	strb.w	r3, [r7, #400]	@ 0x190
 800272e:	e01e      	b.n	800276e <main+0xbc6>
 8002730:	00000000 	.word	0x00000000
 8002734:	40000000 	.word	0x40000000
				mag_unit[iter] = mag_data_rearranged[iter]/mag_length;
 8002738:	f897 3190 	ldrb.w	r3, [r7, #400]	@ 0x190
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002742:	443b      	add	r3, r7
 8002744:	3b7c      	subs	r3, #124	@ 0x7c
 8002746:	edd3 6a00 	vldr	s13, [r3]
 800274a:	f897 3190 	ldrb.w	r3, [r7, #400]	@ 0x190
 800274e:	ed97 7a57 	vldr	s14, [r7, #348]	@ 0x15c
 8002752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800275c:	443b      	add	r3, r7
 800275e:	3bec      	subs	r3, #236	@ 0xec
 8002760:	edc3 7a00 	vstr	s15, [r3]
			for(uint8_t iter = 0; iter<3; iter++){
 8002764:	f897 3190 	ldrb.w	r3, [r7, #400]	@ 0x190
 8002768:	3301      	adds	r3, #1
 800276a:	f887 3190 	strb.w	r3, [r7, #400]	@ 0x190
 800276e:	f897 3190 	ldrb.w	r3, [r7, #400]	@ 0x190
 8002772:	2b02      	cmp	r3, #2
 8002774:	d9e0      	bls.n	8002738 <main+0xb90>
			}

			//rotmat_x[4] = cos(phi_est); 	rotmat_x[5] = -sin(phi_est);
			//rotmat_x[7] = sin(phi_est); 	rotmat_x[8] = cos(phi_est);

			rotmat_y[0] = cos(theta_est); rotmat_y[2] = sin(theta_est);
 8002776:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800277a:	f7fd fe91 	bl	80004a0 <__aeabi_f2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	ec43 2b10 	vmov	d0, r2, r3
 8002786:	f000 fe0b 	bl	80033a0 <cos>
 800278a:	ec53 2b10 	vmov	r2, r3, d0
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe f9b5 	bl	8000b00 <__aeabi_d2f>
 8002796:	4602      	mov	r2, r0
 8002798:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800279c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80027a6:	f7fd fe7b 	bl	80004a0 <__aeabi_f2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	ec43 2b10 	vmov	d0, r2, r3
 80027b2:	f000 fe49 	bl	8003448 <sin>
 80027b6:	ec53 2b10 	vmov	r2, r3, d0
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe f99f 	bl	8000b00 <__aeabi_d2f>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80027c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027cc:	609a      	str	r2, [r3, #8]
			rotmat_y[6] = -sin(theta_est);rotmat_y[8] = cos(theta_est);
 80027ce:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80027d2:	f7fd fe65 	bl	80004a0 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	ec43 2b10 	vmov	d0, r2, r3
 80027de:	f000 fe33 	bl	8003448 <sin>
 80027e2:	ec53 2b10 	vmov	r2, r3, d0
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	f7fe f989 	bl	8000b00 <__aeabi_d2f>
 80027ee:	4603      	mov	r3, r0
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef1 7a67 	vneg.f32	s15, s15
 80027f8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80027fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002800:	edc3 7a06 	vstr	s15, [r3, #24]
 8002804:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8002808:	f7fd fe4a 	bl	80004a0 <__aeabi_f2d>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	ec43 2b10 	vmov	d0, r2, r3
 8002814:	f000 fdc4 	bl	80033a0 <cos>
 8002818:	ec53 2b10 	vmov	r2, r3, d0
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f7fe f96e 	bl	8000b00 <__aeabi_d2f>
 8002824:	4602      	mov	r2, r0
 8002826:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800282a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800282e:	621a      	str	r2, [r3, #32]


			rotmat_x_reversed[4] = cos(phi_est); 	rotmat_x_reversed[5] = sin(phi_est);
 8002830:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8002834:	f7fd fe34 	bl	80004a0 <__aeabi_f2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	ec43 2b10 	vmov	d0, r2, r3
 8002840:	f000 fdae 	bl	80033a0 <cos>
 8002844:	ec53 2b10 	vmov	r2, r3, d0
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe f958 	bl	8000b00 <__aeabi_d2f>
 8002850:	4602      	mov	r2, r0
 8002852:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002856:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800285a:	611a      	str	r2, [r3, #16]
 800285c:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 8002860:	f7fd fe1e 	bl	80004a0 <__aeabi_f2d>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	ec43 2b10 	vmov	d0, r2, r3
 800286c:	f000 fdec 	bl	8003448 <sin>
 8002870:	ec53 2b10 	vmov	r2, r3, d0
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f942 	bl	8000b00 <__aeabi_d2f>
 800287c:	4602      	mov	r2, r0
 800287e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002882:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002886:	615a      	str	r2, [r3, #20]
			rotmat_x_reversed[7] = -sin(phi_est); 	rotmat_x_reversed[8] = cos(phi_est);
 8002888:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 800288c:	f7fd fe08 	bl	80004a0 <__aeabi_f2d>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	ec43 2b10 	vmov	d0, r2, r3
 8002898:	f000 fdd6 	bl	8003448 <sin>
 800289c:	ec53 2b10 	vmov	r2, r3, d0
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f7fe f92c 	bl	8000b00 <__aeabi_d2f>
 80028a8:	4603      	mov	r3, r0
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef1 7a67 	vneg.f32	s15, s15
 80028b2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80028b6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028ba:	edc3 7a07 	vstr	s15, [r3, #28]
 80028be:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 80028c2:	f7fd fded 	bl	80004a0 <__aeabi_f2d>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	ec43 2b10 	vmov	d0, r2, r3
 80028ce:	f000 fd67 	bl	80033a0 <cos>
 80028d2:	ec53 2b10 	vmov	r2, r3, d0
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f911 	bl	8000b00 <__aeabi_d2f>
 80028de:	4602      	mov	r2, r0
 80028e0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80028e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028e8:	621a      	str	r2, [r3, #32]

			// mag_stabilised = rotmat_y*rotmat_x_reversed*mag_unit'
			//rot_x_r_mag_unit = rotmat_x_reversed*mag_unit'

			rot_x_r_mag_unit[0] = rotmat_x_reversed[0]*mag_unit[0];
 80028ea:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80028ee:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002902:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002906:	edc3 7a00 	vstr	s15, [r3]
			rot_x_r_mag_unit[1] = rotmat_x_reversed[4]*mag_unit[1]+ rotmat_x_reversed[5]*mag_unit[2];
 800290a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800290e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002912:	ed93 7a04 	vldr	s14, [r3, #16]
 8002916:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 800291a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002922:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002926:	edd3 6a05 	vldr	s13, [r3, #20]
 800292a:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 800292e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002936:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800293a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800293e:	edc3 7a01 	vstr	s15, [r3, #4]
			rot_x_r_mag_unit[2] = rotmat_x_reversed[7]*mag_unit[1]+ rotmat_x_reversed[8]*mag_unit[2];
 8002942:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002946:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800294a:	ed93 7a07 	vldr	s14, [r3, #28]
 800294e:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8002952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002956:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800295a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800295e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002962:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8002966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002972:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002976:	edc3 7a02 	vstr	s15, [r3, #8]

			mag_unit_stab[0] = rotmat_y[0]*rot_x_r_mag_unit[0]+ rotmat_y[2]*rot_x_r_mag_unit[2];
 800297a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800297e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002982:	ed93 7a00 	vldr	s14, [r3]
 8002986:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800298a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002996:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800299a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800299e:	edd3 6a02 	vldr	s13, [r3, #8]
 80029a2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80029a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b6:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
			mag_unit_stab[1] = rot_x_r_mag_unit[1];
 80029ba:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80029be:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			mag_unit_stab[2] = rotmat_y[6]*rot_x_r_mag_unit[0]+ rotmat_y[8]*rot_x_r_mag_unit[2];
 80029c8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80029cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80029d4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80029d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80029e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029ec:	edd3 6a08 	vldr	s13, [r3, #32]
 80029f0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80029f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80029fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a04:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
			//Cross product: east_horizon = cross([0 0 -1], mag_unit);
			/*	cross_P[0] = vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1];
				cross_P[1] = vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2];
				cross_P[2] = vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0];
			*/
			east_horizon[0] = mag_unit_stab[1];
 8002a08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002a0c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002a10:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002a14:	601a      	str	r2, [r3, #0]
			east_horizon[1] = -mag_unit_stab[0];
 8002a16:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002a1a:	eef1 7a67 	vneg.f32	s15, s15
 8002a1e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002a22:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002a26:	edc3 7a01 	vstr	s15, [r3, #4]

			//norm
			for(uint8_t iter = 0; iter<3; iter++){
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
 8002a30:	e074      	b.n	8002b1c <main+0xf74>
				east_horizon_norm[iter] = east_horizon[iter]/(sqrt(pow(east_horizon[0],2)+pow(east_horizon[1],2)+pow(east_horizon[2],2)));
 8002a32:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8002a36:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8002a3a:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fd2b 	bl	80004a0 <__aeabi_f2d>
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	460d      	mov	r5, r1
 8002a4e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002a52:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fd21 	bl	80004a0 <__aeabi_f2d>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	ed1f 1bcd 	vldr	d1, [pc, #-820]	@ 8002730 <main+0xb88>
 8002a66:	ec43 2b10 	vmov	d0, r2, r3
 8002a6a:	f000 fbfb 	bl	8003264 <pow>
 8002a6e:	ec59 8b10 	vmov	r8, r9, d0
 8002a72:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002a76:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd0f 	bl	80004a0 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	ed1f 1bd6 	vldr	d1, [pc, #-856]	@ 8002730 <main+0xb88>
 8002a8a:	ec43 2b10 	vmov	d0, r2, r3
 8002a8e:	f000 fbe9 	bl	8003264 <pow>
 8002a92:	ec53 2b10 	vmov	r2, r3, d0
 8002a96:	4640      	mov	r0, r8
 8002a98:	4649      	mov	r1, r9
 8002a9a:	f7fd fba3 	bl	80001e4 <__adddf3>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4690      	mov	r8, r2
 8002aa4:	4699      	mov	r9, r3
 8002aa6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002aaa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fcf5 	bl	80004a0 <__aeabi_f2d>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	ed1f 1be3 	vldr	d1, [pc, #-908]	@ 8002730 <main+0xb88>
 8002abe:	ec43 2b10 	vmov	d0, r2, r3
 8002ac2:	f000 fbcf 	bl	8003264 <pow>
 8002ac6:	ec53 2b10 	vmov	r2, r3, d0
 8002aca:	4640      	mov	r0, r8
 8002acc:	4649      	mov	r1, r9
 8002ace:	f7fd fb89 	bl	80001e4 <__adddf3>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	ec43 2b17 	vmov	d7, r2, r3
 8002ada:	eeb0 0a47 	vmov.f32	s0, s14
 8002ade:	eef0 0a67 	vmov.f32	s1, s15
 8002ae2:	f000 fc2f 	bl	8003344 <sqrt>
 8002ae6:	ec53 2b10 	vmov	r2, r3, d0
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f7fd fe59 	bl	80007a4 <__aeabi_ddiv>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	f897 418f 	ldrb.w	r4, [r7, #399]	@ 0x18f
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fd ffff 	bl	8000b00 <__aeabi_d2f>
 8002b02:	4601      	mov	r1, r0
 8002b04:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002b08:	f5a3 72be 	sub.w	r2, r3, #380	@ 0x17c
 8002b0c:	00a3      	lsls	r3, r4, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	6019      	str	r1, [r3, #0]
			for(uint8_t iter = 0; iter<3; iter++){
 8002b12:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8002b16:	3301      	adds	r3, #1
 8002b18:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
 8002b1c:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d986      	bls.n	8002a32 <main+0xe8a>
			}
			psi_mag_est_old = psi_mag_est;
 8002b24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002b28:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

			//heading angle calc
			//int8_t sign = (east_horizon_norm[0] > 0) - (east_horizon_norm[0] < 0);
			//psi_mag_est = -sign*acos(east_horizon_norm[1]);

			psi_mag_est = atan2(east_horizon_norm[1], east_horizon_norm[0]);
 8002b2c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002b30:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fcb2 	bl	80004a0 <__aeabi_f2d>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	460d      	mov	r5, r1
 8002b40:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002b44:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fca8 	bl	80004a0 <__aeabi_f2d>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	ec43 2b11 	vmov	d1, r2, r3
 8002b58:	ec45 4b10 	vmov	d0, r4, r5
 8002b5c:	f000 fb80 	bl	8003260 <atan2>
 8002b60:	ec53 2b10 	vmov	r2, r3, d0
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fd ffca 	bl	8000b00 <__aeabi_d2f>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

			if(first_run){
 8002b72:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <main+0xfda>
				psi_est = psi_mag_est;
 8002b7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002b7e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
			}

			// Complementary filter
			int8_t sign_psi_mag_est = (psi_mag_est > 0) - (psi_mag_est < 0);
 8002b82:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8e:	bfcc      	ite	gt
 8002b90:	2301      	movgt	r3, #1
 8002b92:	2300      	movle	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002b9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba4:	bf4c      	ite	mi
 8002ba6:	2301      	movmi	r3, #1
 8002ba8:	2300      	movpl	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
			int8_t sign_psi_mag_est_old = (psi_mag_est_old > 0) - (psi_mag_est_old < 0);
 8002bb4:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 8002bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	bfcc      	ite	gt
 8002bc2:	2301      	movgt	r3, #1
 8002bc4:	2300      	movle	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	edd7 7a5b 	vldr	s15, [r7, #364]	@ 0x16c
 8002bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd6:	bf4c      	ite	mi
 8002bd8:	2301      	movmi	r3, #1
 8002bda:	2300      	movpl	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

			if((psi_mag_est_old > PI/2) && ((sign_psi_mag_est_old == 1) && (sign_psi_mag_est ==-1))){ // transition from high to low
 8002be6:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002bea:	f7fd fc59 	bl	80004a0 <__aeabi_f2d>
 8002bee:	a389      	add	r3, pc, #548	@ (adr r3, 8002e14 <main+0x126c>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd ff3c 	bl	8000a70 <__aeabi_dcmpgt>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01a      	beq.n	8002c34 <main+0x108c>
 8002bfe:	f997 315a 	ldrsb.w	r3, [r7, #346]	@ 0x15a
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d116      	bne.n	8002c34 <main+0x108c>
 8002c06:	f997 315b 	ldrsb.w	r3, [r7, #347]	@ 0x15b
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d111      	bne.n	8002c34 <main+0x108c>
				psi_est = psi_est-2*PI;
 8002c10:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8002c14:	f7fd fc44 	bl	80004a0 <__aeabi_f2d>
 8002c18:	a380      	add	r3, pc, #512	@ (adr r3, 8002e1c <main+0x1274>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd fadf 	bl	80001e0 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd ff69 	bl	8000b00 <__aeabi_d2f>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
			}
			if((psi_mag_est_old < -PI/2) && ((sign_psi_mag_est_old == -1) && (sign_psi_mag_est == 1))){ // transition from low to high
 8002c34:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002c38:	f7fd fc32 	bl	80004a0 <__aeabi_f2d>
 8002c3c:	a379      	add	r3, pc, #484	@ (adr r3, 8002e24 <main+0x127c>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f7fd fef7 	bl	8000a34 <__aeabi_dcmplt>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01a      	beq.n	8002c82 <main+0x10da>
 8002c4c:	f997 315a 	ldrsb.w	r3, [r7, #346]	@ 0x15a
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d115      	bne.n	8002c82 <main+0x10da>
 8002c56:	f997 315b 	ldrsb.w	r3, [r7, #347]	@ 0x15b
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d111      	bne.n	8002c82 <main+0x10da>
				psi_est = psi_est+2*PI;
 8002c5e:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8002c62:	f7fd fc1d 	bl	80004a0 <__aeabi_f2d>
 8002c66:	a36d      	add	r3, pc, #436	@ (adr r3, 8002e1c <main+0x1274>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd faba 	bl	80001e4 <__adddf3>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7fd ff42 	bl	8000b00 <__aeabi_d2f>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
			}

			psi_est = psi_mag_est*cf_alpha + (1-cf_alpha)*(psi_est + T*psi_dot_est);
 8002c82:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8002c86:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c92:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002c96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c9a:	ed97 6a61 	vldr	s12, [r7, #388]	@ 0x184
 8002c9e:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 8002ca2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ca6:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8002caa:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	edc7 7a66 	vstr	s15, [r7, #408]	@ 0x198
		}


		// Data transmit
		if(send_angles_req){
 8002cba:	4b53      	ldr	r3, [pc, #332]	@ (8002e08 <main+0x1260>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d039      	beq.n	8002d38 <main+0x1190>
			uint8_t phi_bytes[4] = {0};
 8002cc4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002cc8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
			uint8_t theta_bytes[4] = {0};
 8002cd0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002cd4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
			uint8_t psi_bytes[4] = {0};
 8002cdc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8002ce0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

			FloatToIntBytes(phi_est,phi_bytes);
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	4618      	mov	r0, r3
 8002cee:	ed97 0a68 	vldr	s0, [r7, #416]	@ 0x1a0
 8002cf2:	f000 f8b5 	bl	8002e60 <FloatToIntBytes>
			FloatToIntBytes(theta_est,theta_bytes);
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	ed97 0a67 	vldr	s0, [r7, #412]	@ 0x19c
 8002cfe:	f000 f8af 	bl	8002e60 <FloatToIntBytes>
			FloatToIntBytes(psi_est,psi_bytes);
 8002d02:	463b      	mov	r3, r7
 8002d04:	4618      	mov	r0, r3
 8002d06:	ed97 0a66 	vldr	s0, [r7, #408]	@ 0x198
 8002d0a:	f000 f8a9 	bl	8002e60 <FloatToIntBytes>

			USART1_SendChar(0xA8);
 8002d0e:	20a8      	movs	r0, #168	@ 0xa8
 8002d10:	f7fe fc90 	bl	8001634 <USART1_SendChar>
			USART1_SendChar(0x01);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7fe fc8d 	bl	8001634 <USART1_SendChar>
			USART1_SendFloat(phi_est);
 8002d1a:	ed97 0a68 	vldr	s0, [r7, #416]	@ 0x1a0
 8002d1e:	f7fe fca9 	bl	8001674 <USART1_SendFloat>
			USART1_SendFloat(theta_est);
 8002d22:	ed97 0a67 	vldr	s0, [r7, #412]	@ 0x19c
 8002d26:	f7fe fca5 	bl	8001674 <USART1_SendFloat>
			USART1_SendFloat(psi_est);
 8002d2a:	ed97 0a66 	vldr	s0, [r7, #408]	@ 0x198
 8002d2e:	f7fe fca1 	bl	8001674 <USART1_SendFloat>
			send_angles_req = 0;
 8002d32:	4b35      	ldr	r3, [pc, #212]	@ (8002e08 <main+0x1260>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
		}


		run_complete = 1;
 8002d38:	4b34      	ldr	r3, [pc, #208]	@ (8002e0c <main+0x1264>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]
		first_run = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
		//GPIOA->ODR &= ~(1<<5);

		if(send_raw_data){
 8002d44:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <main+0x1268>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f43f a870 	beq.w	8001e30 <main+0x288>
			send_raw_data = 0;
 8002d50:	4b2f      	ldr	r3, [pc, #188]	@ (8002e10 <main+0x1268>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]


			//USART1_SendChar(0);


			USART1_SendChar(0xA8);
 8002d56:	20a8      	movs	r0, #168	@ 0xa8
 8002d58:	f7fe fc6c 	bl	8001634 <USART1_SendChar>
			USART1_SendChar(0x01);
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f7fe fc69 	bl	8001634 <USART1_SendChar>
			for(uint8_t i = 0; i<3;i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	f887 318e 	strb.w	r3, [r7, #398]	@ 0x18e
 8002d68:	e011      	b.n	8002d8e <main+0x11e6>
				USART1_SendFloat(accel_data[i]);
 8002d6a:	f897 318e 	ldrb.w	r3, [r7, #398]	@ 0x18e
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002d74:	443b      	add	r3, r7
 8002d76:	3b88      	subs	r3, #136	@ 0x88
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d80:	f7fe fc78 	bl	8001674 <USART1_SendFloat>
			for(uint8_t i = 0; i<3;i++)
 8002d84:	f897 318e 	ldrb.w	r3, [r7, #398]	@ 0x18e
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f887 318e 	strb.w	r3, [r7, #398]	@ 0x18e
 8002d8e:	f897 318e 	ldrb.w	r3, [r7, #398]	@ 0x18e
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d9e9      	bls.n	8002d6a <main+0x11c2>
			for(uint8_t i = 0; i<3;i++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 318d 	strb.w	r3, [r7, #397]	@ 0x18d
 8002d9c:	e011      	b.n	8002dc2 <main+0x121a>
				USART1_SendFloat(gyro_data[i]);
 8002d9e:	f897 318d 	ldrb.w	r3, [r7, #397]	@ 0x18d
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002da8:	443b      	add	r3, r7
 8002daa:	3b94      	subs	r3, #148	@ 0x94
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	eeb0 0a67 	vmov.f32	s0, s15
 8002db4:	f7fe fc5e 	bl	8001674 <USART1_SendFloat>
			for(uint8_t i = 0; i<3;i++)
 8002db8:	f897 318d 	ldrb.w	r3, [r7, #397]	@ 0x18d
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f887 318d 	strb.w	r3, [r7, #397]	@ 0x18d
 8002dc2:	f897 318d 	ldrb.w	r3, [r7, #397]	@ 0x18d
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d9e9      	bls.n	8002d9e <main+0x11f6>
			for(uint8_t i = 0; i<3;i++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 318c 	strb.w	r3, [r7, #396]	@ 0x18c
 8002dd0:	e011      	b.n	8002df6 <main+0x124e>
				USART1_SendFloat(mag_data_callibrated[i]);
 8002dd2:	f897 318c 	ldrb.w	r3, [r7, #396]	@ 0x18c
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8002ddc:	443b      	add	r3, r7
 8002dde:	3b70      	subs	r3, #112	@ 0x70
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	eeb0 0a67 	vmov.f32	s0, s15
 8002de8:	f7fe fc44 	bl	8001674 <USART1_SendFloat>
			for(uint8_t i = 0; i<3;i++)
 8002dec:	f897 318c 	ldrb.w	r3, [r7, #396]	@ 0x18c
 8002df0:	3301      	adds	r3, #1
 8002df2:	f887 318c 	strb.w	r3, [r7, #396]	@ 0x18c
 8002df6:	f897 318c 	ldrb.w	r3, [r7, #396]	@ 0x18c
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d9e9      	bls.n	8002dd2 <main+0x122a>

			run_complete = 1;
 8002dfe:	4b03      	ldr	r3, [pc, #12]	@ (8002e0c <main+0x1264>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
		if(external_gyro_calib){
 8002e04:	f7ff b814 	b.w	8001e30 <main+0x288>
 8002e08:	20000119 	.word	0x20000119
 8002e0c:	20000030 	.word	0x20000030
 8002e10:	200000e6 	.word	0x200000e6
 8002e14:	c083126f 	.word	0xc083126f
 8002e18:	3ff921ca 	.word	0x3ff921ca
 8002e1c:	c083126f 	.word	0xc083126f
 8002e20:	401921ca 	.word	0x401921ca
 8002e24:	c083126f 	.word	0xc083126f
 8002e28:	bff921ca 	.word	0xbff921ca

08002e2c <IntToFloat>:

void SendFloat(float data_in){

}

float IntToFloat(uint8_t *bit_array){
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	union { uint8_t b[4]; float f_out; } conv;
	conv.b[0] = bit_array[0];
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	733b      	strb	r3, [r7, #12]
	conv.b[1] = bit_array[1];
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	785b      	ldrb	r3, [r3, #1]
 8002e3e:	737b      	strb	r3, [r7, #13]
	conv.b[2] = bit_array[2];
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	789b      	ldrb	r3, [r3, #2]
 8002e44:	73bb      	strb	r3, [r7, #14]
	conv.b[3] = bit_array[3];
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	78db      	ldrb	r3, [r3, #3]
 8002e4a:	73fb      	strb	r3, [r7, #15]
	return conv.f_out;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	ee07 3a90 	vmov	s15, r3

}
 8002e52:	eeb0 0a67 	vmov.f32	s0, s15
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <FloatToIntBytes>:

static inline void FloatToIntBytes(float f_in, uint8_t *bit_array) {
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e6a:	6038      	str	r0, [r7, #0]
    union {
        float    f;
        uint8_t  b[4];
    } conv;

    conv.f = f_in;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60fb      	str	r3, [r7, #12]
    bit_array[0] = conv.b[0];
 8002e70:	7b3a      	ldrb	r2, [r7, #12]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	701a      	strb	r2, [r3, #0]
    bit_array[1] = conv.b[1];
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	7b7a      	ldrb	r2, [r7, #13]
 8002e7c:	701a      	strb	r2, [r3, #0]
    bit_array[2] = conv.b[2];
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	3302      	adds	r3, #2
 8002e82:	7bba      	ldrb	r2, [r7, #14]
 8002e84:	701a      	strb	r2, [r3, #0]
    bit_array[3] = conv.b[3];
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	3303      	adds	r3, #3
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	701a      	strb	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <GPIOConfig>:

void GPIOConfig(void){
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0);
 8002ea0:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <GPIOConfig+0x48>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee4 <GPIOConfig+0x48>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1<<10);
 8002eac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <GPIOConfig+0x4c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <GPIOConfig+0x4c>)
 8002eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eb6:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= (0<<5);
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <GPIOConfig+0x4c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <GPIOConfig+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= (1<<11);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <GPIOConfig+0x4c>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <GPIOConfig+0x4c>)
 8002ec8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ecc:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~((1<<10) | (1<<11));
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <GPIOConfig+0x4c>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4a05      	ldr	r2, [pc, #20]	@ (8002ee8 <GPIOConfig+0x4c>)
 8002ed4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002ed8:	60d3      	str	r3, [r2, #12]

}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020000 	.word	0x40020000

08002eec <__NVIC_GetPriorityGrouping>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef0:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0307 	and.w	r3, r3, #7
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_EnableIRQ>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db0b      	blt.n	8002f32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4907      	ldr	r1, [pc, #28]	@ (8002f40 <__NVIC_EnableIRQ+0x38>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2001      	movs	r0, #1
 8002f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100

08002f44 <__NVIC_SetPriority>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	@ (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	@ (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	@ 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	4313      	orrs	r3, r2
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	@ 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <period_timer_config>:

#include "period_timer.h"



void period_timer_config(uint16_t psc, uint16_t arr){
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	460a      	mov	r2, r1
 800300a:	80fb      	strh	r3, [r7, #6]
 800300c:	4613      	mov	r3, r2
 800300e:	80bb      	strh	r3, [r7, #4]

	//Enable clock of TIM4
	RCC->APB1ENR |= 1<<2;
 8003010:	4b28      	ldr	r3, [pc, #160]	@ (80030b4 <period_timer_config+0xb4>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	4a27      	ldr	r2, [pc, #156]	@ (80030b4 <period_timer_config+0xb4>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM4->PSC = psc;
 800301c:	4a26      	ldr	r2, [pc, #152]	@ (80030b8 <period_timer_config+0xb8>)
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM4->ARR = arr-1;
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	1e5a      	subs	r2, r3, #1
 8003026:	4b24      	ldr	r3, [pc, #144]	@ (80030b8 <period_timer_config+0xb8>)
 8003028:	62da      	str	r2, [r3, #44]	@ 0x2c
	//! 5. Enable auto reload buffering
	TIM4->CR1 |= TIM_CR1_ARPE;
 800302a:	4b23      	ldr	r3, [pc, #140]	@ (80030b8 <period_timer_config+0xb8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a22      	ldr	r2, [pc, #136]	@ (80030b8 <period_timer_config+0xb8>)
 8003030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003034:	6013      	str	r3, [r2, #0]

	//! 6. Only counter overflow generate an interrupt
	TIM4->CR1 |= TIM_CR1_URS;
 8003036:	4b20      	ldr	r3, [pc, #128]	@ (80030b8 <period_timer_config+0xb8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1f      	ldr	r2, [pc, #124]	@ (80030b8 <period_timer_config+0xb8>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6013      	str	r3, [r2, #0]

	//! 7. Transfer the content of the preload registers to buffers
	TIM4->EGR |= TIM_EGR_UG;
 8003042:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <period_timer_config+0xb8>)
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <period_timer_config+0xb8>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6153      	str	r3, [r2, #20]

	//! 8. Enable the update interrupt
	TIM4->DIER |= TIM_DIER_UIE;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <period_timer_config+0xb8>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	4a19      	ldr	r2, [pc, #100]	@ (80030b8 <period_timer_config+0xb8>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	60d3      	str	r3, [r2, #12]
	TIM4->SR &= ~TIM_SR_UIF;    // Clear the interrupt
 800305a:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <period_timer_config+0xb8>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	4a16      	ldr	r2, [pc, #88]	@ (80030b8 <period_timer_config+0xb8>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6113      	str	r3, [r2, #16]

	//! 9. Configure the NVIC to run a callback function when interrupt occur
		/* Set interrupt priority */
	IRQn_Type IRQn = TIM4_IRQn;
 8003066:	231e      	movs	r3, #30
 8003068:	75fb      	strb	r3, [r7, #23]
	uint32_t prioritygroup = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
	uint32_t PreemptPriority = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
	uint32_t SubPriority = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
	prioritygroup = NVIC_GetPriorityGrouping();
 8003076:	f7ff ff39 	bl	8002eec <__NVIC_GetPriorityGrouping>
 800307a:	6138      	str	r0, [r7, #16]
	NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	6938      	ldr	r0, [r7, #16]
 8003082:	f7ff ff89 	bl	8002f98 <NVIC_EncodePriority>
 8003086:	4602      	mov	r2, r0
 8003088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ff58 	bl	8002f44 <__NVIC_SetPriority>

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8003094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff35 	bl	8002f08 <__NVIC_EnableIRQ>

	//! Optional: Stops the timer when debug is halted
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM4_STOP;
 800309e:	4b07      	ldr	r3, [pc, #28]	@ (80030bc <period_timer_config+0xbc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	4a06      	ldr	r2, [pc, #24]	@ (80030bc <period_timer_config+0xbc>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6093      	str	r3, [r2, #8]
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40000800 	.word	0x40000800
 80030bc:	e0042000 	.word	0xe0042000

080030c0 <period_timer_enable>:

void period_timer_enable(uint8_t state){
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]

	if (state == 0)
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <period_timer_enable+0x1e>
		TIM4->CR1 &= ~TIM_CR1_CEN;
 80030d0:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <period_timer_enable+0x38>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a08      	ldr	r2, [pc, #32]	@ (80030f8 <period_timer_enable+0x38>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6013      	str	r3, [r2, #0]
	else
		TIM4->CR1 |= TIM_CR1_CEN;
}
 80030dc:	e005      	b.n	80030ea <period_timer_enable+0x2a>
		TIM4->CR1 |= TIM_CR1_CEN;
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <period_timer_enable+0x38>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a05      	ldr	r2, [pc, #20]	@ (80030f8 <period_timer_enable+0x38>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6013      	str	r3, [r2, #0]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40000800 	.word	0x40000800

080030fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <NMI_Handler+0x4>

08003104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <MemManage_Handler+0x4>

08003114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <BusFault_Handler+0x4>

0800311c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <UsageFault_Handler+0x4>

08003124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003152:	f000 f83f 	bl	80031d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <SystemInit+0x20>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003166:	4a05      	ldr	r2, [pc, #20]	@ (800317c <SystemInit+0x20>)
 8003168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800316c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003184:	f7ff ffea 	bl	800315c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003188:	480c      	ldr	r0, [pc, #48]	@ (80031bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800318a:	490d      	ldr	r1, [pc, #52]	@ (80031c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800318c:	4a0d      	ldr	r2, [pc, #52]	@ (80031c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003190:	e002      	b.n	8003198 <LoopCopyDataInit>

08003192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003196:	3304      	adds	r3, #4

08003198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800319c:	d3f9      	bcc.n	8003192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319e:	4a0a      	ldr	r2, [pc, #40]	@ (80031c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031a0:	4c0a      	ldr	r4, [pc, #40]	@ (80031cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a4:	e001      	b.n	80031aa <LoopFillZerobss>

080031a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a8:	3204      	adds	r2, #4

080031aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031ac:	d3fb      	bcc.n	80031a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ae:	f000 f833 	bl	8003218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b2:	f7fe fcf9 	bl	8001ba8 <main>
  bx  lr    
 80031b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80031bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80031c4:	08005d40 	.word	0x08005d40
  ldr r2, =_sbss
 80031c8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80031cc:	2000025c 	.word	0x2000025c

080031d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d0:	e7fe      	b.n	80031d0 <ADC_IRQHandler>
	...

080031d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_IncTick+0x20>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_IncTick+0x24>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	4a04      	ldr	r2, [pc, #16]	@ (80031f8 <HAL_IncTick+0x24>)
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000032 	.word	0x20000032
 80031f8:	20000120 	.word	0x20000120

080031fc <memset>:
 80031fc:	4402      	add	r2, r0
 80031fe:	4603      	mov	r3, r0
 8003200:	4293      	cmp	r3, r2
 8003202:	d100      	bne.n	8003206 <memset+0xa>
 8003204:	4770      	bx	lr
 8003206:	f803 1b01 	strb.w	r1, [r3], #1
 800320a:	e7f9      	b.n	8003200 <memset+0x4>

0800320c <__errno>:
 800320c:	4b01      	ldr	r3, [pc, #4]	@ (8003214 <__errno+0x8>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000034 	.word	0x20000034

08003218 <__libc_init_array>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4d0d      	ldr	r5, [pc, #52]	@ (8003250 <__libc_init_array+0x38>)
 800321c:	4c0d      	ldr	r4, [pc, #52]	@ (8003254 <__libc_init_array+0x3c>)
 800321e:	1b64      	subs	r4, r4, r5
 8003220:	10a4      	asrs	r4, r4, #2
 8003222:	2600      	movs	r6, #0
 8003224:	42a6      	cmp	r6, r4
 8003226:	d109      	bne.n	800323c <__libc_init_array+0x24>
 8003228:	4d0b      	ldr	r5, [pc, #44]	@ (8003258 <__libc_init_array+0x40>)
 800322a:	4c0c      	ldr	r4, [pc, #48]	@ (800325c <__libc_init_array+0x44>)
 800322c:	f002 fc3c 	bl	8005aa8 <_init>
 8003230:	1b64      	subs	r4, r4, r5
 8003232:	10a4      	asrs	r4, r4, #2
 8003234:	2600      	movs	r6, #0
 8003236:	42a6      	cmp	r6, r4
 8003238:	d105      	bne.n	8003246 <__libc_init_array+0x2e>
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003240:	4798      	blx	r3
 8003242:	3601      	adds	r6, #1
 8003244:	e7ee      	b.n	8003224 <__libc_init_array+0xc>
 8003246:	f855 3b04 	ldr.w	r3, [r5], #4
 800324a:	4798      	blx	r3
 800324c:	3601      	adds	r6, #1
 800324e:	e7f2      	b.n	8003236 <__libc_init_array+0x1e>
 8003250:	08005d38 	.word	0x08005d38
 8003254:	08005d38 	.word	0x08005d38
 8003258:	08005d38 	.word	0x08005d38
 800325c:	08005d3c 	.word	0x08005d3c

08003260 <atan2>:
 8003260:	f000 bdea 	b.w	8003e38 <__ieee754_atan2>

08003264 <pow>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	ed2d 8b02 	vpush	{d8}
 800326a:	eeb0 8a40 	vmov.f32	s16, s0
 800326e:	eef0 8a60 	vmov.f32	s17, s1
 8003272:	ec55 4b11 	vmov	r4, r5, d1
 8003276:	f000 fea7 	bl	8003fc8 <__ieee754_pow>
 800327a:	4622      	mov	r2, r4
 800327c:	462b      	mov	r3, r5
 800327e:	4620      	mov	r0, r4
 8003280:	4629      	mov	r1, r5
 8003282:	ec57 6b10 	vmov	r6, r7, d0
 8003286:	f7fd fbfd 	bl	8000a84 <__aeabi_dcmpun>
 800328a:	2800      	cmp	r0, #0
 800328c:	d13b      	bne.n	8003306 <pow+0xa2>
 800328e:	ec51 0b18 	vmov	r0, r1, d8
 8003292:	2200      	movs	r2, #0
 8003294:	2300      	movs	r3, #0
 8003296:	f7fd fbc3 	bl	8000a20 <__aeabi_dcmpeq>
 800329a:	b1b8      	cbz	r0, 80032cc <pow+0x68>
 800329c:	2200      	movs	r2, #0
 800329e:	2300      	movs	r3, #0
 80032a0:	4620      	mov	r0, r4
 80032a2:	4629      	mov	r1, r5
 80032a4:	f7fd fbbc 	bl	8000a20 <__aeabi_dcmpeq>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d146      	bne.n	800333a <pow+0xd6>
 80032ac:	ec45 4b10 	vmov	d0, r4, r5
 80032b0:	f000 f952 	bl	8003558 <finite>
 80032b4:	b338      	cbz	r0, 8003306 <pow+0xa2>
 80032b6:	2200      	movs	r2, #0
 80032b8:	2300      	movs	r3, #0
 80032ba:	4620      	mov	r0, r4
 80032bc:	4629      	mov	r1, r5
 80032be:	f7fd fbb9 	bl	8000a34 <__aeabi_dcmplt>
 80032c2:	b300      	cbz	r0, 8003306 <pow+0xa2>
 80032c4:	f7ff ffa2 	bl	800320c <__errno>
 80032c8:	2322      	movs	r3, #34	@ 0x22
 80032ca:	e01b      	b.n	8003304 <pow+0xa0>
 80032cc:	ec47 6b10 	vmov	d0, r6, r7
 80032d0:	f000 f942 	bl	8003558 <finite>
 80032d4:	b9e0      	cbnz	r0, 8003310 <pow+0xac>
 80032d6:	eeb0 0a48 	vmov.f32	s0, s16
 80032da:	eef0 0a68 	vmov.f32	s1, s17
 80032de:	f000 f93b 	bl	8003558 <finite>
 80032e2:	b1a8      	cbz	r0, 8003310 <pow+0xac>
 80032e4:	ec45 4b10 	vmov	d0, r4, r5
 80032e8:	f000 f936 	bl	8003558 <finite>
 80032ec:	b180      	cbz	r0, 8003310 <pow+0xac>
 80032ee:	4632      	mov	r2, r6
 80032f0:	463b      	mov	r3, r7
 80032f2:	4630      	mov	r0, r6
 80032f4:	4639      	mov	r1, r7
 80032f6:	f7fd fbc5 	bl	8000a84 <__aeabi_dcmpun>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d0e2      	beq.n	80032c4 <pow+0x60>
 80032fe:	f7ff ff85 	bl	800320c <__errno>
 8003302:	2321      	movs	r3, #33	@ 0x21
 8003304:	6003      	str	r3, [r0, #0]
 8003306:	ecbd 8b02 	vpop	{d8}
 800330a:	ec47 6b10 	vmov	d0, r6, r7
 800330e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003310:	2200      	movs	r2, #0
 8003312:	2300      	movs	r3, #0
 8003314:	4630      	mov	r0, r6
 8003316:	4639      	mov	r1, r7
 8003318:	f7fd fb82 	bl	8000a20 <__aeabi_dcmpeq>
 800331c:	2800      	cmp	r0, #0
 800331e:	d0f2      	beq.n	8003306 <pow+0xa2>
 8003320:	eeb0 0a48 	vmov.f32	s0, s16
 8003324:	eef0 0a68 	vmov.f32	s1, s17
 8003328:	f000 f916 	bl	8003558 <finite>
 800332c:	2800      	cmp	r0, #0
 800332e:	d0ea      	beq.n	8003306 <pow+0xa2>
 8003330:	ec45 4b10 	vmov	d0, r4, r5
 8003334:	f000 f910 	bl	8003558 <finite>
 8003338:	e7c3      	b.n	80032c2 <pow+0x5e>
 800333a:	4f01      	ldr	r7, [pc, #4]	@ (8003340 <pow+0xdc>)
 800333c:	2600      	movs	r6, #0
 800333e:	e7e2      	b.n	8003306 <pow+0xa2>
 8003340:	3ff00000 	.word	0x3ff00000

08003344 <sqrt>:
 8003344:	b538      	push	{r3, r4, r5, lr}
 8003346:	ed2d 8b02 	vpush	{d8}
 800334a:	ec55 4b10 	vmov	r4, r5, d0
 800334e:	f000 f90f 	bl	8003570 <__ieee754_sqrt>
 8003352:	4622      	mov	r2, r4
 8003354:	462b      	mov	r3, r5
 8003356:	4620      	mov	r0, r4
 8003358:	4629      	mov	r1, r5
 800335a:	eeb0 8a40 	vmov.f32	s16, s0
 800335e:	eef0 8a60 	vmov.f32	s17, s1
 8003362:	f7fd fb8f 	bl	8000a84 <__aeabi_dcmpun>
 8003366:	b990      	cbnz	r0, 800338e <sqrt+0x4a>
 8003368:	2200      	movs	r2, #0
 800336a:	2300      	movs	r3, #0
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fd fb60 	bl	8000a34 <__aeabi_dcmplt>
 8003374:	b158      	cbz	r0, 800338e <sqrt+0x4a>
 8003376:	f7ff ff49 	bl	800320c <__errno>
 800337a:	2321      	movs	r3, #33	@ 0x21
 800337c:	6003      	str	r3, [r0, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	2300      	movs	r3, #0
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f7fd fa0d 	bl	80007a4 <__aeabi_ddiv>
 800338a:	ec41 0b18 	vmov	d8, r0, r1
 800338e:	eeb0 0a48 	vmov.f32	s0, s16
 8003392:	eef0 0a68 	vmov.f32	s1, s17
 8003396:	ecbd 8b02 	vpop	{d8}
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	0000      	movs	r0, r0
	...

080033a0 <cos>:
 80033a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033a2:	ec53 2b10 	vmov	r2, r3, d0
 80033a6:	4826      	ldr	r0, [pc, #152]	@ (8003440 <cos+0xa0>)
 80033a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80033ac:	4281      	cmp	r1, r0
 80033ae:	d806      	bhi.n	80033be <cos+0x1e>
 80033b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003438 <cos+0x98>
 80033b4:	b005      	add	sp, #20
 80033b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80033ba:	f000 b9b5 	b.w	8003728 <__kernel_cos>
 80033be:	4821      	ldr	r0, [pc, #132]	@ (8003444 <cos+0xa4>)
 80033c0:	4281      	cmp	r1, r0
 80033c2:	d908      	bls.n	80033d6 <cos+0x36>
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	f7fc ff0a 	bl	80001e0 <__aeabi_dsub>
 80033cc:	ec41 0b10 	vmov	d0, r0, r1
 80033d0:	b005      	add	sp, #20
 80033d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033d6:	4668      	mov	r0, sp
 80033d8:	f001 fb3a 	bl	8004a50 <__ieee754_rem_pio2>
 80033dc:	f000 0003 	and.w	r0, r0, #3
 80033e0:	2801      	cmp	r0, #1
 80033e2:	d00b      	beq.n	80033fc <cos+0x5c>
 80033e4:	2802      	cmp	r0, #2
 80033e6:	d015      	beq.n	8003414 <cos+0x74>
 80033e8:	b9d8      	cbnz	r0, 8003422 <cos+0x82>
 80033ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80033ee:	ed9d 0b00 	vldr	d0, [sp]
 80033f2:	f000 f999 	bl	8003728 <__kernel_cos>
 80033f6:	ec51 0b10 	vmov	r0, r1, d0
 80033fa:	e7e7      	b.n	80033cc <cos+0x2c>
 80033fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003400:	ed9d 0b00 	vldr	d0, [sp]
 8003404:	f000 fa58 	bl	80038b8 <__kernel_sin>
 8003408:	ec53 2b10 	vmov	r2, r3, d0
 800340c:	4610      	mov	r0, r2
 800340e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003412:	e7db      	b.n	80033cc <cos+0x2c>
 8003414:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003418:	ed9d 0b00 	vldr	d0, [sp]
 800341c:	f000 f984 	bl	8003728 <__kernel_cos>
 8003420:	e7f2      	b.n	8003408 <cos+0x68>
 8003422:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003426:	ed9d 0b00 	vldr	d0, [sp]
 800342a:	2001      	movs	r0, #1
 800342c:	f000 fa44 	bl	80038b8 <__kernel_sin>
 8003430:	e7e1      	b.n	80033f6 <cos+0x56>
 8003432:	bf00      	nop
 8003434:	f3af 8000 	nop.w
	...
 8003440:	3fe921fb 	.word	0x3fe921fb
 8003444:	7fefffff 	.word	0x7fefffff

08003448 <sin>:
 8003448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800344a:	ec53 2b10 	vmov	r2, r3, d0
 800344e:	4826      	ldr	r0, [pc, #152]	@ (80034e8 <sin+0xa0>)
 8003450:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003454:	4281      	cmp	r1, r0
 8003456:	d807      	bhi.n	8003468 <sin+0x20>
 8003458:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80034e0 <sin+0x98>
 800345c:	2000      	movs	r0, #0
 800345e:	b005      	add	sp, #20
 8003460:	f85d eb04 	ldr.w	lr, [sp], #4
 8003464:	f000 ba28 	b.w	80038b8 <__kernel_sin>
 8003468:	4820      	ldr	r0, [pc, #128]	@ (80034ec <sin+0xa4>)
 800346a:	4281      	cmp	r1, r0
 800346c:	d908      	bls.n	8003480 <sin+0x38>
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	f7fc feb5 	bl	80001e0 <__aeabi_dsub>
 8003476:	ec41 0b10 	vmov	d0, r0, r1
 800347a:	b005      	add	sp, #20
 800347c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003480:	4668      	mov	r0, sp
 8003482:	f001 fae5 	bl	8004a50 <__ieee754_rem_pio2>
 8003486:	f000 0003 	and.w	r0, r0, #3
 800348a:	2801      	cmp	r0, #1
 800348c:	d00c      	beq.n	80034a8 <sin+0x60>
 800348e:	2802      	cmp	r0, #2
 8003490:	d011      	beq.n	80034b6 <sin+0x6e>
 8003492:	b9e8      	cbnz	r0, 80034d0 <sin+0x88>
 8003494:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003498:	ed9d 0b00 	vldr	d0, [sp]
 800349c:	2001      	movs	r0, #1
 800349e:	f000 fa0b 	bl	80038b8 <__kernel_sin>
 80034a2:	ec51 0b10 	vmov	r0, r1, d0
 80034a6:	e7e6      	b.n	8003476 <sin+0x2e>
 80034a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034ac:	ed9d 0b00 	vldr	d0, [sp]
 80034b0:	f000 f93a 	bl	8003728 <__kernel_cos>
 80034b4:	e7f5      	b.n	80034a2 <sin+0x5a>
 80034b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034ba:	ed9d 0b00 	vldr	d0, [sp]
 80034be:	2001      	movs	r0, #1
 80034c0:	f000 f9fa 	bl	80038b8 <__kernel_sin>
 80034c4:	ec53 2b10 	vmov	r2, r3, d0
 80034c8:	4610      	mov	r0, r2
 80034ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80034ce:	e7d2      	b.n	8003476 <sin+0x2e>
 80034d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034d4:	ed9d 0b00 	vldr	d0, [sp]
 80034d8:	f000 f926 	bl	8003728 <__kernel_cos>
 80034dc:	e7f2      	b.n	80034c4 <sin+0x7c>
 80034de:	bf00      	nop
	...
 80034e8:	3fe921fb 	.word	0x3fe921fb
 80034ec:	7fefffff 	.word	0x7fefffff

080034f0 <tan>:
 80034f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034f2:	ec53 2b10 	vmov	r2, r3, d0
 80034f6:	4816      	ldr	r0, [pc, #88]	@ (8003550 <tan+0x60>)
 80034f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80034fc:	4281      	cmp	r1, r0
 80034fe:	d807      	bhi.n	8003510 <tan+0x20>
 8003500:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8003548 <tan+0x58>
 8003504:	2001      	movs	r0, #1
 8003506:	b005      	add	sp, #20
 8003508:	f85d eb04 	ldr.w	lr, [sp], #4
 800350c:	f000 ba90 	b.w	8003a30 <__kernel_tan>
 8003510:	4810      	ldr	r0, [pc, #64]	@ (8003554 <tan+0x64>)
 8003512:	4281      	cmp	r1, r0
 8003514:	d908      	bls.n	8003528 <tan+0x38>
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f7fc fe61 	bl	80001e0 <__aeabi_dsub>
 800351e:	ec41 0b10 	vmov	d0, r0, r1
 8003522:	b005      	add	sp, #20
 8003524:	f85d fb04 	ldr.w	pc, [sp], #4
 8003528:	4668      	mov	r0, sp
 800352a:	f001 fa91 	bl	8004a50 <__ieee754_rem_pio2>
 800352e:	0040      	lsls	r0, r0, #1
 8003530:	f000 0002 	and.w	r0, r0, #2
 8003534:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003538:	ed9d 0b00 	vldr	d0, [sp]
 800353c:	f1c0 0001 	rsb	r0, r0, #1
 8003540:	f000 fa76 	bl	8003a30 <__kernel_tan>
 8003544:	e7ed      	b.n	8003522 <tan+0x32>
 8003546:	bf00      	nop
	...
 8003550:	3fe921fb 	.word	0x3fe921fb
 8003554:	7fefffff 	.word	0x7fefffff

08003558 <finite>:
 8003558:	b082      	sub	sp, #8
 800355a:	ed8d 0b00 	vstr	d0, [sp]
 800355e:	9801      	ldr	r0, [sp, #4]
 8003560:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003564:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003568:	0fc0      	lsrs	r0, r0, #31
 800356a:	b002      	add	sp, #8
 800356c:	4770      	bx	lr
	...

08003570 <__ieee754_sqrt>:
 8003570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003574:	4a68      	ldr	r2, [pc, #416]	@ (8003718 <__ieee754_sqrt+0x1a8>)
 8003576:	ec55 4b10 	vmov	r4, r5, d0
 800357a:	43aa      	bics	r2, r5
 800357c:	462b      	mov	r3, r5
 800357e:	4621      	mov	r1, r4
 8003580:	d110      	bne.n	80035a4 <__ieee754_sqrt+0x34>
 8003582:	4622      	mov	r2, r4
 8003584:	4620      	mov	r0, r4
 8003586:	4629      	mov	r1, r5
 8003588:	f7fc ffe2 	bl	8000550 <__aeabi_dmul>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4620      	mov	r0, r4
 8003592:	4629      	mov	r1, r5
 8003594:	f7fc fe26 	bl	80001e4 <__adddf3>
 8003598:	4604      	mov	r4, r0
 800359a:	460d      	mov	r5, r1
 800359c:	ec45 4b10 	vmov	d0, r4, r5
 80035a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a4:	2d00      	cmp	r5, #0
 80035a6:	dc0e      	bgt.n	80035c6 <__ieee754_sqrt+0x56>
 80035a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80035ac:	4322      	orrs	r2, r4
 80035ae:	d0f5      	beq.n	800359c <__ieee754_sqrt+0x2c>
 80035b0:	b19d      	cbz	r5, 80035da <__ieee754_sqrt+0x6a>
 80035b2:	4622      	mov	r2, r4
 80035b4:	4620      	mov	r0, r4
 80035b6:	4629      	mov	r1, r5
 80035b8:	f7fc fe12 	bl	80001e0 <__aeabi_dsub>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	f7fd f8f0 	bl	80007a4 <__aeabi_ddiv>
 80035c4:	e7e8      	b.n	8003598 <__ieee754_sqrt+0x28>
 80035c6:	152a      	asrs	r2, r5, #20
 80035c8:	d115      	bne.n	80035f6 <__ieee754_sqrt+0x86>
 80035ca:	2000      	movs	r0, #0
 80035cc:	e009      	b.n	80035e2 <__ieee754_sqrt+0x72>
 80035ce:	0acb      	lsrs	r3, r1, #11
 80035d0:	3a15      	subs	r2, #21
 80035d2:	0549      	lsls	r1, r1, #21
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0fa      	beq.n	80035ce <__ieee754_sqrt+0x5e>
 80035d8:	e7f7      	b.n	80035ca <__ieee754_sqrt+0x5a>
 80035da:	462a      	mov	r2, r5
 80035dc:	e7fa      	b.n	80035d4 <__ieee754_sqrt+0x64>
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	3001      	adds	r0, #1
 80035e2:	02dc      	lsls	r4, r3, #11
 80035e4:	d5fb      	bpl.n	80035de <__ieee754_sqrt+0x6e>
 80035e6:	1e44      	subs	r4, r0, #1
 80035e8:	1b12      	subs	r2, r2, r4
 80035ea:	f1c0 0420 	rsb	r4, r0, #32
 80035ee:	fa21 f404 	lsr.w	r4, r1, r4
 80035f2:	4323      	orrs	r3, r4
 80035f4:	4081      	lsls	r1, r0
 80035f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035fa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80035fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003602:	07d2      	lsls	r2, r2, #31
 8003604:	bf5c      	itt	pl
 8003606:	005b      	lslpl	r3, r3, #1
 8003608:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800360c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003610:	bf58      	it	pl
 8003612:	0049      	lslpl	r1, r1, #1
 8003614:	2600      	movs	r6, #0
 8003616:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800361a:	106d      	asrs	r5, r5, #1
 800361c:	0049      	lsls	r1, r1, #1
 800361e:	2016      	movs	r0, #22
 8003620:	4632      	mov	r2, r6
 8003622:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8003626:	1917      	adds	r7, r2, r4
 8003628:	429f      	cmp	r7, r3
 800362a:	bfde      	ittt	le
 800362c:	193a      	addle	r2, r7, r4
 800362e:	1bdb      	suble	r3, r3, r7
 8003630:	1936      	addle	r6, r6, r4
 8003632:	0fcf      	lsrs	r7, r1, #31
 8003634:	3801      	subs	r0, #1
 8003636:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800363a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800363e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003642:	d1f0      	bne.n	8003626 <__ieee754_sqrt+0xb6>
 8003644:	4604      	mov	r4, r0
 8003646:	2720      	movs	r7, #32
 8003648:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800364c:	429a      	cmp	r2, r3
 800364e:	eb00 0e0c 	add.w	lr, r0, ip
 8003652:	db02      	blt.n	800365a <__ieee754_sqrt+0xea>
 8003654:	d113      	bne.n	800367e <__ieee754_sqrt+0x10e>
 8003656:	458e      	cmp	lr, r1
 8003658:	d811      	bhi.n	800367e <__ieee754_sqrt+0x10e>
 800365a:	f1be 0f00 	cmp.w	lr, #0
 800365e:	eb0e 000c 	add.w	r0, lr, ip
 8003662:	da42      	bge.n	80036ea <__ieee754_sqrt+0x17a>
 8003664:	2800      	cmp	r0, #0
 8003666:	db40      	blt.n	80036ea <__ieee754_sqrt+0x17a>
 8003668:	f102 0801 	add.w	r8, r2, #1
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	458e      	cmp	lr, r1
 8003670:	bf88      	it	hi
 8003672:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003676:	eba1 010e 	sub.w	r1, r1, lr
 800367a:	4464      	add	r4, ip
 800367c:	4642      	mov	r2, r8
 800367e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8003682:	3f01      	subs	r7, #1
 8003684:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8003688:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800368c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003690:	d1dc      	bne.n	800364c <__ieee754_sqrt+0xdc>
 8003692:	4319      	orrs	r1, r3
 8003694:	d01b      	beq.n	80036ce <__ieee754_sqrt+0x15e>
 8003696:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800371c <__ieee754_sqrt+0x1ac>
 800369a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8003720 <__ieee754_sqrt+0x1b0>
 800369e:	e9da 0100 	ldrd	r0, r1, [sl]
 80036a2:	e9db 2300 	ldrd	r2, r3, [fp]
 80036a6:	f7fc fd9b 	bl	80001e0 <__aeabi_dsub>
 80036aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4640      	mov	r0, r8
 80036b4:	4649      	mov	r1, r9
 80036b6:	f7fd f9c7 	bl	8000a48 <__aeabi_dcmple>
 80036ba:	b140      	cbz	r0, 80036ce <__ieee754_sqrt+0x15e>
 80036bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80036c0:	e9da 0100 	ldrd	r0, r1, [sl]
 80036c4:	e9db 2300 	ldrd	r2, r3, [fp]
 80036c8:	d111      	bne.n	80036ee <__ieee754_sqrt+0x17e>
 80036ca:	3601      	adds	r6, #1
 80036cc:	463c      	mov	r4, r7
 80036ce:	1072      	asrs	r2, r6, #1
 80036d0:	0863      	lsrs	r3, r4, #1
 80036d2:	07f1      	lsls	r1, r6, #31
 80036d4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80036d8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80036dc:	bf48      	it	mi
 80036de:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80036e2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80036e6:	4618      	mov	r0, r3
 80036e8:	e756      	b.n	8003598 <__ieee754_sqrt+0x28>
 80036ea:	4690      	mov	r8, r2
 80036ec:	e7be      	b.n	800366c <__ieee754_sqrt+0xfc>
 80036ee:	f7fc fd79 	bl	80001e4 <__adddf3>
 80036f2:	e9da 8900 	ldrd	r8, r9, [sl]
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4640      	mov	r0, r8
 80036fc:	4649      	mov	r1, r9
 80036fe:	f7fd f999 	bl	8000a34 <__aeabi_dcmplt>
 8003702:	b120      	cbz	r0, 800370e <__ieee754_sqrt+0x19e>
 8003704:	1ca0      	adds	r0, r4, #2
 8003706:	bf08      	it	eq
 8003708:	3601      	addeq	r6, #1
 800370a:	3402      	adds	r4, #2
 800370c:	e7df      	b.n	80036ce <__ieee754_sqrt+0x15e>
 800370e:	1c63      	adds	r3, r4, #1
 8003710:	f023 0401 	bic.w	r4, r3, #1
 8003714:	e7db      	b.n	80036ce <__ieee754_sqrt+0x15e>
 8003716:	bf00      	nop
 8003718:	7ff00000 	.word	0x7ff00000
 800371c:	20000090 	.word	0x20000090
 8003720:	20000088 	.word	0x20000088
 8003724:	00000000 	.word	0x00000000

08003728 <__kernel_cos>:
 8003728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372c:	ec57 6b10 	vmov	r6, r7, d0
 8003730:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003734:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003738:	ed8d 1b00 	vstr	d1, [sp]
 800373c:	d206      	bcs.n	800374c <__kernel_cos+0x24>
 800373e:	4630      	mov	r0, r6
 8003740:	4639      	mov	r1, r7
 8003742:	f7fd f9b5 	bl	8000ab0 <__aeabi_d2iz>
 8003746:	2800      	cmp	r0, #0
 8003748:	f000 8088 	beq.w	800385c <__kernel_cos+0x134>
 800374c:	4632      	mov	r2, r6
 800374e:	463b      	mov	r3, r7
 8003750:	4630      	mov	r0, r6
 8003752:	4639      	mov	r1, r7
 8003754:	f7fc fefc 	bl	8000550 <__aeabi_dmul>
 8003758:	4b51      	ldr	r3, [pc, #324]	@ (80038a0 <__kernel_cos+0x178>)
 800375a:	2200      	movs	r2, #0
 800375c:	4604      	mov	r4, r0
 800375e:	460d      	mov	r5, r1
 8003760:	f7fc fef6 	bl	8000550 <__aeabi_dmul>
 8003764:	a340      	add	r3, pc, #256	@ (adr r3, 8003868 <__kernel_cos+0x140>)
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	4682      	mov	sl, r0
 800376c:	468b      	mov	fp, r1
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fc feed 	bl	8000550 <__aeabi_dmul>
 8003776:	a33e      	add	r3, pc, #248	@ (adr r3, 8003870 <__kernel_cos+0x148>)
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	f7fc fd32 	bl	80001e4 <__adddf3>
 8003780:	4622      	mov	r2, r4
 8003782:	462b      	mov	r3, r5
 8003784:	f7fc fee4 	bl	8000550 <__aeabi_dmul>
 8003788:	a33b      	add	r3, pc, #236	@ (adr r3, 8003878 <__kernel_cos+0x150>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f7fc fd27 	bl	80001e0 <__aeabi_dsub>
 8003792:	4622      	mov	r2, r4
 8003794:	462b      	mov	r3, r5
 8003796:	f7fc fedb 	bl	8000550 <__aeabi_dmul>
 800379a:	a339      	add	r3, pc, #228	@ (adr r3, 8003880 <__kernel_cos+0x158>)
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f7fc fd20 	bl	80001e4 <__adddf3>
 80037a4:	4622      	mov	r2, r4
 80037a6:	462b      	mov	r3, r5
 80037a8:	f7fc fed2 	bl	8000550 <__aeabi_dmul>
 80037ac:	a336      	add	r3, pc, #216	@ (adr r3, 8003888 <__kernel_cos+0x160>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f7fc fd15 	bl	80001e0 <__aeabi_dsub>
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	f7fc fec9 	bl	8000550 <__aeabi_dmul>
 80037be:	a334      	add	r3, pc, #208	@ (adr r3, 8003890 <__kernel_cos+0x168>)
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f7fc fd0e 	bl	80001e4 <__adddf3>
 80037c8:	4622      	mov	r2, r4
 80037ca:	462b      	mov	r3, r5
 80037cc:	f7fc fec0 	bl	8000550 <__aeabi_dmul>
 80037d0:	4622      	mov	r2, r4
 80037d2:	462b      	mov	r3, r5
 80037d4:	f7fc febc 	bl	8000550 <__aeabi_dmul>
 80037d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037dc:	4604      	mov	r4, r0
 80037de:	460d      	mov	r5, r1
 80037e0:	4630      	mov	r0, r6
 80037e2:	4639      	mov	r1, r7
 80037e4:	f7fc feb4 	bl	8000550 <__aeabi_dmul>
 80037e8:	460b      	mov	r3, r1
 80037ea:	4602      	mov	r2, r0
 80037ec:	4629      	mov	r1, r5
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7fc fcf6 	bl	80001e0 <__aeabi_dsub>
 80037f4:	4b2b      	ldr	r3, [pc, #172]	@ (80038a4 <__kernel_cos+0x17c>)
 80037f6:	4598      	cmp	r8, r3
 80037f8:	4606      	mov	r6, r0
 80037fa:	460f      	mov	r7, r1
 80037fc:	d810      	bhi.n	8003820 <__kernel_cos+0xf8>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4650      	mov	r0, sl
 8003804:	4659      	mov	r1, fp
 8003806:	f7fc fceb 	bl	80001e0 <__aeabi_dsub>
 800380a:	460b      	mov	r3, r1
 800380c:	4926      	ldr	r1, [pc, #152]	@ (80038a8 <__kernel_cos+0x180>)
 800380e:	4602      	mov	r2, r0
 8003810:	2000      	movs	r0, #0
 8003812:	f7fc fce5 	bl	80001e0 <__aeabi_dsub>
 8003816:	ec41 0b10 	vmov	d0, r0, r1
 800381a:	b003      	add	sp, #12
 800381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003820:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <__kernel_cos+0x184>)
 8003822:	4921      	ldr	r1, [pc, #132]	@ (80038a8 <__kernel_cos+0x180>)
 8003824:	4598      	cmp	r8, r3
 8003826:	bf8c      	ite	hi
 8003828:	4d21      	ldrhi	r5, [pc, #132]	@ (80038b0 <__kernel_cos+0x188>)
 800382a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800382e:	2400      	movs	r4, #0
 8003830:	4622      	mov	r2, r4
 8003832:	462b      	mov	r3, r5
 8003834:	2000      	movs	r0, #0
 8003836:	f7fc fcd3 	bl	80001e0 <__aeabi_dsub>
 800383a:	4622      	mov	r2, r4
 800383c:	4680      	mov	r8, r0
 800383e:	4689      	mov	r9, r1
 8003840:	462b      	mov	r3, r5
 8003842:	4650      	mov	r0, sl
 8003844:	4659      	mov	r1, fp
 8003846:	f7fc fccb 	bl	80001e0 <__aeabi_dsub>
 800384a:	4632      	mov	r2, r6
 800384c:	463b      	mov	r3, r7
 800384e:	f7fc fcc7 	bl	80001e0 <__aeabi_dsub>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4640      	mov	r0, r8
 8003858:	4649      	mov	r1, r9
 800385a:	e7da      	b.n	8003812 <__kernel_cos+0xea>
 800385c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003898 <__kernel_cos+0x170>
 8003860:	e7db      	b.n	800381a <__kernel_cos+0xf2>
 8003862:	bf00      	nop
 8003864:	f3af 8000 	nop.w
 8003868:	be8838d4 	.word	0xbe8838d4
 800386c:	bda8fae9 	.word	0xbda8fae9
 8003870:	bdb4b1c4 	.word	0xbdb4b1c4
 8003874:	3e21ee9e 	.word	0x3e21ee9e
 8003878:	809c52ad 	.word	0x809c52ad
 800387c:	3e927e4f 	.word	0x3e927e4f
 8003880:	19cb1590 	.word	0x19cb1590
 8003884:	3efa01a0 	.word	0x3efa01a0
 8003888:	16c15177 	.word	0x16c15177
 800388c:	3f56c16c 	.word	0x3f56c16c
 8003890:	5555554c 	.word	0x5555554c
 8003894:	3fa55555 	.word	0x3fa55555
 8003898:	00000000 	.word	0x00000000
 800389c:	3ff00000 	.word	0x3ff00000
 80038a0:	3fe00000 	.word	0x3fe00000
 80038a4:	3fd33332 	.word	0x3fd33332
 80038a8:	3ff00000 	.word	0x3ff00000
 80038ac:	3fe90000 	.word	0x3fe90000
 80038b0:	3fd20000 	.word	0x3fd20000
 80038b4:	00000000 	.word	0x00000000

080038b8 <__kernel_sin>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	ec55 4b10 	vmov	r4, r5, d0
 80038c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80038c4:	b085      	sub	sp, #20
 80038c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80038ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 80038ce:	4680      	mov	r8, r0
 80038d0:	d205      	bcs.n	80038de <__kernel_sin+0x26>
 80038d2:	4620      	mov	r0, r4
 80038d4:	4629      	mov	r1, r5
 80038d6:	f7fd f8eb 	bl	8000ab0 <__aeabi_d2iz>
 80038da:	2800      	cmp	r0, #0
 80038dc:	d052      	beq.n	8003984 <__kernel_sin+0xcc>
 80038de:	4622      	mov	r2, r4
 80038e0:	462b      	mov	r3, r5
 80038e2:	4620      	mov	r0, r4
 80038e4:	4629      	mov	r1, r5
 80038e6:	f7fc fe33 	bl	8000550 <__aeabi_dmul>
 80038ea:	4682      	mov	sl, r0
 80038ec:	468b      	mov	fp, r1
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4620      	mov	r0, r4
 80038f4:	4629      	mov	r1, r5
 80038f6:	f7fc fe2b 	bl	8000550 <__aeabi_dmul>
 80038fa:	a342      	add	r3, pc, #264	@ (adr r3, 8003a04 <__kernel_sin+0x14c>)
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	e9cd 0100 	strd	r0, r1, [sp]
 8003904:	4650      	mov	r0, sl
 8003906:	4659      	mov	r1, fp
 8003908:	f7fc fe22 	bl	8000550 <__aeabi_dmul>
 800390c:	a33f      	add	r3, pc, #252	@ (adr r3, 8003a0c <__kernel_sin+0x154>)
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	f7fc fc65 	bl	80001e0 <__aeabi_dsub>
 8003916:	4652      	mov	r2, sl
 8003918:	465b      	mov	r3, fp
 800391a:	f7fc fe19 	bl	8000550 <__aeabi_dmul>
 800391e:	a33d      	add	r3, pc, #244	@ (adr r3, 8003a14 <__kernel_sin+0x15c>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f7fc fc5e 	bl	80001e4 <__adddf3>
 8003928:	4652      	mov	r2, sl
 800392a:	465b      	mov	r3, fp
 800392c:	f7fc fe10 	bl	8000550 <__aeabi_dmul>
 8003930:	a33a      	add	r3, pc, #232	@ (adr r3, 8003a1c <__kernel_sin+0x164>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fc fc53 	bl	80001e0 <__aeabi_dsub>
 800393a:	4652      	mov	r2, sl
 800393c:	465b      	mov	r3, fp
 800393e:	f7fc fe07 	bl	8000550 <__aeabi_dmul>
 8003942:	a338      	add	r3, pc, #224	@ (adr r3, 8003a24 <__kernel_sin+0x16c>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fc fc4c 	bl	80001e4 <__adddf3>
 800394c:	4606      	mov	r6, r0
 800394e:	460f      	mov	r7, r1
 8003950:	f1b8 0f00 	cmp.w	r8, #0
 8003954:	d11b      	bne.n	800398e <__kernel_sin+0xd6>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4650      	mov	r0, sl
 800395c:	4659      	mov	r1, fp
 800395e:	f7fc fdf7 	bl	8000550 <__aeabi_dmul>
 8003962:	a325      	add	r3, pc, #148	@ (adr r3, 80039f8 <__kernel_sin+0x140>)
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f7fc fc3a 	bl	80001e0 <__aeabi_dsub>
 800396c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003970:	f7fc fdee 	bl	8000550 <__aeabi_dmul>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4620      	mov	r0, r4
 800397a:	4629      	mov	r1, r5
 800397c:	f7fc fc32 	bl	80001e4 <__adddf3>
 8003980:	4604      	mov	r4, r0
 8003982:	460d      	mov	r5, r1
 8003984:	ec45 4b10 	vmov	d0, r4, r5
 8003988:	b005      	add	sp, #20
 800398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003992:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <__kernel_sin+0x148>)
 8003994:	2200      	movs	r2, #0
 8003996:	f7fc fddb 	bl	8000550 <__aeabi_dmul>
 800399a:	4632      	mov	r2, r6
 800399c:	4680      	mov	r8, r0
 800399e:	4689      	mov	r9, r1
 80039a0:	463b      	mov	r3, r7
 80039a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039a6:	f7fc fdd3 	bl	8000550 <__aeabi_dmul>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4640      	mov	r0, r8
 80039b0:	4649      	mov	r1, r9
 80039b2:	f7fc fc15 	bl	80001e0 <__aeabi_dsub>
 80039b6:	4652      	mov	r2, sl
 80039b8:	465b      	mov	r3, fp
 80039ba:	f7fc fdc9 	bl	8000550 <__aeabi_dmul>
 80039be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039c2:	f7fc fc0d 	bl	80001e0 <__aeabi_dsub>
 80039c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80039f8 <__kernel_sin+0x140>)
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	4606      	mov	r6, r0
 80039ce:	460f      	mov	r7, r1
 80039d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039d4:	f7fc fdbc 	bl	8000550 <__aeabi_dmul>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4630      	mov	r0, r6
 80039de:	4639      	mov	r1, r7
 80039e0:	f7fc fc00 	bl	80001e4 <__adddf3>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4620      	mov	r0, r4
 80039ea:	4629      	mov	r1, r5
 80039ec:	f7fc fbf8 	bl	80001e0 <__aeabi_dsub>
 80039f0:	e7c6      	b.n	8003980 <__kernel_sin+0xc8>
 80039f2:	bf00      	nop
 80039f4:	f3af 8000 	nop.w
 80039f8:	55555549 	.word	0x55555549
 80039fc:	3fc55555 	.word	0x3fc55555
 8003a00:	3fe00000 	.word	0x3fe00000
 8003a04:	5acfd57c 	.word	0x5acfd57c
 8003a08:	3de5d93a 	.word	0x3de5d93a
 8003a0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003a10:	3e5ae5e6 	.word	0x3e5ae5e6
 8003a14:	57b1fe7d 	.word	0x57b1fe7d
 8003a18:	3ec71de3 	.word	0x3ec71de3
 8003a1c:	19c161d5 	.word	0x19c161d5
 8003a20:	3f2a01a0 	.word	0x3f2a01a0
 8003a24:	1110f8a6 	.word	0x1110f8a6
 8003a28:	3f811111 	.word	0x3f811111
 8003a2c:	00000000 	.word	0x00000000

08003a30 <__kernel_tan>:
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	ec5b ab10 	vmov	sl, fp, d0
 8003a38:	4bdb      	ldr	r3, [pc, #876]	@ (8003da8 <__kernel_tan+0x378>)
 8003a3a:	b089      	sub	sp, #36	@ 0x24
 8003a3c:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8003a40:	429f      	cmp	r7, r3
 8003a42:	ec59 8b11 	vmov	r8, r9, d1
 8003a46:	4606      	mov	r6, r0
 8003a48:	f8cd b008 	str.w	fp, [sp, #8]
 8003a4c:	d85d      	bhi.n	8003b0a <__kernel_tan+0xda>
 8003a4e:	4650      	mov	r0, sl
 8003a50:	4659      	mov	r1, fp
 8003a52:	f7fd f82d 	bl	8000ab0 <__aeabi_d2iz>
 8003a56:	4605      	mov	r5, r0
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d17c      	bne.n	8003b56 <__kernel_tan+0x126>
 8003a5c:	1c73      	adds	r3, r6, #1
 8003a5e:	4652      	mov	r2, sl
 8003a60:	4313      	orrs	r3, r2
 8003a62:	433b      	orrs	r3, r7
 8003a64:	d110      	bne.n	8003a88 <__kernel_tan+0x58>
 8003a66:	ec4b ab10 	vmov	d0, sl, fp
 8003a6a:	f001 fb85 	bl	8005178 <fabs>
 8003a6e:	49cf      	ldr	r1, [pc, #828]	@ (8003dac <__kernel_tan+0x37c>)
 8003a70:	ec53 2b10 	vmov	r2, r3, d0
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7fc fe95 	bl	80007a4 <__aeabi_ddiv>
 8003a7a:	4682      	mov	sl, r0
 8003a7c:	468b      	mov	fp, r1
 8003a7e:	ec4b ab10 	vmov	d0, sl, fp
 8003a82:	b009      	add	sp, #36	@ 0x24
 8003a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a88:	2e01      	cmp	r6, #1
 8003a8a:	d0f8      	beq.n	8003a7e <__kernel_tan+0x4e>
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	4650      	mov	r0, sl
 8003a92:	4659      	mov	r1, fp
 8003a94:	f7fc fba6 	bl	80001e4 <__adddf3>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	460f      	mov	r7, r1
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	49c3      	ldr	r1, [pc, #780]	@ (8003db0 <__kernel_tan+0x380>)
 8003aa2:	f7fc fe7f 	bl	80007a4 <__aeabi_ddiv>
 8003aa6:	e9cd 0100 	strd	r0, r1, [sp]
 8003aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003aae:	462e      	mov	r6, r5
 8003ab0:	4652      	mov	r2, sl
 8003ab2:	462c      	mov	r4, r5
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	461d      	mov	r5, r3
 8003ab8:	4639      	mov	r1, r7
 8003aba:	465b      	mov	r3, fp
 8003abc:	f7fc fb90 	bl	80001e0 <__aeabi_dsub>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	f7fc fb8a 	bl	80001e0 <__aeabi_dsub>
 8003acc:	4632      	mov	r2, r6
 8003ace:	462b      	mov	r3, r5
 8003ad0:	f7fc fd3e 	bl	8000550 <__aeabi_dmul>
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	4682      	mov	sl, r0
 8003ad8:	468b      	mov	fp, r1
 8003ada:	462b      	mov	r3, r5
 8003adc:	4630      	mov	r0, r6
 8003ade:	4639      	mov	r1, r7
 8003ae0:	f7fc fd36 	bl	8000550 <__aeabi_dmul>
 8003ae4:	4bb1      	ldr	r3, [pc, #708]	@ (8003dac <__kernel_tan+0x37c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f7fc fb7c 	bl	80001e4 <__adddf3>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4650      	mov	r0, sl
 8003af2:	4659      	mov	r1, fp
 8003af4:	f7fc fb76 	bl	80001e4 <__adddf3>
 8003af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003afc:	f7fc fd28 	bl	8000550 <__aeabi_dmul>
 8003b00:	4622      	mov	r2, r4
 8003b02:	462b      	mov	r3, r5
 8003b04:	f7fc fb6e 	bl	80001e4 <__adddf3>
 8003b08:	e7b7      	b.n	8003a7a <__kernel_tan+0x4a>
 8003b0a:	4baa      	ldr	r3, [pc, #680]	@ (8003db4 <__kernel_tan+0x384>)
 8003b0c:	429f      	cmp	r7, r3
 8003b0e:	d922      	bls.n	8003b56 <__kernel_tan+0x126>
 8003b10:	9b02      	ldr	r3, [sp, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	da05      	bge.n	8003b22 <__kernel_tan+0xf2>
 8003b16:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8003b1a:	469b      	mov	fp, r3
 8003b1c:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003b20:	4699      	mov	r9, r3
 8003b22:	4652      	mov	r2, sl
 8003b24:	465b      	mov	r3, fp
 8003b26:	a182      	add	r1, pc, #520	@ (adr r1, 8003d30 <__kernel_tan+0x300>)
 8003b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b2c:	f7fc fb58 	bl	80001e0 <__aeabi_dsub>
 8003b30:	4642      	mov	r2, r8
 8003b32:	464b      	mov	r3, r9
 8003b34:	4604      	mov	r4, r0
 8003b36:	460d      	mov	r5, r1
 8003b38:	a17f      	add	r1, pc, #508	@ (adr r1, 8003d38 <__kernel_tan+0x308>)
 8003b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b3e:	f7fc fb4f 	bl	80001e0 <__aeabi_dsub>
 8003b42:	4622      	mov	r2, r4
 8003b44:	462b      	mov	r3, r5
 8003b46:	f7fc fb4d 	bl	80001e4 <__adddf3>
 8003b4a:	f04f 0800 	mov.w	r8, #0
 8003b4e:	4682      	mov	sl, r0
 8003b50:	468b      	mov	fp, r1
 8003b52:	f04f 0900 	mov.w	r9, #0
 8003b56:	4652      	mov	r2, sl
 8003b58:	465b      	mov	r3, fp
 8003b5a:	4650      	mov	r0, sl
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	f7fc fcf7 	bl	8000550 <__aeabi_dmul>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	e9cd 2300 	strd	r2, r3, [sp]
 8003b6a:	f7fc fcf1 	bl	8000550 <__aeabi_dmul>
 8003b6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b72:	4604      	mov	r4, r0
 8003b74:	460d      	mov	r5, r1
 8003b76:	4650      	mov	r0, sl
 8003b78:	4659      	mov	r1, fp
 8003b7a:	f7fc fce9 	bl	8000550 <__aeabi_dmul>
 8003b7e:	a370      	add	r3, pc, #448	@ (adr r3, 8003d40 <__kernel_tan+0x310>)
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	f7fc fce0 	bl	8000550 <__aeabi_dmul>
 8003b90:	a36d      	add	r3, pc, #436	@ (adr r3, 8003d48 <__kernel_tan+0x318>)
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f7fc fb25 	bl	80001e4 <__adddf3>
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	f7fc fcd7 	bl	8000550 <__aeabi_dmul>
 8003ba2:	a36b      	add	r3, pc, #428	@ (adr r3, 8003d50 <__kernel_tan+0x320>)
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f7fc fb1c 	bl	80001e4 <__adddf3>
 8003bac:	4622      	mov	r2, r4
 8003bae:	462b      	mov	r3, r5
 8003bb0:	f7fc fcce 	bl	8000550 <__aeabi_dmul>
 8003bb4:	a368      	add	r3, pc, #416	@ (adr r3, 8003d58 <__kernel_tan+0x328>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f7fc fb13 	bl	80001e4 <__adddf3>
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	462b      	mov	r3, r5
 8003bc2:	f7fc fcc5 	bl	8000550 <__aeabi_dmul>
 8003bc6:	a366      	add	r3, pc, #408	@ (adr r3, 8003d60 <__kernel_tan+0x330>)
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f7fc fb0a 	bl	80001e4 <__adddf3>
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	f7fc fcbc 	bl	8000550 <__aeabi_dmul>
 8003bd8:	a363      	add	r3, pc, #396	@ (adr r3, 8003d68 <__kernel_tan+0x338>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f7fc fb01 	bl	80001e4 <__adddf3>
 8003be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003be6:	f7fc fcb3 	bl	8000550 <__aeabi_dmul>
 8003bea:	a361      	add	r3, pc, #388	@ (adr r3, 8003d70 <__kernel_tan+0x340>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	f7fc fcaa 	bl	8000550 <__aeabi_dmul>
 8003bfc:	a35e      	add	r3, pc, #376	@ (adr r3, 8003d78 <__kernel_tan+0x348>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc faef 	bl	80001e4 <__adddf3>
 8003c06:	4622      	mov	r2, r4
 8003c08:	462b      	mov	r3, r5
 8003c0a:	f7fc fca1 	bl	8000550 <__aeabi_dmul>
 8003c0e:	a35c      	add	r3, pc, #368	@ (adr r3, 8003d80 <__kernel_tan+0x350>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f7fc fae6 	bl	80001e4 <__adddf3>
 8003c18:	4622      	mov	r2, r4
 8003c1a:	462b      	mov	r3, r5
 8003c1c:	f7fc fc98 	bl	8000550 <__aeabi_dmul>
 8003c20:	a359      	add	r3, pc, #356	@ (adr r3, 8003d88 <__kernel_tan+0x358>)
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f7fc fadd 	bl	80001e4 <__adddf3>
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	462b      	mov	r3, r5
 8003c2e:	f7fc fc8f 	bl	8000550 <__aeabi_dmul>
 8003c32:	a357      	add	r3, pc, #348	@ (adr r3, 8003d90 <__kernel_tan+0x360>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f7fc fad4 	bl	80001e4 <__adddf3>
 8003c3c:	4622      	mov	r2, r4
 8003c3e:	462b      	mov	r3, r5
 8003c40:	f7fc fc86 	bl	8000550 <__aeabi_dmul>
 8003c44:	a354      	add	r3, pc, #336	@ (adr r3, 8003d98 <__kernel_tan+0x368>)
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	f7fc facb 	bl	80001e4 <__adddf3>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c56:	f7fc fac5 	bl	80001e4 <__adddf3>
 8003c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c5e:	f7fc fc77 	bl	8000550 <__aeabi_dmul>
 8003c62:	4642      	mov	r2, r8
 8003c64:	464b      	mov	r3, r9
 8003c66:	f7fc fabd 	bl	80001e4 <__adddf3>
 8003c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c6e:	f7fc fc6f 	bl	8000550 <__aeabi_dmul>
 8003c72:	4642      	mov	r2, r8
 8003c74:	464b      	mov	r3, r9
 8003c76:	f7fc fab5 	bl	80001e4 <__adddf3>
 8003c7a:	a349      	add	r3, pc, #292	@ (adr r3, 8003da0 <__kernel_tan+0x370>)
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	4604      	mov	r4, r0
 8003c82:	460d      	mov	r5, r1
 8003c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c88:	f7fc fc62 	bl	8000550 <__aeabi_dmul>
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	462b      	mov	r3, r5
 8003c90:	f7fc faa8 	bl	80001e4 <__adddf3>
 8003c94:	e9cd 0100 	strd	r0, r1, [sp]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	4650      	mov	r0, sl
 8003ca0:	f7fc faa0 	bl	80001e4 <__adddf3>
 8003ca4:	4b43      	ldr	r3, [pc, #268]	@ (8003db4 <__kernel_tan+0x384>)
 8003ca6:	429f      	cmp	r7, r3
 8003ca8:	4604      	mov	r4, r0
 8003caa:	460d      	mov	r5, r1
 8003cac:	f240 8084 	bls.w	8003db8 <__kernel_tan+0x388>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f7fc fbe3 	bl	800047c <__aeabi_i2d>
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	4680      	mov	r8, r0
 8003cba:	4689      	mov	r9, r1
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	f7fc fc45 	bl	8000550 <__aeabi_dmul>
 8003cc6:	4642      	mov	r2, r8
 8003cc8:	4606      	mov	r6, r0
 8003cca:	460f      	mov	r7, r1
 8003ccc:	464b      	mov	r3, r9
 8003cce:	4620      	mov	r0, r4
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f7fc fa87 	bl	80001e4 <__adddf3>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4630      	mov	r0, r6
 8003cdc:	4639      	mov	r1, r7
 8003cde:	f7fc fd61 	bl	80007a4 <__aeabi_ddiv>
 8003ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ce6:	f7fc fa7b 	bl	80001e0 <__aeabi_dsub>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4650      	mov	r0, sl
 8003cf0:	4659      	mov	r1, fp
 8003cf2:	f7fc fa75 	bl	80001e0 <__aeabi_dsub>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	f7fc fa73 	bl	80001e4 <__adddf3>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4640      	mov	r0, r8
 8003d04:	4649      	mov	r1, r9
 8003d06:	f7fc fa6b 	bl	80001e0 <__aeabi_dsub>
 8003d0a:	9b02      	ldr	r3, [sp, #8]
 8003d0c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8003d10:	f00a 0a02 	and.w	sl, sl, #2
 8003d14:	4604      	mov	r4, r0
 8003d16:	f1ca 0001 	rsb	r0, sl, #1
 8003d1a:	460d      	mov	r5, r1
 8003d1c:	f7fc fbae 	bl	800047c <__aeabi_i2d>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4620      	mov	r0, r4
 8003d26:	4629      	mov	r1, r5
 8003d28:	f7fc fc12 	bl	8000550 <__aeabi_dmul>
 8003d2c:	e6a5      	b.n	8003a7a <__kernel_tan+0x4a>
 8003d2e:	bf00      	nop
 8003d30:	54442d18 	.word	0x54442d18
 8003d34:	3fe921fb 	.word	0x3fe921fb
 8003d38:	33145c07 	.word	0x33145c07
 8003d3c:	3c81a626 	.word	0x3c81a626
 8003d40:	74bf7ad4 	.word	0x74bf7ad4
 8003d44:	3efb2a70 	.word	0x3efb2a70
 8003d48:	32f0a7e9 	.word	0x32f0a7e9
 8003d4c:	3f12b80f 	.word	0x3f12b80f
 8003d50:	1a8d1068 	.word	0x1a8d1068
 8003d54:	3f3026f7 	.word	0x3f3026f7
 8003d58:	fee08315 	.word	0xfee08315
 8003d5c:	3f57dbc8 	.word	0x3f57dbc8
 8003d60:	e96e8493 	.word	0xe96e8493
 8003d64:	3f8226e3 	.word	0x3f8226e3
 8003d68:	1bb341fe 	.word	0x1bb341fe
 8003d6c:	3faba1ba 	.word	0x3faba1ba
 8003d70:	db605373 	.word	0xdb605373
 8003d74:	bef375cb 	.word	0xbef375cb
 8003d78:	a03792a6 	.word	0xa03792a6
 8003d7c:	3f147e88 	.word	0x3f147e88
 8003d80:	f2f26501 	.word	0xf2f26501
 8003d84:	3f4344d8 	.word	0x3f4344d8
 8003d88:	c9560328 	.word	0xc9560328
 8003d8c:	3f6d6d22 	.word	0x3f6d6d22
 8003d90:	8406d637 	.word	0x8406d637
 8003d94:	3f9664f4 	.word	0x3f9664f4
 8003d98:	1110fe7a 	.word	0x1110fe7a
 8003d9c:	3fc11111 	.word	0x3fc11111
 8003da0:	55555563 	.word	0x55555563
 8003da4:	3fd55555 	.word	0x3fd55555
 8003da8:	3e2fffff 	.word	0x3e2fffff
 8003dac:	3ff00000 	.word	0x3ff00000
 8003db0:	bff00000 	.word	0xbff00000
 8003db4:	3fe59427 	.word	0x3fe59427
 8003db8:	2e01      	cmp	r6, #1
 8003dba:	d033      	beq.n	8003e24 <__kernel_tan+0x3f4>
 8003dbc:	f04f 0800 	mov.w	r8, #0
 8003dc0:	4689      	mov	r9, r1
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	4918      	ldr	r1, [pc, #96]	@ (8003e2c <__kernel_tan+0x3fc>)
 8003dca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003dce:	f7fc fce9 	bl	80007a4 <__aeabi_ddiv>
 8003dd2:	4652      	mov	r2, sl
 8003dd4:	460f      	mov	r7, r1
 8003dd6:	465b      	mov	r3, fp
 8003dd8:	4606      	mov	r6, r0
 8003dda:	460d      	mov	r5, r1
 8003ddc:	4640      	mov	r0, r8
 8003dde:	4649      	mov	r1, r9
 8003de0:	f7fc f9fe 	bl	80001e0 <__aeabi_dsub>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dec:	f7fc f9f8 	bl	80001e0 <__aeabi_dsub>
 8003df0:	4642      	mov	r2, r8
 8003df2:	463b      	mov	r3, r7
 8003df4:	f7fc fbac 	bl	8000550 <__aeabi_dmul>
 8003df8:	4642      	mov	r2, r8
 8003dfa:	4682      	mov	sl, r0
 8003dfc:	468b      	mov	fp, r1
 8003dfe:	463b      	mov	r3, r7
 8003e00:	4640      	mov	r0, r8
 8003e02:	4649      	mov	r1, r9
 8003e04:	f7fc fba4 	bl	8000550 <__aeabi_dmul>
 8003e08:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <__kernel_tan+0x400>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f7fc f9ea 	bl	80001e4 <__adddf3>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4650      	mov	r0, sl
 8003e16:	4659      	mov	r1, fp
 8003e18:	f7fc f9e4 	bl	80001e4 <__adddf3>
 8003e1c:	4644      	mov	r4, r8
 8003e1e:	4632      	mov	r2, r6
 8003e20:	463b      	mov	r3, r7
 8003e22:	e66b      	b.n	8003afc <__kernel_tan+0xcc>
 8003e24:	4682      	mov	sl, r0
 8003e26:	468b      	mov	fp, r1
 8003e28:	e629      	b.n	8003a7e <__kernel_tan+0x4e>
 8003e2a:	bf00      	nop
 8003e2c:	bff00000 	.word	0xbff00000
 8003e30:	3ff00000 	.word	0x3ff00000
 8003e34:	00000000 	.word	0x00000000

08003e38 <__ieee754_atan2>:
 8003e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e3c:	ec57 6b11 	vmov	r6, r7, d1
 8003e40:	4273      	negs	r3, r6
 8003e42:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8003fc0 <__ieee754_atan2+0x188>
 8003e46:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8003e4a:	4333      	orrs	r3, r6
 8003e4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003e50:	4543      	cmp	r3, r8
 8003e52:	ec51 0b10 	vmov	r0, r1, d0
 8003e56:	4635      	mov	r5, r6
 8003e58:	d809      	bhi.n	8003e6e <__ieee754_atan2+0x36>
 8003e5a:	4244      	negs	r4, r0
 8003e5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003e60:	4304      	orrs	r4, r0
 8003e62:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8003e66:	4544      	cmp	r4, r8
 8003e68:	468e      	mov	lr, r1
 8003e6a:	4681      	mov	r9, r0
 8003e6c:	d907      	bls.n	8003e7e <__ieee754_atan2+0x46>
 8003e6e:	4632      	mov	r2, r6
 8003e70:	463b      	mov	r3, r7
 8003e72:	f7fc f9b7 	bl	80001e4 <__adddf3>
 8003e76:	ec41 0b10 	vmov	d0, r0, r1
 8003e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e7e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8003e82:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8003e86:	4334      	orrs	r4, r6
 8003e88:	d103      	bne.n	8003e92 <__ieee754_atan2+0x5a>
 8003e8a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e8e:	f000 bfdb 	b.w	8004e48 <atan>
 8003e92:	17bc      	asrs	r4, r7, #30
 8003e94:	f004 0402 	and.w	r4, r4, #2
 8003e98:	ea53 0909 	orrs.w	r9, r3, r9
 8003e9c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8003ea0:	d107      	bne.n	8003eb2 <__ieee754_atan2+0x7a>
 8003ea2:	2c02      	cmp	r4, #2
 8003ea4:	d05f      	beq.n	8003f66 <__ieee754_atan2+0x12e>
 8003ea6:	2c03      	cmp	r4, #3
 8003ea8:	d1e5      	bne.n	8003e76 <__ieee754_atan2+0x3e>
 8003eaa:	a141      	add	r1, pc, #260	@ (adr r1, 8003fb0 <__ieee754_atan2+0x178>)
 8003eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003eb0:	e7e1      	b.n	8003e76 <__ieee754_atan2+0x3e>
 8003eb2:	4315      	orrs	r5, r2
 8003eb4:	d106      	bne.n	8003ec4 <__ieee754_atan2+0x8c>
 8003eb6:	f1be 0f00 	cmp.w	lr, #0
 8003eba:	da5f      	bge.n	8003f7c <__ieee754_atan2+0x144>
 8003ebc:	a13e      	add	r1, pc, #248	@ (adr r1, 8003fb8 <__ieee754_atan2+0x180>)
 8003ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ec2:	e7d8      	b.n	8003e76 <__ieee754_atan2+0x3e>
 8003ec4:	4542      	cmp	r2, r8
 8003ec6:	d10f      	bne.n	8003ee8 <__ieee754_atan2+0xb0>
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	f104 34ff 	add.w	r4, r4, #4294967295
 8003ece:	d107      	bne.n	8003ee0 <__ieee754_atan2+0xa8>
 8003ed0:	2c02      	cmp	r4, #2
 8003ed2:	d84c      	bhi.n	8003f6e <__ieee754_atan2+0x136>
 8003ed4:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <__ieee754_atan2+0x170>)
 8003ed6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003eda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ede:	e7ca      	b.n	8003e76 <__ieee754_atan2+0x3e>
 8003ee0:	2c02      	cmp	r4, #2
 8003ee2:	d848      	bhi.n	8003f76 <__ieee754_atan2+0x13e>
 8003ee4:	4b31      	ldr	r3, [pc, #196]	@ (8003fac <__ieee754_atan2+0x174>)
 8003ee6:	e7f6      	b.n	8003ed6 <__ieee754_atan2+0x9e>
 8003ee8:	4543      	cmp	r3, r8
 8003eea:	d0e4      	beq.n	8003eb6 <__ieee754_atan2+0x7e>
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8003ef2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8003ef6:	da1e      	bge.n	8003f36 <__ieee754_atan2+0xfe>
 8003ef8:	2f00      	cmp	r7, #0
 8003efa:	da01      	bge.n	8003f00 <__ieee754_atan2+0xc8>
 8003efc:	323c      	adds	r2, #60	@ 0x3c
 8003efe:	db1e      	blt.n	8003f3e <__ieee754_atan2+0x106>
 8003f00:	4632      	mov	r2, r6
 8003f02:	463b      	mov	r3, r7
 8003f04:	f7fc fc4e 	bl	80007a4 <__aeabi_ddiv>
 8003f08:	ec41 0b10 	vmov	d0, r0, r1
 8003f0c:	f001 f934 	bl	8005178 <fabs>
 8003f10:	f000 ff9a 	bl	8004e48 <atan>
 8003f14:	ec51 0b10 	vmov	r0, r1, d0
 8003f18:	2c01      	cmp	r4, #1
 8003f1a:	d013      	beq.n	8003f44 <__ieee754_atan2+0x10c>
 8003f1c:	2c02      	cmp	r4, #2
 8003f1e:	d015      	beq.n	8003f4c <__ieee754_atan2+0x114>
 8003f20:	2c00      	cmp	r4, #0
 8003f22:	d0a8      	beq.n	8003e76 <__ieee754_atan2+0x3e>
 8003f24:	a318      	add	r3, pc, #96	@ (adr r3, 8003f88 <__ieee754_atan2+0x150>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f7fc f959 	bl	80001e0 <__aeabi_dsub>
 8003f2e:	a318      	add	r3, pc, #96	@ (adr r3, 8003f90 <__ieee754_atan2+0x158>)
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	e014      	b.n	8003f60 <__ieee754_atan2+0x128>
 8003f36:	a118      	add	r1, pc, #96	@ (adr r1, 8003f98 <__ieee754_atan2+0x160>)
 8003f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f3c:	e7ec      	b.n	8003f18 <__ieee754_atan2+0xe0>
 8003f3e:	2000      	movs	r0, #0
 8003f40:	2100      	movs	r1, #0
 8003f42:	e7e9      	b.n	8003f18 <__ieee754_atan2+0xe0>
 8003f44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f48:	4619      	mov	r1, r3
 8003f4a:	e794      	b.n	8003e76 <__ieee754_atan2+0x3e>
 8003f4c:	a30e      	add	r3, pc, #56	@ (adr r3, 8003f88 <__ieee754_atan2+0x150>)
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f7fc f945 	bl	80001e0 <__aeabi_dsub>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	a10d      	add	r1, pc, #52	@ (adr r1, 8003f90 <__ieee754_atan2+0x158>)
 8003f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f60:	f7fc f93e 	bl	80001e0 <__aeabi_dsub>
 8003f64:	e787      	b.n	8003e76 <__ieee754_atan2+0x3e>
 8003f66:	a10a      	add	r1, pc, #40	@ (adr r1, 8003f90 <__ieee754_atan2+0x158>)
 8003f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f6c:	e783      	b.n	8003e76 <__ieee754_atan2+0x3e>
 8003f6e:	a10c      	add	r1, pc, #48	@ (adr r1, 8003fa0 <__ieee754_atan2+0x168>)
 8003f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f74:	e77f      	b.n	8003e76 <__ieee754_atan2+0x3e>
 8003f76:	2000      	movs	r0, #0
 8003f78:	2100      	movs	r1, #0
 8003f7a:	e77c      	b.n	8003e76 <__ieee754_atan2+0x3e>
 8003f7c:	a106      	add	r1, pc, #24	@ (adr r1, 8003f98 <__ieee754_atan2+0x160>)
 8003f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f82:	e778      	b.n	8003e76 <__ieee754_atan2+0x3e>
 8003f84:	f3af 8000 	nop.w
 8003f88:	33145c07 	.word	0x33145c07
 8003f8c:	3ca1a626 	.word	0x3ca1a626
 8003f90:	54442d18 	.word	0x54442d18
 8003f94:	400921fb 	.word	0x400921fb
 8003f98:	54442d18 	.word	0x54442d18
 8003f9c:	3ff921fb 	.word	0x3ff921fb
 8003fa0:	54442d18 	.word	0x54442d18
 8003fa4:	3fe921fb 	.word	0x3fe921fb
 8003fa8:	08005ad8 	.word	0x08005ad8
 8003fac:	08005ac0 	.word	0x08005ac0
 8003fb0:	54442d18 	.word	0x54442d18
 8003fb4:	c00921fb 	.word	0xc00921fb
 8003fb8:	54442d18 	.word	0x54442d18
 8003fbc:	bff921fb 	.word	0xbff921fb
 8003fc0:	7ff00000 	.word	0x7ff00000
 8003fc4:	00000000 	.word	0x00000000

08003fc8 <__ieee754_pow>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	b091      	sub	sp, #68	@ 0x44
 8003fce:	ed8d 1b00 	vstr	d1, [sp]
 8003fd2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8003fd6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8003fda:	ea5a 0001 	orrs.w	r0, sl, r1
 8003fde:	ec57 6b10 	vmov	r6, r7, d0
 8003fe2:	d113      	bne.n	800400c <__ieee754_pow+0x44>
 8003fe4:	19b3      	adds	r3, r6, r6
 8003fe6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8003fea:	4152      	adcs	r2, r2
 8003fec:	4298      	cmp	r0, r3
 8003fee:	4b98      	ldr	r3, [pc, #608]	@ (8004250 <__ieee754_pow+0x288>)
 8003ff0:	4193      	sbcs	r3, r2
 8003ff2:	f080 84ea 	bcs.w	80049ca <__ieee754_pow+0xa02>
 8003ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	f7fc f8f1 	bl	80001e4 <__adddf3>
 8004002:	ec41 0b10 	vmov	d0, r0, r1
 8004006:	b011      	add	sp, #68	@ 0x44
 8004008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400c:	4a91      	ldr	r2, [pc, #580]	@ (8004254 <__ieee754_pow+0x28c>)
 800400e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004012:	4590      	cmp	r8, r2
 8004014:	463d      	mov	r5, r7
 8004016:	4633      	mov	r3, r6
 8004018:	d806      	bhi.n	8004028 <__ieee754_pow+0x60>
 800401a:	d101      	bne.n	8004020 <__ieee754_pow+0x58>
 800401c:	2e00      	cmp	r6, #0
 800401e:	d1ea      	bne.n	8003ff6 <__ieee754_pow+0x2e>
 8004020:	4592      	cmp	sl, r2
 8004022:	d801      	bhi.n	8004028 <__ieee754_pow+0x60>
 8004024:	d10e      	bne.n	8004044 <__ieee754_pow+0x7c>
 8004026:	b169      	cbz	r1, 8004044 <__ieee754_pow+0x7c>
 8004028:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800402c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004030:	431d      	orrs	r5, r3
 8004032:	d1e0      	bne.n	8003ff6 <__ieee754_pow+0x2e>
 8004034:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004038:	18db      	adds	r3, r3, r3
 800403a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800403e:	4152      	adcs	r2, r2
 8004040:	429d      	cmp	r5, r3
 8004042:	e7d4      	b.n	8003fee <__ieee754_pow+0x26>
 8004044:	2d00      	cmp	r5, #0
 8004046:	46c3      	mov	fp, r8
 8004048:	da3a      	bge.n	80040c0 <__ieee754_pow+0xf8>
 800404a:	4a83      	ldr	r2, [pc, #524]	@ (8004258 <__ieee754_pow+0x290>)
 800404c:	4592      	cmp	sl, r2
 800404e:	d84d      	bhi.n	80040ec <__ieee754_pow+0x124>
 8004050:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8004054:	4592      	cmp	sl, r2
 8004056:	f240 84c7 	bls.w	80049e8 <__ieee754_pow+0xa20>
 800405a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800405e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004062:	2a14      	cmp	r2, #20
 8004064:	dd0f      	ble.n	8004086 <__ieee754_pow+0xbe>
 8004066:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800406a:	fa21 f402 	lsr.w	r4, r1, r2
 800406e:	fa04 f202 	lsl.w	r2, r4, r2
 8004072:	428a      	cmp	r2, r1
 8004074:	f040 84b8 	bne.w	80049e8 <__ieee754_pow+0xa20>
 8004078:	f004 0401 	and.w	r4, r4, #1
 800407c:	f1c4 0402 	rsb	r4, r4, #2
 8004080:	2900      	cmp	r1, #0
 8004082:	d158      	bne.n	8004136 <__ieee754_pow+0x16e>
 8004084:	e00e      	b.n	80040a4 <__ieee754_pow+0xdc>
 8004086:	2900      	cmp	r1, #0
 8004088:	d154      	bne.n	8004134 <__ieee754_pow+0x16c>
 800408a:	f1c2 0214 	rsb	r2, r2, #20
 800408e:	fa4a f402 	asr.w	r4, sl, r2
 8004092:	fa04 f202 	lsl.w	r2, r4, r2
 8004096:	4552      	cmp	r2, sl
 8004098:	f040 84a3 	bne.w	80049e2 <__ieee754_pow+0xa1a>
 800409c:	f004 0401 	and.w	r4, r4, #1
 80040a0:	f1c4 0402 	rsb	r4, r4, #2
 80040a4:	4a6d      	ldr	r2, [pc, #436]	@ (800425c <__ieee754_pow+0x294>)
 80040a6:	4592      	cmp	sl, r2
 80040a8:	d12e      	bne.n	8004108 <__ieee754_pow+0x140>
 80040aa:	f1b9 0f00 	cmp.w	r9, #0
 80040ae:	f280 8494 	bge.w	80049da <__ieee754_pow+0xa12>
 80040b2:	496a      	ldr	r1, [pc, #424]	@ (800425c <__ieee754_pow+0x294>)
 80040b4:	4632      	mov	r2, r6
 80040b6:	463b      	mov	r3, r7
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7fc fb73 	bl	80007a4 <__aeabi_ddiv>
 80040be:	e7a0      	b.n	8004002 <__ieee754_pow+0x3a>
 80040c0:	2400      	movs	r4, #0
 80040c2:	bbc1      	cbnz	r1, 8004136 <__ieee754_pow+0x16e>
 80040c4:	4a63      	ldr	r2, [pc, #396]	@ (8004254 <__ieee754_pow+0x28c>)
 80040c6:	4592      	cmp	sl, r2
 80040c8:	d1ec      	bne.n	80040a4 <__ieee754_pow+0xdc>
 80040ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80040ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80040d2:	431a      	orrs	r2, r3
 80040d4:	f000 8479 	beq.w	80049ca <__ieee754_pow+0xa02>
 80040d8:	4b61      	ldr	r3, [pc, #388]	@ (8004260 <__ieee754_pow+0x298>)
 80040da:	4598      	cmp	r8, r3
 80040dc:	d908      	bls.n	80040f0 <__ieee754_pow+0x128>
 80040de:	f1b9 0f00 	cmp.w	r9, #0
 80040e2:	f2c0 8476 	blt.w	80049d2 <__ieee754_pow+0xa0a>
 80040e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040ea:	e78a      	b.n	8004002 <__ieee754_pow+0x3a>
 80040ec:	2402      	movs	r4, #2
 80040ee:	e7e8      	b.n	80040c2 <__ieee754_pow+0xfa>
 80040f0:	f1b9 0f00 	cmp.w	r9, #0
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	da81      	bge.n	8004002 <__ieee754_pow+0x3a>
 80040fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004102:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004106:	e77c      	b.n	8004002 <__ieee754_pow+0x3a>
 8004108:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800410c:	d106      	bne.n	800411c <__ieee754_pow+0x154>
 800410e:	4632      	mov	r2, r6
 8004110:	463b      	mov	r3, r7
 8004112:	4630      	mov	r0, r6
 8004114:	4639      	mov	r1, r7
 8004116:	f7fc fa1b 	bl	8000550 <__aeabi_dmul>
 800411a:	e772      	b.n	8004002 <__ieee754_pow+0x3a>
 800411c:	4a51      	ldr	r2, [pc, #324]	@ (8004264 <__ieee754_pow+0x29c>)
 800411e:	4591      	cmp	r9, r2
 8004120:	d109      	bne.n	8004136 <__ieee754_pow+0x16e>
 8004122:	2d00      	cmp	r5, #0
 8004124:	db07      	blt.n	8004136 <__ieee754_pow+0x16e>
 8004126:	ec47 6b10 	vmov	d0, r6, r7
 800412a:	b011      	add	sp, #68	@ 0x44
 800412c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	f7ff ba1e 	b.w	8003570 <__ieee754_sqrt>
 8004134:	2400      	movs	r4, #0
 8004136:	ec47 6b10 	vmov	d0, r6, r7
 800413a:	9302      	str	r3, [sp, #8]
 800413c:	f001 f81c 	bl	8005178 <fabs>
 8004140:	9b02      	ldr	r3, [sp, #8]
 8004142:	ec51 0b10 	vmov	r0, r1, d0
 8004146:	bb53      	cbnz	r3, 800419e <__ieee754_pow+0x1d6>
 8004148:	4b44      	ldr	r3, [pc, #272]	@ (800425c <__ieee754_pow+0x294>)
 800414a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800414e:	429a      	cmp	r2, r3
 8004150:	d002      	beq.n	8004158 <__ieee754_pow+0x190>
 8004152:	f1b8 0f00 	cmp.w	r8, #0
 8004156:	d122      	bne.n	800419e <__ieee754_pow+0x1d6>
 8004158:	f1b9 0f00 	cmp.w	r9, #0
 800415c:	da05      	bge.n	800416a <__ieee754_pow+0x1a2>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	2000      	movs	r0, #0
 8004164:	493d      	ldr	r1, [pc, #244]	@ (800425c <__ieee754_pow+0x294>)
 8004166:	f7fc fb1d 	bl	80007a4 <__aeabi_ddiv>
 800416a:	2d00      	cmp	r5, #0
 800416c:	f6bf af49 	bge.w	8004002 <__ieee754_pow+0x3a>
 8004170:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8004174:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8004178:	ea58 0804 	orrs.w	r8, r8, r4
 800417c:	d108      	bne.n	8004190 <__ieee754_pow+0x1c8>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f7fc f82b 	bl	80001e0 <__aeabi_dsub>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	e794      	b.n	80040ba <__ieee754_pow+0xf2>
 8004190:	2c01      	cmp	r4, #1
 8004192:	f47f af36 	bne.w	8004002 <__ieee754_pow+0x3a>
 8004196:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800419a:	4619      	mov	r1, r3
 800419c:	e731      	b.n	8004002 <__ieee754_pow+0x3a>
 800419e:	0feb      	lsrs	r3, r5, #31
 80041a0:	3b01      	subs	r3, #1
 80041a2:	ea53 0204 	orrs.w	r2, r3, r4
 80041a6:	d102      	bne.n	80041ae <__ieee754_pow+0x1e6>
 80041a8:	4632      	mov	r2, r6
 80041aa:	463b      	mov	r3, r7
 80041ac:	e7e9      	b.n	8004182 <__ieee754_pow+0x1ba>
 80041ae:	3c01      	subs	r4, #1
 80041b0:	431c      	orrs	r4, r3
 80041b2:	d016      	beq.n	80041e2 <__ieee754_pow+0x21a>
 80041b4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8004240 <__ieee754_pow+0x278>
 80041b8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80041bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80041c0:	f240 8112 	bls.w	80043e8 <__ieee754_pow+0x420>
 80041c4:	4b28      	ldr	r3, [pc, #160]	@ (8004268 <__ieee754_pow+0x2a0>)
 80041c6:	459a      	cmp	sl, r3
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <__ieee754_pow+0x298>)
 80041ca:	d916      	bls.n	80041fa <__ieee754_pow+0x232>
 80041cc:	4598      	cmp	r8, r3
 80041ce:	d80b      	bhi.n	80041e8 <__ieee754_pow+0x220>
 80041d0:	f1b9 0f00 	cmp.w	r9, #0
 80041d4:	da0b      	bge.n	80041ee <__ieee754_pow+0x226>
 80041d6:	2000      	movs	r0, #0
 80041d8:	b011      	add	sp, #68	@ 0x44
 80041da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041de:	f001 b887 	b.w	80052f0 <__math_oflow>
 80041e2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8004248 <__ieee754_pow+0x280>
 80041e6:	e7e7      	b.n	80041b8 <__ieee754_pow+0x1f0>
 80041e8:	f1b9 0f00 	cmp.w	r9, #0
 80041ec:	dcf3      	bgt.n	80041d6 <__ieee754_pow+0x20e>
 80041ee:	2000      	movs	r0, #0
 80041f0:	b011      	add	sp, #68	@ 0x44
 80041f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f6:	f001 b873 	b.w	80052e0 <__math_uflow>
 80041fa:	4598      	cmp	r8, r3
 80041fc:	d20c      	bcs.n	8004218 <__ieee754_pow+0x250>
 80041fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004202:	2200      	movs	r2, #0
 8004204:	2300      	movs	r3, #0
 8004206:	f7fc fc15 	bl	8000a34 <__aeabi_dcmplt>
 800420a:	3800      	subs	r0, #0
 800420c:	bf18      	it	ne
 800420e:	2001      	movne	r0, #1
 8004210:	f1b9 0f00 	cmp.w	r9, #0
 8004214:	daec      	bge.n	80041f0 <__ieee754_pow+0x228>
 8004216:	e7df      	b.n	80041d8 <__ieee754_pow+0x210>
 8004218:	4b10      	ldr	r3, [pc, #64]	@ (800425c <__ieee754_pow+0x294>)
 800421a:	4598      	cmp	r8, r3
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	d924      	bls.n	800426c <__ieee754_pow+0x2a4>
 8004222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004226:	2300      	movs	r3, #0
 8004228:	f7fc fc04 	bl	8000a34 <__aeabi_dcmplt>
 800422c:	3800      	subs	r0, #0
 800422e:	bf18      	it	ne
 8004230:	2001      	movne	r0, #1
 8004232:	f1b9 0f00 	cmp.w	r9, #0
 8004236:	dccf      	bgt.n	80041d8 <__ieee754_pow+0x210>
 8004238:	e7da      	b.n	80041f0 <__ieee754_pow+0x228>
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
 8004240:	00000000 	.word	0x00000000
 8004244:	3ff00000 	.word	0x3ff00000
 8004248:	00000000 	.word	0x00000000
 800424c:	bff00000 	.word	0xbff00000
 8004250:	fff00000 	.word	0xfff00000
 8004254:	7ff00000 	.word	0x7ff00000
 8004258:	433fffff 	.word	0x433fffff
 800425c:	3ff00000 	.word	0x3ff00000
 8004260:	3fefffff 	.word	0x3fefffff
 8004264:	3fe00000 	.word	0x3fe00000
 8004268:	43f00000 	.word	0x43f00000
 800426c:	4b5a      	ldr	r3, [pc, #360]	@ (80043d8 <__ieee754_pow+0x410>)
 800426e:	f7fb ffb7 	bl	80001e0 <__aeabi_dsub>
 8004272:	a351      	add	r3, pc, #324	@ (adr r3, 80043b8 <__ieee754_pow+0x3f0>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	4604      	mov	r4, r0
 800427a:	460d      	mov	r5, r1
 800427c:	f7fc f968 	bl	8000550 <__aeabi_dmul>
 8004280:	a34f      	add	r3, pc, #316	@ (adr r3, 80043c0 <__ieee754_pow+0x3f8>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	4606      	mov	r6, r0
 8004288:	460f      	mov	r7, r1
 800428a:	4620      	mov	r0, r4
 800428c:	4629      	mov	r1, r5
 800428e:	f7fc f95f 	bl	8000550 <__aeabi_dmul>
 8004292:	4b52      	ldr	r3, [pc, #328]	@ (80043dc <__ieee754_pow+0x414>)
 8004294:	4682      	mov	sl, r0
 8004296:	468b      	mov	fp, r1
 8004298:	2200      	movs	r2, #0
 800429a:	4620      	mov	r0, r4
 800429c:	4629      	mov	r1, r5
 800429e:	f7fc f957 	bl	8000550 <__aeabi_dmul>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	a148      	add	r1, pc, #288	@ (adr r1, 80043c8 <__ieee754_pow+0x400>)
 80042a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ac:	f7fb ff98 	bl	80001e0 <__aeabi_dsub>
 80042b0:	4622      	mov	r2, r4
 80042b2:	462b      	mov	r3, r5
 80042b4:	f7fc f94c 	bl	8000550 <__aeabi_dmul>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	2000      	movs	r0, #0
 80042be:	4948      	ldr	r1, [pc, #288]	@ (80043e0 <__ieee754_pow+0x418>)
 80042c0:	f7fb ff8e 	bl	80001e0 <__aeabi_dsub>
 80042c4:	4622      	mov	r2, r4
 80042c6:	4680      	mov	r8, r0
 80042c8:	4689      	mov	r9, r1
 80042ca:	462b      	mov	r3, r5
 80042cc:	4620      	mov	r0, r4
 80042ce:	4629      	mov	r1, r5
 80042d0:	f7fc f93e 	bl	8000550 <__aeabi_dmul>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4640      	mov	r0, r8
 80042da:	4649      	mov	r1, r9
 80042dc:	f7fc f938 	bl	8000550 <__aeabi_dmul>
 80042e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80043d0 <__ieee754_pow+0x408>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f7fc f933 	bl	8000550 <__aeabi_dmul>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4650      	mov	r0, sl
 80042f0:	4659      	mov	r1, fp
 80042f2:	f7fb ff75 	bl	80001e0 <__aeabi_dsub>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4680      	mov	r8, r0
 80042fc:	4689      	mov	r9, r1
 80042fe:	4630      	mov	r0, r6
 8004300:	4639      	mov	r1, r7
 8004302:	f7fb ff6f 	bl	80001e4 <__adddf3>
 8004306:	2400      	movs	r4, #0
 8004308:	4632      	mov	r2, r6
 800430a:	463b      	mov	r3, r7
 800430c:	4620      	mov	r0, r4
 800430e:	460d      	mov	r5, r1
 8004310:	f7fb ff66 	bl	80001e0 <__aeabi_dsub>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4640      	mov	r0, r8
 800431a:	4649      	mov	r1, r9
 800431c:	f7fb ff60 	bl	80001e0 <__aeabi_dsub>
 8004320:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004324:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004328:	2300      	movs	r3, #0
 800432a:	9304      	str	r3, [sp, #16]
 800432c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004330:	4606      	mov	r6, r0
 8004332:	460f      	mov	r7, r1
 8004334:	4652      	mov	r2, sl
 8004336:	465b      	mov	r3, fp
 8004338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800433c:	f7fb ff50 	bl	80001e0 <__aeabi_dsub>
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	f7fc f904 	bl	8000550 <__aeabi_dmul>
 8004348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800434c:	4680      	mov	r8, r0
 800434e:	4689      	mov	r9, r1
 8004350:	4630      	mov	r0, r6
 8004352:	4639      	mov	r1, r7
 8004354:	f7fc f8fc 	bl	8000550 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4640      	mov	r0, r8
 800435e:	4649      	mov	r1, r9
 8004360:	f7fb ff40 	bl	80001e4 <__adddf3>
 8004364:	4652      	mov	r2, sl
 8004366:	465b      	mov	r3, fp
 8004368:	4606      	mov	r6, r0
 800436a:	460f      	mov	r7, r1
 800436c:	4620      	mov	r0, r4
 800436e:	4629      	mov	r1, r5
 8004370:	f7fc f8ee 	bl	8000550 <__aeabi_dmul>
 8004374:	460b      	mov	r3, r1
 8004376:	4602      	mov	r2, r0
 8004378:	4680      	mov	r8, r0
 800437a:	4689      	mov	r9, r1
 800437c:	4630      	mov	r0, r6
 800437e:	4639      	mov	r1, r7
 8004380:	f7fb ff30 	bl	80001e4 <__adddf3>
 8004384:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <__ieee754_pow+0x41c>)
 8004386:	4299      	cmp	r1, r3
 8004388:	4604      	mov	r4, r0
 800438a:	460d      	mov	r5, r1
 800438c:	468a      	mov	sl, r1
 800438e:	468b      	mov	fp, r1
 8004390:	f340 82ef 	ble.w	8004972 <__ieee754_pow+0x9aa>
 8004394:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004398:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800439c:	4303      	orrs	r3, r0
 800439e:	f000 81e8 	beq.w	8004772 <__ieee754_pow+0x7aa>
 80043a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2300      	movs	r3, #0
 80043aa:	f7fc fb43 	bl	8000a34 <__aeabi_dcmplt>
 80043ae:	3800      	subs	r0, #0
 80043b0:	bf18      	it	ne
 80043b2:	2001      	movne	r0, #1
 80043b4:	e710      	b.n	80041d8 <__ieee754_pow+0x210>
 80043b6:	bf00      	nop
 80043b8:	60000000 	.word	0x60000000
 80043bc:	3ff71547 	.word	0x3ff71547
 80043c0:	f85ddf44 	.word	0xf85ddf44
 80043c4:	3e54ae0b 	.word	0x3e54ae0b
 80043c8:	55555555 	.word	0x55555555
 80043cc:	3fd55555 	.word	0x3fd55555
 80043d0:	652b82fe 	.word	0x652b82fe
 80043d4:	3ff71547 	.word	0x3ff71547
 80043d8:	3ff00000 	.word	0x3ff00000
 80043dc:	3fd00000 	.word	0x3fd00000
 80043e0:	3fe00000 	.word	0x3fe00000
 80043e4:	408fffff 	.word	0x408fffff
 80043e8:	4bd5      	ldr	r3, [pc, #852]	@ (8004740 <__ieee754_pow+0x778>)
 80043ea:	402b      	ands	r3, r5
 80043ec:	2200      	movs	r2, #0
 80043ee:	b92b      	cbnz	r3, 80043fc <__ieee754_pow+0x434>
 80043f0:	4bd4      	ldr	r3, [pc, #848]	@ (8004744 <__ieee754_pow+0x77c>)
 80043f2:	f7fc f8ad 	bl	8000550 <__aeabi_dmul>
 80043f6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80043fa:	468b      	mov	fp, r1
 80043fc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8004400:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004404:	4413      	add	r3, r2
 8004406:	930a      	str	r3, [sp, #40]	@ 0x28
 8004408:	4bcf      	ldr	r3, [pc, #828]	@ (8004748 <__ieee754_pow+0x780>)
 800440a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800440e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8004412:	459b      	cmp	fp, r3
 8004414:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004418:	dd08      	ble.n	800442c <__ieee754_pow+0x464>
 800441a:	4bcc      	ldr	r3, [pc, #816]	@ (800474c <__ieee754_pow+0x784>)
 800441c:	459b      	cmp	fp, r3
 800441e:	f340 81a5 	ble.w	800476c <__ieee754_pow+0x7a4>
 8004422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004424:	3301      	adds	r3, #1
 8004426:	930a      	str	r3, [sp, #40]	@ 0x28
 8004428:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800442c:	f04f 0a00 	mov.w	sl, #0
 8004430:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004434:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004436:	4bc6      	ldr	r3, [pc, #792]	@ (8004750 <__ieee754_pow+0x788>)
 8004438:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800443c:	ed93 7b00 	vldr	d7, [r3]
 8004440:	4629      	mov	r1, r5
 8004442:	ec53 2b17 	vmov	r2, r3, d7
 8004446:	ed8d 7b06 	vstr	d7, [sp, #24]
 800444a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800444e:	f7fb fec7 	bl	80001e0 <__aeabi_dsub>
 8004452:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004456:	4606      	mov	r6, r0
 8004458:	460f      	mov	r7, r1
 800445a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800445e:	f7fb fec1 	bl	80001e4 <__adddf3>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	2000      	movs	r0, #0
 8004468:	49ba      	ldr	r1, [pc, #744]	@ (8004754 <__ieee754_pow+0x78c>)
 800446a:	f7fc f99b 	bl	80007a4 <__aeabi_ddiv>
 800446e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4630      	mov	r0, r6
 8004478:	4639      	mov	r1, r7
 800447a:	f7fc f869 	bl	8000550 <__aeabi_dmul>
 800447e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004482:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8004486:	106d      	asrs	r5, r5, #1
 8004488:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800448c:	f04f 0b00 	mov.w	fp, #0
 8004490:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004494:	4661      	mov	r1, ip
 8004496:	2200      	movs	r2, #0
 8004498:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800449c:	4658      	mov	r0, fp
 800449e:	46e1      	mov	r9, ip
 80044a0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80044a4:	4614      	mov	r4, r2
 80044a6:	461d      	mov	r5, r3
 80044a8:	f7fc f852 	bl	8000550 <__aeabi_dmul>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4630      	mov	r0, r6
 80044b2:	4639      	mov	r1, r7
 80044b4:	f7fb fe94 	bl	80001e0 <__aeabi_dsub>
 80044b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044bc:	4606      	mov	r6, r0
 80044be:	460f      	mov	r7, r1
 80044c0:	4620      	mov	r0, r4
 80044c2:	4629      	mov	r1, r5
 80044c4:	f7fb fe8c 	bl	80001e0 <__aeabi_dsub>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80044d0:	f7fb fe86 	bl	80001e0 <__aeabi_dsub>
 80044d4:	465a      	mov	r2, fp
 80044d6:	464b      	mov	r3, r9
 80044d8:	f7fc f83a 	bl	8000550 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4630      	mov	r0, r6
 80044e2:	4639      	mov	r1, r7
 80044e4:	f7fb fe7c 	bl	80001e0 <__aeabi_dsub>
 80044e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80044ec:	f7fc f830 	bl	8000550 <__aeabi_dmul>
 80044f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	f7fc f828 	bl	8000550 <__aeabi_dmul>
 8004500:	a37d      	add	r3, pc, #500	@ (adr r3, 80046f8 <__ieee754_pow+0x730>)
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	4604      	mov	r4, r0
 8004508:	460d      	mov	r5, r1
 800450a:	f7fc f821 	bl	8000550 <__aeabi_dmul>
 800450e:	a37c      	add	r3, pc, #496	@ (adr r3, 8004700 <__ieee754_pow+0x738>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fb fe66 	bl	80001e4 <__adddf3>
 8004518:	4622      	mov	r2, r4
 800451a:	462b      	mov	r3, r5
 800451c:	f7fc f818 	bl	8000550 <__aeabi_dmul>
 8004520:	a379      	add	r3, pc, #484	@ (adr r3, 8004708 <__ieee754_pow+0x740>)
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f7fb fe5d 	bl	80001e4 <__adddf3>
 800452a:	4622      	mov	r2, r4
 800452c:	462b      	mov	r3, r5
 800452e:	f7fc f80f 	bl	8000550 <__aeabi_dmul>
 8004532:	a377      	add	r3, pc, #476	@ (adr r3, 8004710 <__ieee754_pow+0x748>)
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f7fb fe54 	bl	80001e4 <__adddf3>
 800453c:	4622      	mov	r2, r4
 800453e:	462b      	mov	r3, r5
 8004540:	f7fc f806 	bl	8000550 <__aeabi_dmul>
 8004544:	a374      	add	r3, pc, #464	@ (adr r3, 8004718 <__ieee754_pow+0x750>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fb fe4b 	bl	80001e4 <__adddf3>
 800454e:	4622      	mov	r2, r4
 8004550:	462b      	mov	r3, r5
 8004552:	f7fb fffd 	bl	8000550 <__aeabi_dmul>
 8004556:	a372      	add	r3, pc, #456	@ (adr r3, 8004720 <__ieee754_pow+0x758>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fb fe42 	bl	80001e4 <__adddf3>
 8004560:	4622      	mov	r2, r4
 8004562:	4606      	mov	r6, r0
 8004564:	460f      	mov	r7, r1
 8004566:	462b      	mov	r3, r5
 8004568:	4620      	mov	r0, r4
 800456a:	4629      	mov	r1, r5
 800456c:	f7fb fff0 	bl	8000550 <__aeabi_dmul>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4630      	mov	r0, r6
 8004576:	4639      	mov	r1, r7
 8004578:	f7fb ffea 	bl	8000550 <__aeabi_dmul>
 800457c:	465a      	mov	r2, fp
 800457e:	4604      	mov	r4, r0
 8004580:	460d      	mov	r5, r1
 8004582:	464b      	mov	r3, r9
 8004584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004588:	f7fb fe2c 	bl	80001e4 <__adddf3>
 800458c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004590:	f7fb ffde 	bl	8000550 <__aeabi_dmul>
 8004594:	4622      	mov	r2, r4
 8004596:	462b      	mov	r3, r5
 8004598:	f7fb fe24 	bl	80001e4 <__adddf3>
 800459c:	465a      	mov	r2, fp
 800459e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80045a2:	464b      	mov	r3, r9
 80045a4:	4658      	mov	r0, fp
 80045a6:	4649      	mov	r1, r9
 80045a8:	f7fb ffd2 	bl	8000550 <__aeabi_dmul>
 80045ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004758 <__ieee754_pow+0x790>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	4606      	mov	r6, r0
 80045b2:	460f      	mov	r7, r1
 80045b4:	f7fb fe16 	bl	80001e4 <__adddf3>
 80045b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045bc:	f7fb fe12 	bl	80001e4 <__adddf3>
 80045c0:	46d8      	mov	r8, fp
 80045c2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80045c6:	460d      	mov	r5, r1
 80045c8:	465a      	mov	r2, fp
 80045ca:	460b      	mov	r3, r1
 80045cc:	4640      	mov	r0, r8
 80045ce:	4649      	mov	r1, r9
 80045d0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80045d4:	f7fb ffbc 	bl	8000550 <__aeabi_dmul>
 80045d8:	465c      	mov	r4, fp
 80045da:	4680      	mov	r8, r0
 80045dc:	4689      	mov	r9, r1
 80045de:	4b5e      	ldr	r3, [pc, #376]	@ (8004758 <__ieee754_pow+0x790>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	4620      	mov	r0, r4
 80045e4:	4629      	mov	r1, r5
 80045e6:	f7fb fdfb 	bl	80001e0 <__aeabi_dsub>
 80045ea:	4632      	mov	r2, r6
 80045ec:	463b      	mov	r3, r7
 80045ee:	f7fb fdf7 	bl	80001e0 <__aeabi_dsub>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80045fa:	f7fb fdf1 	bl	80001e0 <__aeabi_dsub>
 80045fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004602:	f7fb ffa5 	bl	8000550 <__aeabi_dmul>
 8004606:	4622      	mov	r2, r4
 8004608:	4606      	mov	r6, r0
 800460a:	460f      	mov	r7, r1
 800460c:	462b      	mov	r3, r5
 800460e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004612:	f7fb ff9d 	bl	8000550 <__aeabi_dmul>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4630      	mov	r0, r6
 800461c:	4639      	mov	r1, r7
 800461e:	f7fb fde1 	bl	80001e4 <__adddf3>
 8004622:	4606      	mov	r6, r0
 8004624:	460f      	mov	r7, r1
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4640      	mov	r0, r8
 800462c:	4649      	mov	r1, r9
 800462e:	f7fb fdd9 	bl	80001e4 <__adddf3>
 8004632:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8004636:	a33c      	add	r3, pc, #240	@ (adr r3, 8004728 <__ieee754_pow+0x760>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	4658      	mov	r0, fp
 800463e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8004642:	460d      	mov	r5, r1
 8004644:	f7fb ff84 	bl	8000550 <__aeabi_dmul>
 8004648:	465c      	mov	r4, fp
 800464a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800464e:	4642      	mov	r2, r8
 8004650:	464b      	mov	r3, r9
 8004652:	4620      	mov	r0, r4
 8004654:	4629      	mov	r1, r5
 8004656:	f7fb fdc3 	bl	80001e0 <__aeabi_dsub>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4630      	mov	r0, r6
 8004660:	4639      	mov	r1, r7
 8004662:	f7fb fdbd 	bl	80001e0 <__aeabi_dsub>
 8004666:	a332      	add	r3, pc, #200	@ (adr r3, 8004730 <__ieee754_pow+0x768>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f7fb ff70 	bl	8000550 <__aeabi_dmul>
 8004670:	a331      	add	r3, pc, #196	@ (adr r3, 8004738 <__ieee754_pow+0x770>)
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	4606      	mov	r6, r0
 8004678:	460f      	mov	r7, r1
 800467a:	4620      	mov	r0, r4
 800467c:	4629      	mov	r1, r5
 800467e:	f7fb ff67 	bl	8000550 <__aeabi_dmul>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4630      	mov	r0, r6
 8004688:	4639      	mov	r1, r7
 800468a:	f7fb fdab 	bl	80001e4 <__adddf3>
 800468e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004690:	4b32      	ldr	r3, [pc, #200]	@ (800475c <__ieee754_pow+0x794>)
 8004692:	4413      	add	r3, r2
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f7fb fda4 	bl	80001e4 <__adddf3>
 800469c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80046a2:	f7fb feeb 	bl	800047c <__aeabi_i2d>
 80046a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80046a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004760 <__ieee754_pow+0x798>)
 80046aa:	4413      	add	r3, r2
 80046ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046b0:	4606      	mov	r6, r0
 80046b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046b6:	460f      	mov	r7, r1
 80046b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046bc:	f7fb fd92 	bl	80001e4 <__adddf3>
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	f7fb fd8e 	bl	80001e4 <__adddf3>
 80046c8:	4632      	mov	r2, r6
 80046ca:	463b      	mov	r3, r7
 80046cc:	f7fb fd8a 	bl	80001e4 <__adddf3>
 80046d0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80046d4:	4632      	mov	r2, r6
 80046d6:	463b      	mov	r3, r7
 80046d8:	4658      	mov	r0, fp
 80046da:	460d      	mov	r5, r1
 80046dc:	f7fb fd80 	bl	80001e0 <__aeabi_dsub>
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	f7fb fd7c 	bl	80001e0 <__aeabi_dsub>
 80046e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046ec:	f7fb fd78 	bl	80001e0 <__aeabi_dsub>
 80046f0:	465c      	mov	r4, fp
 80046f2:	4602      	mov	r2, r0
 80046f4:	e036      	b.n	8004764 <__ieee754_pow+0x79c>
 80046f6:	bf00      	nop
 80046f8:	4a454eef 	.word	0x4a454eef
 80046fc:	3fca7e28 	.word	0x3fca7e28
 8004700:	93c9db65 	.word	0x93c9db65
 8004704:	3fcd864a 	.word	0x3fcd864a
 8004708:	a91d4101 	.word	0xa91d4101
 800470c:	3fd17460 	.word	0x3fd17460
 8004710:	518f264d 	.word	0x518f264d
 8004714:	3fd55555 	.word	0x3fd55555
 8004718:	db6fabff 	.word	0xdb6fabff
 800471c:	3fdb6db6 	.word	0x3fdb6db6
 8004720:	33333303 	.word	0x33333303
 8004724:	3fe33333 	.word	0x3fe33333
 8004728:	e0000000 	.word	0xe0000000
 800472c:	3feec709 	.word	0x3feec709
 8004730:	dc3a03fd 	.word	0xdc3a03fd
 8004734:	3feec709 	.word	0x3feec709
 8004738:	145b01f5 	.word	0x145b01f5
 800473c:	be3e2fe0 	.word	0xbe3e2fe0
 8004740:	7ff00000 	.word	0x7ff00000
 8004744:	43400000 	.word	0x43400000
 8004748:	0003988e 	.word	0x0003988e
 800474c:	000bb679 	.word	0x000bb679
 8004750:	08005b10 	.word	0x08005b10
 8004754:	3ff00000 	.word	0x3ff00000
 8004758:	40080000 	.word	0x40080000
 800475c:	08005af0 	.word	0x08005af0
 8004760:	08005b00 	.word	0x08005b00
 8004764:	460b      	mov	r3, r1
 8004766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800476a:	e5d7      	b.n	800431c <__ieee754_pow+0x354>
 800476c:	f04f 0a01 	mov.w	sl, #1
 8004770:	e65e      	b.n	8004430 <__ieee754_pow+0x468>
 8004772:	a3b4      	add	r3, pc, #720	@ (adr r3, 8004a44 <__ieee754_pow+0xa7c>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	4630      	mov	r0, r6
 800477a:	4639      	mov	r1, r7
 800477c:	f7fb fd32 	bl	80001e4 <__adddf3>
 8004780:	4642      	mov	r2, r8
 8004782:	e9cd 0100 	strd	r0, r1, [sp]
 8004786:	464b      	mov	r3, r9
 8004788:	4620      	mov	r0, r4
 800478a:	4629      	mov	r1, r5
 800478c:	f7fb fd28 	bl	80001e0 <__aeabi_dsub>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004798:	f7fc f96a 	bl	8000a70 <__aeabi_dcmpgt>
 800479c:	2800      	cmp	r0, #0
 800479e:	f47f ae00 	bne.w	80043a2 <__ieee754_pow+0x3da>
 80047a2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80047a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80047aa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80047ae:	fa43 fa0a 	asr.w	sl, r3, sl
 80047b2:	44da      	add	sl, fp
 80047b4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80047b8:	489d      	ldr	r0, [pc, #628]	@ (8004a30 <__ieee754_pow+0xa68>)
 80047ba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80047be:	4108      	asrs	r0, r1
 80047c0:	ea00 030a 	and.w	r3, r0, sl
 80047c4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80047c8:	f1c1 0114 	rsb	r1, r1, #20
 80047cc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80047d0:	fa4a fa01 	asr.w	sl, sl, r1
 80047d4:	f1bb 0f00 	cmp.w	fp, #0
 80047d8:	4640      	mov	r0, r8
 80047da:	4649      	mov	r1, r9
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	bfb8      	it	lt
 80047e2:	f1ca 0a00 	rsblt	sl, sl, #0
 80047e6:	f7fb fcfb 	bl	80001e0 <__aeabi_dsub>
 80047ea:	4680      	mov	r8, r0
 80047ec:	4689      	mov	r9, r1
 80047ee:	4632      	mov	r2, r6
 80047f0:	463b      	mov	r3, r7
 80047f2:	4640      	mov	r0, r8
 80047f4:	4649      	mov	r1, r9
 80047f6:	f7fb fcf5 	bl	80001e4 <__adddf3>
 80047fa:	2400      	movs	r4, #0
 80047fc:	a37c      	add	r3, pc, #496	@ (adr r3, 80049f0 <__ieee754_pow+0xa28>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	4620      	mov	r0, r4
 8004804:	460d      	mov	r5, r1
 8004806:	f7fb fea3 	bl	8000550 <__aeabi_dmul>
 800480a:	4642      	mov	r2, r8
 800480c:	e9cd 0100 	strd	r0, r1, [sp]
 8004810:	464b      	mov	r3, r9
 8004812:	4620      	mov	r0, r4
 8004814:	4629      	mov	r1, r5
 8004816:	f7fb fce3 	bl	80001e0 <__aeabi_dsub>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4630      	mov	r0, r6
 8004820:	4639      	mov	r1, r7
 8004822:	f7fb fcdd 	bl	80001e0 <__aeabi_dsub>
 8004826:	a374      	add	r3, pc, #464	@ (adr r3, 80049f8 <__ieee754_pow+0xa30>)
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f7fb fe90 	bl	8000550 <__aeabi_dmul>
 8004830:	a373      	add	r3, pc, #460	@ (adr r3, 8004a00 <__ieee754_pow+0xa38>)
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	4680      	mov	r8, r0
 8004838:	4689      	mov	r9, r1
 800483a:	4620      	mov	r0, r4
 800483c:	4629      	mov	r1, r5
 800483e:	f7fb fe87 	bl	8000550 <__aeabi_dmul>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4640      	mov	r0, r8
 8004848:	4649      	mov	r1, r9
 800484a:	f7fb fccb 	bl	80001e4 <__adddf3>
 800484e:	4604      	mov	r4, r0
 8004850:	460d      	mov	r5, r1
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800485a:	f7fb fcc3 	bl	80001e4 <__adddf3>
 800485e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004862:	4680      	mov	r8, r0
 8004864:	4689      	mov	r9, r1
 8004866:	f7fb fcbb 	bl	80001e0 <__aeabi_dsub>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fb fcb5 	bl	80001e0 <__aeabi_dsub>
 8004876:	4642      	mov	r2, r8
 8004878:	4606      	mov	r6, r0
 800487a:	460f      	mov	r7, r1
 800487c:	464b      	mov	r3, r9
 800487e:	4640      	mov	r0, r8
 8004880:	4649      	mov	r1, r9
 8004882:	f7fb fe65 	bl	8000550 <__aeabi_dmul>
 8004886:	a360      	add	r3, pc, #384	@ (adr r3, 8004a08 <__ieee754_pow+0xa40>)
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	4604      	mov	r4, r0
 800488e:	460d      	mov	r5, r1
 8004890:	f7fb fe5e 	bl	8000550 <__aeabi_dmul>
 8004894:	a35e      	add	r3, pc, #376	@ (adr r3, 8004a10 <__ieee754_pow+0xa48>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f7fb fca1 	bl	80001e0 <__aeabi_dsub>
 800489e:	4622      	mov	r2, r4
 80048a0:	462b      	mov	r3, r5
 80048a2:	f7fb fe55 	bl	8000550 <__aeabi_dmul>
 80048a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8004a18 <__ieee754_pow+0xa50>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fb fc9a 	bl	80001e4 <__adddf3>
 80048b0:	4622      	mov	r2, r4
 80048b2:	462b      	mov	r3, r5
 80048b4:	f7fb fe4c 	bl	8000550 <__aeabi_dmul>
 80048b8:	a359      	add	r3, pc, #356	@ (adr r3, 8004a20 <__ieee754_pow+0xa58>)
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f7fb fc8f 	bl	80001e0 <__aeabi_dsub>
 80048c2:	4622      	mov	r2, r4
 80048c4:	462b      	mov	r3, r5
 80048c6:	f7fb fe43 	bl	8000550 <__aeabi_dmul>
 80048ca:	a357      	add	r3, pc, #348	@ (adr r3, 8004a28 <__ieee754_pow+0xa60>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f7fb fc88 	bl	80001e4 <__adddf3>
 80048d4:	4622      	mov	r2, r4
 80048d6:	462b      	mov	r3, r5
 80048d8:	f7fb fe3a 	bl	8000550 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4640      	mov	r0, r8
 80048e2:	4649      	mov	r1, r9
 80048e4:	f7fb fc7c 	bl	80001e0 <__aeabi_dsub>
 80048e8:	4604      	mov	r4, r0
 80048ea:	460d      	mov	r5, r1
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4640      	mov	r0, r8
 80048f2:	4649      	mov	r1, r9
 80048f4:	f7fb fe2c 	bl	8000550 <__aeabi_dmul>
 80048f8:	2200      	movs	r2, #0
 80048fa:	e9cd 0100 	strd	r0, r1, [sp]
 80048fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004902:	4620      	mov	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	f7fb fc6b 	bl	80001e0 <__aeabi_dsub>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004912:	f7fb ff47 	bl	80007a4 <__aeabi_ddiv>
 8004916:	4632      	mov	r2, r6
 8004918:	4604      	mov	r4, r0
 800491a:	460d      	mov	r5, r1
 800491c:	463b      	mov	r3, r7
 800491e:	4640      	mov	r0, r8
 8004920:	4649      	mov	r1, r9
 8004922:	f7fb fe15 	bl	8000550 <__aeabi_dmul>
 8004926:	4632      	mov	r2, r6
 8004928:	463b      	mov	r3, r7
 800492a:	f7fb fc5b 	bl	80001e4 <__adddf3>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4620      	mov	r0, r4
 8004934:	4629      	mov	r1, r5
 8004936:	f7fb fc53 	bl	80001e0 <__aeabi_dsub>
 800493a:	4642      	mov	r2, r8
 800493c:	464b      	mov	r3, r9
 800493e:	f7fb fc4f 	bl	80001e0 <__aeabi_dsub>
 8004942:	460b      	mov	r3, r1
 8004944:	4602      	mov	r2, r0
 8004946:	493b      	ldr	r1, [pc, #236]	@ (8004a34 <__ieee754_pow+0xa6c>)
 8004948:	2000      	movs	r0, #0
 800494a:	f7fb fc49 	bl	80001e0 <__aeabi_dsub>
 800494e:	ec41 0b10 	vmov	d0, r0, r1
 8004952:	ee10 3a90 	vmov	r3, s1
 8004956:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800495e:	da30      	bge.n	80049c2 <__ieee754_pow+0x9fa>
 8004960:	4650      	mov	r0, sl
 8004962:	f000 fc11 	bl	8005188 <scalbn>
 8004966:	ec51 0b10 	vmov	r0, r1, d0
 800496a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800496e:	f7ff bbd2 	b.w	8004116 <__ieee754_pow+0x14e>
 8004972:	4c31      	ldr	r4, [pc, #196]	@ (8004a38 <__ieee754_pow+0xa70>)
 8004974:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004978:	42a3      	cmp	r3, r4
 800497a:	d91a      	bls.n	80049b2 <__ieee754_pow+0x9ea>
 800497c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <__ieee754_pow+0xa74>)
 800497e:	440b      	add	r3, r1
 8004980:	4303      	orrs	r3, r0
 8004982:	d009      	beq.n	8004998 <__ieee754_pow+0x9d0>
 8004984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004988:	2200      	movs	r2, #0
 800498a:	2300      	movs	r3, #0
 800498c:	f7fc f852 	bl	8000a34 <__aeabi_dcmplt>
 8004990:	3800      	subs	r0, #0
 8004992:	bf18      	it	ne
 8004994:	2001      	movne	r0, #1
 8004996:	e42b      	b.n	80041f0 <__ieee754_pow+0x228>
 8004998:	4642      	mov	r2, r8
 800499a:	464b      	mov	r3, r9
 800499c:	f7fb fc20 	bl	80001e0 <__aeabi_dsub>
 80049a0:	4632      	mov	r2, r6
 80049a2:	463b      	mov	r3, r7
 80049a4:	f7fc f85a 	bl	8000a5c <__aeabi_dcmpge>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d1eb      	bne.n	8004984 <__ieee754_pow+0x9bc>
 80049ac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8004a4c <__ieee754_pow+0xa84>
 80049b0:	e6f7      	b.n	80047a2 <__ieee754_pow+0x7da>
 80049b2:	469a      	mov	sl, r3
 80049b4:	4b22      	ldr	r3, [pc, #136]	@ (8004a40 <__ieee754_pow+0xa78>)
 80049b6:	459a      	cmp	sl, r3
 80049b8:	f63f aef3 	bhi.w	80047a2 <__ieee754_pow+0x7da>
 80049bc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80049c0:	e715      	b.n	80047ee <__ieee754_pow+0x826>
 80049c2:	ec51 0b10 	vmov	r0, r1, d0
 80049c6:	4619      	mov	r1, r3
 80049c8:	e7cf      	b.n	800496a <__ieee754_pow+0x9a2>
 80049ca:	491a      	ldr	r1, [pc, #104]	@ (8004a34 <__ieee754_pow+0xa6c>)
 80049cc:	2000      	movs	r0, #0
 80049ce:	f7ff bb18 	b.w	8004002 <__ieee754_pow+0x3a>
 80049d2:	2000      	movs	r0, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	f7ff bb14 	b.w	8004002 <__ieee754_pow+0x3a>
 80049da:	4630      	mov	r0, r6
 80049dc:	4639      	mov	r1, r7
 80049de:	f7ff bb10 	b.w	8004002 <__ieee754_pow+0x3a>
 80049e2:	460c      	mov	r4, r1
 80049e4:	f7ff bb5e 	b.w	80040a4 <__ieee754_pow+0xdc>
 80049e8:	2400      	movs	r4, #0
 80049ea:	f7ff bb49 	b.w	8004080 <__ieee754_pow+0xb8>
 80049ee:	bf00      	nop
 80049f0:	00000000 	.word	0x00000000
 80049f4:	3fe62e43 	.word	0x3fe62e43
 80049f8:	fefa39ef 	.word	0xfefa39ef
 80049fc:	3fe62e42 	.word	0x3fe62e42
 8004a00:	0ca86c39 	.word	0x0ca86c39
 8004a04:	be205c61 	.word	0xbe205c61
 8004a08:	72bea4d0 	.word	0x72bea4d0
 8004a0c:	3e663769 	.word	0x3e663769
 8004a10:	c5d26bf1 	.word	0xc5d26bf1
 8004a14:	3ebbbd41 	.word	0x3ebbbd41
 8004a18:	af25de2c 	.word	0xaf25de2c
 8004a1c:	3f11566a 	.word	0x3f11566a
 8004a20:	16bebd93 	.word	0x16bebd93
 8004a24:	3f66c16c 	.word	0x3f66c16c
 8004a28:	5555553e 	.word	0x5555553e
 8004a2c:	3fc55555 	.word	0x3fc55555
 8004a30:	fff00000 	.word	0xfff00000
 8004a34:	3ff00000 	.word	0x3ff00000
 8004a38:	4090cbff 	.word	0x4090cbff
 8004a3c:	3f6f3400 	.word	0x3f6f3400
 8004a40:	3fe00000 	.word	0x3fe00000
 8004a44:	652b82fe 	.word	0x652b82fe
 8004a48:	3c971547 	.word	0x3c971547
 8004a4c:	4090cc00 	.word	0x4090cc00

08004a50 <__ieee754_rem_pio2>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	ec57 6b10 	vmov	r6, r7, d0
 8004a58:	4bc5      	ldr	r3, [pc, #788]	@ (8004d70 <__ieee754_rem_pio2+0x320>)
 8004a5a:	b08d      	sub	sp, #52	@ 0x34
 8004a5c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004a60:	4598      	cmp	r8, r3
 8004a62:	4604      	mov	r4, r0
 8004a64:	9704      	str	r7, [sp, #16]
 8004a66:	d807      	bhi.n	8004a78 <__ieee754_rem_pio2+0x28>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	ed80 0b00 	vstr	d0, [r0]
 8004a70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004a74:	2500      	movs	r5, #0
 8004a76:	e028      	b.n	8004aca <__ieee754_rem_pio2+0x7a>
 8004a78:	4bbe      	ldr	r3, [pc, #760]	@ (8004d74 <__ieee754_rem_pio2+0x324>)
 8004a7a:	4598      	cmp	r8, r3
 8004a7c:	d878      	bhi.n	8004b70 <__ieee754_rem_pio2+0x120>
 8004a7e:	9b04      	ldr	r3, [sp, #16]
 8004a80:	4dbd      	ldr	r5, [pc, #756]	@ (8004d78 <__ieee754_rem_pio2+0x328>)
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	4630      	mov	r0, r6
 8004a86:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004d38 <__ieee754_rem_pio2+0x2e8>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	4639      	mov	r1, r7
 8004a8e:	dd38      	ble.n	8004b02 <__ieee754_rem_pio2+0xb2>
 8004a90:	f7fb fba6 	bl	80001e0 <__aeabi_dsub>
 8004a94:	45a8      	cmp	r8, r5
 8004a96:	4606      	mov	r6, r0
 8004a98:	460f      	mov	r7, r1
 8004a9a:	d01a      	beq.n	8004ad2 <__ieee754_rem_pio2+0x82>
 8004a9c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004d40 <__ieee754_rem_pio2+0x2f0>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f7fb fb9d 	bl	80001e0 <__aeabi_dsub>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4680      	mov	r8, r0
 8004aac:	4689      	mov	r9, r1
 8004aae:	4630      	mov	r0, r6
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	f7fb fb95 	bl	80001e0 <__aeabi_dsub>
 8004ab6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004d40 <__ieee754_rem_pio2+0x2f0>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f7fb fb90 	bl	80001e0 <__aeabi_dsub>
 8004ac0:	e9c4 8900 	strd	r8, r9, [r4]
 8004ac4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ac8:	2501      	movs	r5, #1
 8004aca:	4628      	mov	r0, r5
 8004acc:	b00d      	add	sp, #52	@ 0x34
 8004ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad2:	a39d      	add	r3, pc, #628	@ (adr r3, 8004d48 <__ieee754_rem_pio2+0x2f8>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fb82 	bl	80001e0 <__aeabi_dsub>
 8004adc:	a39c      	add	r3, pc, #624	@ (adr r3, 8004d50 <__ieee754_rem_pio2+0x300>)
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460f      	mov	r7, r1
 8004ae6:	f7fb fb7b 	bl	80001e0 <__aeabi_dsub>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4680      	mov	r8, r0
 8004af0:	4689      	mov	r9, r1
 8004af2:	4630      	mov	r0, r6
 8004af4:	4639      	mov	r1, r7
 8004af6:	f7fb fb73 	bl	80001e0 <__aeabi_dsub>
 8004afa:	a395      	add	r3, pc, #596	@ (adr r3, 8004d50 <__ieee754_rem_pio2+0x300>)
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	e7dc      	b.n	8004abc <__ieee754_rem_pio2+0x6c>
 8004b02:	f7fb fb6f 	bl	80001e4 <__adddf3>
 8004b06:	45a8      	cmp	r8, r5
 8004b08:	4606      	mov	r6, r0
 8004b0a:	460f      	mov	r7, r1
 8004b0c:	d018      	beq.n	8004b40 <__ieee754_rem_pio2+0xf0>
 8004b0e:	a38c      	add	r3, pc, #560	@ (adr r3, 8004d40 <__ieee754_rem_pio2+0x2f0>)
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f7fb fb66 	bl	80001e4 <__adddf3>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4680      	mov	r8, r0
 8004b1e:	4689      	mov	r9, r1
 8004b20:	4630      	mov	r0, r6
 8004b22:	4639      	mov	r1, r7
 8004b24:	f7fb fb5c 	bl	80001e0 <__aeabi_dsub>
 8004b28:	a385      	add	r3, pc, #532	@ (adr r3, 8004d40 <__ieee754_rem_pio2+0x2f0>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f7fb fb59 	bl	80001e4 <__adddf3>
 8004b32:	f04f 35ff 	mov.w	r5, #4294967295
 8004b36:	e9c4 8900 	strd	r8, r9, [r4]
 8004b3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b3e:	e7c4      	b.n	8004aca <__ieee754_rem_pio2+0x7a>
 8004b40:	a381      	add	r3, pc, #516	@ (adr r3, 8004d48 <__ieee754_rem_pio2+0x2f8>)
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f7fb fb4d 	bl	80001e4 <__adddf3>
 8004b4a:	a381      	add	r3, pc, #516	@ (adr r3, 8004d50 <__ieee754_rem_pio2+0x300>)
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	4606      	mov	r6, r0
 8004b52:	460f      	mov	r7, r1
 8004b54:	f7fb fb46 	bl	80001e4 <__adddf3>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	4689      	mov	r9, r1
 8004b60:	4630      	mov	r0, r6
 8004b62:	4639      	mov	r1, r7
 8004b64:	f7fb fb3c 	bl	80001e0 <__aeabi_dsub>
 8004b68:	a379      	add	r3, pc, #484	@ (adr r3, 8004d50 <__ieee754_rem_pio2+0x300>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	e7de      	b.n	8004b2e <__ieee754_rem_pio2+0xde>
 8004b70:	4b82      	ldr	r3, [pc, #520]	@ (8004d7c <__ieee754_rem_pio2+0x32c>)
 8004b72:	4598      	cmp	r8, r3
 8004b74:	f200 80d1 	bhi.w	8004d1a <__ieee754_rem_pio2+0x2ca>
 8004b78:	f000 fafe 	bl	8005178 <fabs>
 8004b7c:	ec57 6b10 	vmov	r6, r7, d0
 8004b80:	a375      	add	r3, pc, #468	@ (adr r3, 8004d58 <__ieee754_rem_pio2+0x308>)
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	4630      	mov	r0, r6
 8004b88:	4639      	mov	r1, r7
 8004b8a:	f7fb fce1 	bl	8000550 <__aeabi_dmul>
 8004b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d80 <__ieee754_rem_pio2+0x330>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	f7fb fb27 	bl	80001e4 <__adddf3>
 8004b96:	f7fb ff8b 	bl	8000ab0 <__aeabi_d2iz>
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	f7fb fc6e 	bl	800047c <__aeabi_i2d>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ba8:	a363      	add	r3, pc, #396	@ (adr r3, 8004d38 <__ieee754_rem_pio2+0x2e8>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fccf 	bl	8000550 <__aeabi_dmul>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	4639      	mov	r1, r7
 8004bba:	f7fb fb11 	bl	80001e0 <__aeabi_dsub>
 8004bbe:	a360      	add	r3, pc, #384	@ (adr r3, 8004d40 <__ieee754_rem_pio2+0x2f0>)
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	468b      	mov	fp, r1
 8004bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bcc:	f7fb fcc0 	bl	8000550 <__aeabi_dmul>
 8004bd0:	2d1f      	cmp	r5, #31
 8004bd2:	4606      	mov	r6, r0
 8004bd4:	460f      	mov	r7, r1
 8004bd6:	dc0c      	bgt.n	8004bf2 <__ieee754_rem_pio2+0x1a2>
 8004bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8004d84 <__ieee754_rem_pio2+0x334>)
 8004bda:	1e6a      	subs	r2, r5, #1
 8004bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be0:	4543      	cmp	r3, r8
 8004be2:	d006      	beq.n	8004bf2 <__ieee754_rem_pio2+0x1a2>
 8004be4:	4632      	mov	r2, r6
 8004be6:	463b      	mov	r3, r7
 8004be8:	4650      	mov	r0, sl
 8004bea:	4659      	mov	r1, fp
 8004bec:	f7fb faf8 	bl	80001e0 <__aeabi_dsub>
 8004bf0:	e00e      	b.n	8004c10 <__ieee754_rem_pio2+0x1c0>
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	f7fb faf1 	bl	80001e0 <__aeabi_dsub>
 8004bfe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c08:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	dc02      	bgt.n	8004c16 <__ieee754_rem_pio2+0x1c6>
 8004c10:	e9c4 0100 	strd	r0, r1, [r4]
 8004c14:	e039      	b.n	8004c8a <__ieee754_rem_pio2+0x23a>
 8004c16:	a34c      	add	r3, pc, #304	@ (adr r3, 8004d48 <__ieee754_rem_pio2+0x2f8>)
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c20:	f7fb fc96 	bl	8000550 <__aeabi_dmul>
 8004c24:	4606      	mov	r6, r0
 8004c26:	460f      	mov	r7, r1
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4650      	mov	r0, sl
 8004c2e:	4659      	mov	r1, fp
 8004c30:	f7fb fad6 	bl	80001e0 <__aeabi_dsub>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4680      	mov	r8, r0
 8004c3a:	4689      	mov	r9, r1
 8004c3c:	4650      	mov	r0, sl
 8004c3e:	4659      	mov	r1, fp
 8004c40:	f7fb face 	bl	80001e0 <__aeabi_dsub>
 8004c44:	4632      	mov	r2, r6
 8004c46:	463b      	mov	r3, r7
 8004c48:	f7fb faca 	bl	80001e0 <__aeabi_dsub>
 8004c4c:	a340      	add	r3, pc, #256	@ (adr r3, 8004d50 <__ieee754_rem_pio2+0x300>)
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	4606      	mov	r6, r0
 8004c54:	460f      	mov	r7, r1
 8004c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c5a:	f7fb fc79 	bl	8000550 <__aeabi_dmul>
 8004c5e:	4632      	mov	r2, r6
 8004c60:	463b      	mov	r3, r7
 8004c62:	f7fb fabd 	bl	80001e0 <__aeabi_dsub>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	460f      	mov	r7, r1
 8004c6e:	4640      	mov	r0, r8
 8004c70:	4649      	mov	r1, r9
 8004c72:	f7fb fab5 	bl	80001e0 <__aeabi_dsub>
 8004c76:	9a05      	ldr	r2, [sp, #20]
 8004c78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b31      	cmp	r3, #49	@ 0x31
 8004c80:	dc20      	bgt.n	8004cc4 <__ieee754_rem_pio2+0x274>
 8004c82:	e9c4 0100 	strd	r0, r1, [r4]
 8004c86:	46c2      	mov	sl, r8
 8004c88:	46cb      	mov	fp, r9
 8004c8a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004c8e:	4650      	mov	r0, sl
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	4659      	mov	r1, fp
 8004c96:	f7fb faa3 	bl	80001e0 <__aeabi_dsub>
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	4632      	mov	r2, r6
 8004c9e:	f7fb fa9f 	bl	80001e0 <__aeabi_dsub>
 8004ca2:	9b04      	ldr	r3, [sp, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004caa:	f6bf af0e 	bge.w	8004aca <__ieee754_rem_pio2+0x7a>
 8004cae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004cb2:	6063      	str	r3, [r4, #4]
 8004cb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004cb8:	f8c4 8000 	str.w	r8, [r4]
 8004cbc:	60a0      	str	r0, [r4, #8]
 8004cbe:	60e3      	str	r3, [r4, #12]
 8004cc0:	426d      	negs	r5, r5
 8004cc2:	e702      	b.n	8004aca <__ieee754_rem_pio2+0x7a>
 8004cc4:	a326      	add	r3, pc, #152	@ (adr r3, 8004d60 <__ieee754_rem_pio2+0x310>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cce:	f7fb fc3f 	bl	8000550 <__aeabi_dmul>
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	460f      	mov	r7, r1
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4640      	mov	r0, r8
 8004cdc:	4649      	mov	r1, r9
 8004cde:	f7fb fa7f 	bl	80001e0 <__aeabi_dsub>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4682      	mov	sl, r0
 8004ce8:	468b      	mov	fp, r1
 8004cea:	4640      	mov	r0, r8
 8004cec:	4649      	mov	r1, r9
 8004cee:	f7fb fa77 	bl	80001e0 <__aeabi_dsub>
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	f7fb fa73 	bl	80001e0 <__aeabi_dsub>
 8004cfa:	a31b      	add	r3, pc, #108	@ (adr r3, 8004d68 <__ieee754_rem_pio2+0x318>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	4606      	mov	r6, r0
 8004d02:	460f      	mov	r7, r1
 8004d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d08:	f7fb fc22 	bl	8000550 <__aeabi_dmul>
 8004d0c:	4632      	mov	r2, r6
 8004d0e:	463b      	mov	r3, r7
 8004d10:	f7fb fa66 	bl	80001e0 <__aeabi_dsub>
 8004d14:	4606      	mov	r6, r0
 8004d16:	460f      	mov	r7, r1
 8004d18:	e764      	b.n	8004be4 <__ieee754_rem_pio2+0x194>
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <__ieee754_rem_pio2+0x338>)
 8004d1c:	4598      	cmp	r8, r3
 8004d1e:	d935      	bls.n	8004d8c <__ieee754_rem_pio2+0x33c>
 8004d20:	4632      	mov	r2, r6
 8004d22:	463b      	mov	r3, r7
 8004d24:	4630      	mov	r0, r6
 8004d26:	4639      	mov	r1, r7
 8004d28:	f7fb fa5a 	bl	80001e0 <__aeabi_dsub>
 8004d2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d30:	e9c4 0100 	strd	r0, r1, [r4]
 8004d34:	e69e      	b.n	8004a74 <__ieee754_rem_pio2+0x24>
 8004d36:	bf00      	nop
 8004d38:	54400000 	.word	0x54400000
 8004d3c:	3ff921fb 	.word	0x3ff921fb
 8004d40:	1a626331 	.word	0x1a626331
 8004d44:	3dd0b461 	.word	0x3dd0b461
 8004d48:	1a600000 	.word	0x1a600000
 8004d4c:	3dd0b461 	.word	0x3dd0b461
 8004d50:	2e037073 	.word	0x2e037073
 8004d54:	3ba3198a 	.word	0x3ba3198a
 8004d58:	6dc9c883 	.word	0x6dc9c883
 8004d5c:	3fe45f30 	.word	0x3fe45f30
 8004d60:	2e000000 	.word	0x2e000000
 8004d64:	3ba3198a 	.word	0x3ba3198a
 8004d68:	252049c1 	.word	0x252049c1
 8004d6c:	397b839a 	.word	0x397b839a
 8004d70:	3fe921fb 	.word	0x3fe921fb
 8004d74:	4002d97b 	.word	0x4002d97b
 8004d78:	3ff921fb 	.word	0x3ff921fb
 8004d7c:	413921fb 	.word	0x413921fb
 8004d80:	3fe00000 	.word	0x3fe00000
 8004d84:	08005b20 	.word	0x08005b20
 8004d88:	7fefffff 	.word	0x7fefffff
 8004d8c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004d90:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004d94:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004d98:	4630      	mov	r0, r6
 8004d9a:	460f      	mov	r7, r1
 8004d9c:	f7fb fe88 	bl	8000ab0 <__aeabi_d2iz>
 8004da0:	f7fb fb6c 	bl	800047c <__aeabi_i2d>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004db0:	f7fb fa16 	bl	80001e0 <__aeabi_dsub>
 8004db4:	4b22      	ldr	r3, [pc, #136]	@ (8004e40 <__ieee754_rem_pio2+0x3f0>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	f7fb fbca 	bl	8000550 <__aeabi_dmul>
 8004dbc:	460f      	mov	r7, r1
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	f7fb fe76 	bl	8000ab0 <__aeabi_d2iz>
 8004dc4:	f7fb fb5a 	bl	800047c <__aeabi_i2d>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4630      	mov	r0, r6
 8004dce:	4639      	mov	r1, r7
 8004dd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004dd4:	f7fb fa04 	bl	80001e0 <__aeabi_dsub>
 8004dd8:	4b19      	ldr	r3, [pc, #100]	@ (8004e40 <__ieee754_rem_pio2+0x3f0>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f7fb fbb8 	bl	8000550 <__aeabi_dmul>
 8004de0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004de4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004de8:	f04f 0803 	mov.w	r8, #3
 8004dec:	2600      	movs	r6, #0
 8004dee:	2700      	movs	r7, #0
 8004df0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004df4:	4632      	mov	r2, r6
 8004df6:	463b      	mov	r3, r7
 8004df8:	46c2      	mov	sl, r8
 8004dfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dfe:	f7fb fe0f 	bl	8000a20 <__aeabi_dcmpeq>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d1f4      	bne.n	8004df0 <__ieee754_rem_pio2+0x3a0>
 8004e06:	4b0f      	ldr	r3, [pc, #60]	@ (8004e44 <__ieee754_rem_pio2+0x3f4>)
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	462a      	mov	r2, r5
 8004e10:	4653      	mov	r3, sl
 8004e12:	4621      	mov	r1, r4
 8004e14:	a806      	add	r0, sp, #24
 8004e16:	f000 fa73 	bl	8005300 <__kernel_rem_pio2>
 8004e1a:	9b04      	ldr	r3, [sp, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	4605      	mov	r5, r0
 8004e20:	f6bf ae53 	bge.w	8004aca <__ieee754_rem_pio2+0x7a>
 8004e24:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004e28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e2c:	e9c4 2300 	strd	r2, r3, [r4]
 8004e30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e38:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004e3c:	e740      	b.n	8004cc0 <__ieee754_rem_pio2+0x270>
 8004e3e:	bf00      	nop
 8004e40:	41700000 	.word	0x41700000
 8004e44:	08005ba0 	.word	0x08005ba0

08004e48 <atan>:
 8004e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	ec55 4b10 	vmov	r4, r5, d0
 8004e50:	4bbf      	ldr	r3, [pc, #764]	@ (8005150 <atan+0x308>)
 8004e52:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8004e56:	429e      	cmp	r6, r3
 8004e58:	46ab      	mov	fp, r5
 8004e5a:	d918      	bls.n	8004e8e <atan+0x46>
 8004e5c:	4bbd      	ldr	r3, [pc, #756]	@ (8005154 <atan+0x30c>)
 8004e5e:	429e      	cmp	r6, r3
 8004e60:	d801      	bhi.n	8004e66 <atan+0x1e>
 8004e62:	d109      	bne.n	8004e78 <atan+0x30>
 8004e64:	b144      	cbz	r4, 8004e78 <atan+0x30>
 8004e66:	4622      	mov	r2, r4
 8004e68:	462b      	mov	r3, r5
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	f7fb f9b9 	bl	80001e4 <__adddf3>
 8004e72:	4604      	mov	r4, r0
 8004e74:	460d      	mov	r5, r1
 8004e76:	e006      	b.n	8004e86 <atan+0x3e>
 8004e78:	f1bb 0f00 	cmp.w	fp, #0
 8004e7c:	f340 812b 	ble.w	80050d6 <atan+0x28e>
 8004e80:	a597      	add	r5, pc, #604	@ (adr r5, 80050e0 <atan+0x298>)
 8004e82:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004e86:	ec45 4b10 	vmov	d0, r4, r5
 8004e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8e:	4bb2      	ldr	r3, [pc, #712]	@ (8005158 <atan+0x310>)
 8004e90:	429e      	cmp	r6, r3
 8004e92:	d813      	bhi.n	8004ebc <atan+0x74>
 8004e94:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8004e98:	429e      	cmp	r6, r3
 8004e9a:	d80c      	bhi.n	8004eb6 <atan+0x6e>
 8004e9c:	a392      	add	r3, pc, #584	@ (adr r3, 80050e8 <atan+0x2a0>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	f7fb f99d 	bl	80001e4 <__adddf3>
 8004eaa:	4bac      	ldr	r3, [pc, #688]	@ (800515c <atan+0x314>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	f7fb fddf 	bl	8000a70 <__aeabi_dcmpgt>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d1e7      	bne.n	8004e86 <atan+0x3e>
 8004eb6:	f04f 3aff 	mov.w	sl, #4294967295
 8004eba:	e029      	b.n	8004f10 <atan+0xc8>
 8004ebc:	f000 f95c 	bl	8005178 <fabs>
 8004ec0:	4ba7      	ldr	r3, [pc, #668]	@ (8005160 <atan+0x318>)
 8004ec2:	429e      	cmp	r6, r3
 8004ec4:	ec55 4b10 	vmov	r4, r5, d0
 8004ec8:	f200 80bc 	bhi.w	8005044 <atan+0x1fc>
 8004ecc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8004ed0:	429e      	cmp	r6, r3
 8004ed2:	f200 809e 	bhi.w	8005012 <atan+0x1ca>
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	462b      	mov	r3, r5
 8004eda:	4620      	mov	r0, r4
 8004edc:	4629      	mov	r1, r5
 8004ede:	f7fb f981 	bl	80001e4 <__adddf3>
 8004ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800515c <atan+0x314>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f7fb f97b 	bl	80001e0 <__aeabi_dsub>
 8004eea:	2200      	movs	r2, #0
 8004eec:	4606      	mov	r6, r0
 8004eee:	460f      	mov	r7, r1
 8004ef0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	f7fb f974 	bl	80001e4 <__adddf3>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4630      	mov	r0, r6
 8004f02:	4639      	mov	r1, r7
 8004f04:	f7fb fc4e 	bl	80007a4 <__aeabi_ddiv>
 8004f08:	f04f 0a00 	mov.w	sl, #0
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	460d      	mov	r5, r1
 8004f10:	4622      	mov	r2, r4
 8004f12:	462b      	mov	r3, r5
 8004f14:	4620      	mov	r0, r4
 8004f16:	4629      	mov	r1, r5
 8004f18:	f7fb fb1a 	bl	8000550 <__aeabi_dmul>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4680      	mov	r8, r0
 8004f22:	4689      	mov	r9, r1
 8004f24:	f7fb fb14 	bl	8000550 <__aeabi_dmul>
 8004f28:	a371      	add	r3, pc, #452	@ (adr r3, 80050f0 <atan+0x2a8>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	4606      	mov	r6, r0
 8004f30:	460f      	mov	r7, r1
 8004f32:	f7fb fb0d 	bl	8000550 <__aeabi_dmul>
 8004f36:	a370      	add	r3, pc, #448	@ (adr r3, 80050f8 <atan+0x2b0>)
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f7fb f952 	bl	80001e4 <__adddf3>
 8004f40:	4632      	mov	r2, r6
 8004f42:	463b      	mov	r3, r7
 8004f44:	f7fb fb04 	bl	8000550 <__aeabi_dmul>
 8004f48:	a36d      	add	r3, pc, #436	@ (adr r3, 8005100 <atan+0x2b8>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f7fb f949 	bl	80001e4 <__adddf3>
 8004f52:	4632      	mov	r2, r6
 8004f54:	463b      	mov	r3, r7
 8004f56:	f7fb fafb 	bl	8000550 <__aeabi_dmul>
 8004f5a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005108 <atan+0x2c0>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f7fb f940 	bl	80001e4 <__adddf3>
 8004f64:	4632      	mov	r2, r6
 8004f66:	463b      	mov	r3, r7
 8004f68:	f7fb faf2 	bl	8000550 <__aeabi_dmul>
 8004f6c:	a368      	add	r3, pc, #416	@ (adr r3, 8005110 <atan+0x2c8>)
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	f7fb f937 	bl	80001e4 <__adddf3>
 8004f76:	4632      	mov	r2, r6
 8004f78:	463b      	mov	r3, r7
 8004f7a:	f7fb fae9 	bl	8000550 <__aeabi_dmul>
 8004f7e:	a366      	add	r3, pc, #408	@ (adr r3, 8005118 <atan+0x2d0>)
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f7fb f92e 	bl	80001e4 <__adddf3>
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	f7fb fae0 	bl	8000550 <__aeabi_dmul>
 8004f90:	a363      	add	r3, pc, #396	@ (adr r3, 8005120 <atan+0x2d8>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	4680      	mov	r8, r0
 8004f98:	4689      	mov	r9, r1
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	4639      	mov	r1, r7
 8004f9e:	f7fb fad7 	bl	8000550 <__aeabi_dmul>
 8004fa2:	a361      	add	r3, pc, #388	@ (adr r3, 8005128 <atan+0x2e0>)
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	f7fb f91a 	bl	80001e0 <__aeabi_dsub>
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	f7fb face 	bl	8000550 <__aeabi_dmul>
 8004fb4:	a35e      	add	r3, pc, #376	@ (adr r3, 8005130 <atan+0x2e8>)
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	f7fb f911 	bl	80001e0 <__aeabi_dsub>
 8004fbe:	4632      	mov	r2, r6
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	f7fb fac5 	bl	8000550 <__aeabi_dmul>
 8004fc6:	a35c      	add	r3, pc, #368	@ (adr r3, 8005138 <atan+0x2f0>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb f908 	bl	80001e0 <__aeabi_dsub>
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	f7fb fabc 	bl	8000550 <__aeabi_dmul>
 8004fd8:	a359      	add	r3, pc, #356	@ (adr r3, 8005140 <atan+0x2f8>)
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f7fb f8ff 	bl	80001e0 <__aeabi_dsub>
 8004fe2:	4632      	mov	r2, r6
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	f7fb fab3 	bl	8000550 <__aeabi_dmul>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4640      	mov	r0, r8
 8004ff0:	4649      	mov	r1, r9
 8004ff2:	f7fb f8f7 	bl	80001e4 <__adddf3>
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	462b      	mov	r3, r5
 8004ffa:	f7fb faa9 	bl	8000550 <__aeabi_dmul>
 8004ffe:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	d148      	bne.n	800509a <atan+0x252>
 8005008:	4620      	mov	r0, r4
 800500a:	4629      	mov	r1, r5
 800500c:	f7fb f8e8 	bl	80001e0 <__aeabi_dsub>
 8005010:	e72f      	b.n	8004e72 <atan+0x2a>
 8005012:	4b52      	ldr	r3, [pc, #328]	@ (800515c <atan+0x314>)
 8005014:	2200      	movs	r2, #0
 8005016:	4620      	mov	r0, r4
 8005018:	4629      	mov	r1, r5
 800501a:	f7fb f8e1 	bl	80001e0 <__aeabi_dsub>
 800501e:	4b4f      	ldr	r3, [pc, #316]	@ (800515c <atan+0x314>)
 8005020:	4606      	mov	r6, r0
 8005022:	460f      	mov	r7, r1
 8005024:	2200      	movs	r2, #0
 8005026:	4620      	mov	r0, r4
 8005028:	4629      	mov	r1, r5
 800502a:	f7fb f8db 	bl	80001e4 <__adddf3>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4630      	mov	r0, r6
 8005034:	4639      	mov	r1, r7
 8005036:	f7fb fbb5 	bl	80007a4 <__aeabi_ddiv>
 800503a:	f04f 0a01 	mov.w	sl, #1
 800503e:	4604      	mov	r4, r0
 8005040:	460d      	mov	r5, r1
 8005042:	e765      	b.n	8004f10 <atan+0xc8>
 8005044:	4b47      	ldr	r3, [pc, #284]	@ (8005164 <atan+0x31c>)
 8005046:	429e      	cmp	r6, r3
 8005048:	d21c      	bcs.n	8005084 <atan+0x23c>
 800504a:	4b47      	ldr	r3, [pc, #284]	@ (8005168 <atan+0x320>)
 800504c:	2200      	movs	r2, #0
 800504e:	4620      	mov	r0, r4
 8005050:	4629      	mov	r1, r5
 8005052:	f7fb f8c5 	bl	80001e0 <__aeabi_dsub>
 8005056:	4b44      	ldr	r3, [pc, #272]	@ (8005168 <atan+0x320>)
 8005058:	4606      	mov	r6, r0
 800505a:	460f      	mov	r7, r1
 800505c:	2200      	movs	r2, #0
 800505e:	4620      	mov	r0, r4
 8005060:	4629      	mov	r1, r5
 8005062:	f7fb fa75 	bl	8000550 <__aeabi_dmul>
 8005066:	4b3d      	ldr	r3, [pc, #244]	@ (800515c <atan+0x314>)
 8005068:	2200      	movs	r2, #0
 800506a:	f7fb f8bb 	bl	80001e4 <__adddf3>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4630      	mov	r0, r6
 8005074:	4639      	mov	r1, r7
 8005076:	f7fb fb95 	bl	80007a4 <__aeabi_ddiv>
 800507a:	f04f 0a02 	mov.w	sl, #2
 800507e:	4604      	mov	r4, r0
 8005080:	460d      	mov	r5, r1
 8005082:	e745      	b.n	8004f10 <atan+0xc8>
 8005084:	4622      	mov	r2, r4
 8005086:	462b      	mov	r3, r5
 8005088:	4938      	ldr	r1, [pc, #224]	@ (800516c <atan+0x324>)
 800508a:	2000      	movs	r0, #0
 800508c:	f7fb fb8a 	bl	80007a4 <__aeabi_ddiv>
 8005090:	f04f 0a03 	mov.w	sl, #3
 8005094:	4604      	mov	r4, r0
 8005096:	460d      	mov	r5, r1
 8005098:	e73a      	b.n	8004f10 <atan+0xc8>
 800509a:	4b35      	ldr	r3, [pc, #212]	@ (8005170 <atan+0x328>)
 800509c:	4e35      	ldr	r6, [pc, #212]	@ (8005174 <atan+0x32c>)
 800509e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f7fb f89b 	bl	80001e0 <__aeabi_dsub>
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	f7fb f897 	bl	80001e0 <__aeabi_dsub>
 80050b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	e9d6 0100 	ldrd	r0, r1, [r6]
 80050be:	f7fb f88f 	bl	80001e0 <__aeabi_dsub>
 80050c2:	f1bb 0f00 	cmp.w	fp, #0
 80050c6:	4604      	mov	r4, r0
 80050c8:	460d      	mov	r5, r1
 80050ca:	f6bf aedc 	bge.w	8004e86 <atan+0x3e>
 80050ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050d2:	461d      	mov	r5, r3
 80050d4:	e6d7      	b.n	8004e86 <atan+0x3e>
 80050d6:	a51c      	add	r5, pc, #112	@ (adr r5, 8005148 <atan+0x300>)
 80050d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80050dc:	e6d3      	b.n	8004e86 <atan+0x3e>
 80050de:	bf00      	nop
 80050e0:	54442d18 	.word	0x54442d18
 80050e4:	3ff921fb 	.word	0x3ff921fb
 80050e8:	8800759c 	.word	0x8800759c
 80050ec:	7e37e43c 	.word	0x7e37e43c
 80050f0:	e322da11 	.word	0xe322da11
 80050f4:	3f90ad3a 	.word	0x3f90ad3a
 80050f8:	24760deb 	.word	0x24760deb
 80050fc:	3fa97b4b 	.word	0x3fa97b4b
 8005100:	a0d03d51 	.word	0xa0d03d51
 8005104:	3fb10d66 	.word	0x3fb10d66
 8005108:	c54c206e 	.word	0xc54c206e
 800510c:	3fb745cd 	.word	0x3fb745cd
 8005110:	920083ff 	.word	0x920083ff
 8005114:	3fc24924 	.word	0x3fc24924
 8005118:	5555550d 	.word	0x5555550d
 800511c:	3fd55555 	.word	0x3fd55555
 8005120:	2c6a6c2f 	.word	0x2c6a6c2f
 8005124:	bfa2b444 	.word	0xbfa2b444
 8005128:	52defd9a 	.word	0x52defd9a
 800512c:	3fadde2d 	.word	0x3fadde2d
 8005130:	af749a6d 	.word	0xaf749a6d
 8005134:	3fb3b0f2 	.word	0x3fb3b0f2
 8005138:	fe231671 	.word	0xfe231671
 800513c:	3fbc71c6 	.word	0x3fbc71c6
 8005140:	9998ebc4 	.word	0x9998ebc4
 8005144:	3fc99999 	.word	0x3fc99999
 8005148:	54442d18 	.word	0x54442d18
 800514c:	bff921fb 	.word	0xbff921fb
 8005150:	440fffff 	.word	0x440fffff
 8005154:	7ff00000 	.word	0x7ff00000
 8005158:	3fdbffff 	.word	0x3fdbffff
 800515c:	3ff00000 	.word	0x3ff00000
 8005160:	3ff2ffff 	.word	0x3ff2ffff
 8005164:	40038000 	.word	0x40038000
 8005168:	3ff80000 	.word	0x3ff80000
 800516c:	bff00000 	.word	0xbff00000
 8005170:	08005ca8 	.word	0x08005ca8
 8005174:	08005cc8 	.word	0x08005cc8

08005178 <fabs>:
 8005178:	ec51 0b10 	vmov	r0, r1, d0
 800517c:	4602      	mov	r2, r0
 800517e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005182:	ec43 2b10 	vmov	d0, r2, r3
 8005186:	4770      	bx	lr

08005188 <scalbn>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	ec55 4b10 	vmov	r4, r5, d0
 800518e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005192:	4606      	mov	r6, r0
 8005194:	462b      	mov	r3, r5
 8005196:	b991      	cbnz	r1, 80051be <scalbn+0x36>
 8005198:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800519c:	4323      	orrs	r3, r4
 800519e:	d03d      	beq.n	800521c <scalbn+0x94>
 80051a0:	4b35      	ldr	r3, [pc, #212]	@ (8005278 <scalbn+0xf0>)
 80051a2:	4620      	mov	r0, r4
 80051a4:	4629      	mov	r1, r5
 80051a6:	2200      	movs	r2, #0
 80051a8:	f7fb f9d2 	bl	8000550 <__aeabi_dmul>
 80051ac:	4b33      	ldr	r3, [pc, #204]	@ (800527c <scalbn+0xf4>)
 80051ae:	429e      	cmp	r6, r3
 80051b0:	4604      	mov	r4, r0
 80051b2:	460d      	mov	r5, r1
 80051b4:	da0f      	bge.n	80051d6 <scalbn+0x4e>
 80051b6:	a328      	add	r3, pc, #160	@ (adr r3, 8005258 <scalbn+0xd0>)
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	e01e      	b.n	80051fc <scalbn+0x74>
 80051be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80051c2:	4291      	cmp	r1, r2
 80051c4:	d10b      	bne.n	80051de <scalbn+0x56>
 80051c6:	4622      	mov	r2, r4
 80051c8:	4620      	mov	r0, r4
 80051ca:	4629      	mov	r1, r5
 80051cc:	f7fb f80a 	bl	80001e4 <__adddf3>
 80051d0:	4604      	mov	r4, r0
 80051d2:	460d      	mov	r5, r1
 80051d4:	e022      	b.n	800521c <scalbn+0x94>
 80051d6:	460b      	mov	r3, r1
 80051d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80051dc:	3936      	subs	r1, #54	@ 0x36
 80051de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80051e2:	4296      	cmp	r6, r2
 80051e4:	dd0d      	ble.n	8005202 <scalbn+0x7a>
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	a11d      	add	r1, pc, #116	@ (adr r1, 8005260 <scalbn+0xd8>)
 80051ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ee:	da02      	bge.n	80051f6 <scalbn+0x6e>
 80051f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8005268 <scalbn+0xe0>)
 80051f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8005260 <scalbn+0xd8>)
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f7fb f9a8 	bl	8000550 <__aeabi_dmul>
 8005200:	e7e6      	b.n	80051d0 <scalbn+0x48>
 8005202:	1872      	adds	r2, r6, r1
 8005204:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005208:	428a      	cmp	r2, r1
 800520a:	dcec      	bgt.n	80051e6 <scalbn+0x5e>
 800520c:	2a00      	cmp	r2, #0
 800520e:	dd08      	ble.n	8005222 <scalbn+0x9a>
 8005210:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005214:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005218:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800521c:	ec45 4b10 	vmov	d0, r4, r5
 8005220:	bd70      	pop	{r4, r5, r6, pc}
 8005222:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005226:	da08      	bge.n	800523a <scalbn+0xb2>
 8005228:	2d00      	cmp	r5, #0
 800522a:	a10b      	add	r1, pc, #44	@ (adr r1, 8005258 <scalbn+0xd0>)
 800522c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005230:	dac1      	bge.n	80051b6 <scalbn+0x2e>
 8005232:	a10f      	add	r1, pc, #60	@ (adr r1, 8005270 <scalbn+0xe8>)
 8005234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005238:	e7bd      	b.n	80051b6 <scalbn+0x2e>
 800523a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800523e:	3236      	adds	r2, #54	@ 0x36
 8005240:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005244:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005248:	4620      	mov	r0, r4
 800524a:	4b0d      	ldr	r3, [pc, #52]	@ (8005280 <scalbn+0xf8>)
 800524c:	4629      	mov	r1, r5
 800524e:	2200      	movs	r2, #0
 8005250:	e7d4      	b.n	80051fc <scalbn+0x74>
 8005252:	bf00      	nop
 8005254:	f3af 8000 	nop.w
 8005258:	c2f8f359 	.word	0xc2f8f359
 800525c:	01a56e1f 	.word	0x01a56e1f
 8005260:	8800759c 	.word	0x8800759c
 8005264:	7e37e43c 	.word	0x7e37e43c
 8005268:	8800759c 	.word	0x8800759c
 800526c:	fe37e43c 	.word	0xfe37e43c
 8005270:	c2f8f359 	.word	0xc2f8f359
 8005274:	81a56e1f 	.word	0x81a56e1f
 8005278:	43500000 	.word	0x43500000
 800527c:	ffff3cb0 	.word	0xffff3cb0
 8005280:	3c900000 	.word	0x3c900000

08005284 <with_errno>:
 8005284:	b510      	push	{r4, lr}
 8005286:	ed2d 8b02 	vpush	{d8}
 800528a:	eeb0 8a40 	vmov.f32	s16, s0
 800528e:	eef0 8a60 	vmov.f32	s17, s1
 8005292:	4604      	mov	r4, r0
 8005294:	f7fd ffba 	bl	800320c <__errno>
 8005298:	eeb0 0a48 	vmov.f32	s0, s16
 800529c:	eef0 0a68 	vmov.f32	s1, s17
 80052a0:	ecbd 8b02 	vpop	{d8}
 80052a4:	6004      	str	r4, [r0, #0]
 80052a6:	bd10      	pop	{r4, pc}

080052a8 <xflow>:
 80052a8:	4603      	mov	r3, r0
 80052aa:	b507      	push	{r0, r1, r2, lr}
 80052ac:	ec51 0b10 	vmov	r0, r1, d0
 80052b0:	b183      	cbz	r3, 80052d4 <xflow+0x2c>
 80052b2:	4602      	mov	r2, r0
 80052b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80052b8:	e9cd 2300 	strd	r2, r3, [sp]
 80052bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052c0:	f7fb f946 	bl	8000550 <__aeabi_dmul>
 80052c4:	ec41 0b10 	vmov	d0, r0, r1
 80052c8:	2022      	movs	r0, #34	@ 0x22
 80052ca:	b003      	add	sp, #12
 80052cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d0:	f7ff bfd8 	b.w	8005284 <with_errno>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	e7ee      	b.n	80052b8 <xflow+0x10>
 80052da:	0000      	movs	r0, r0
 80052dc:	0000      	movs	r0, r0
	...

080052e0 <__math_uflow>:
 80052e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80052e8 <__math_uflow+0x8>
 80052e4:	f7ff bfe0 	b.w	80052a8 <xflow>
 80052e8:	00000000 	.word	0x00000000
 80052ec:	10000000 	.word	0x10000000

080052f0 <__math_oflow>:
 80052f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80052f8 <__math_oflow+0x8>
 80052f4:	f7ff bfd8 	b.w	80052a8 <xflow>
 80052f8:	00000000 	.word	0x00000000
 80052fc:	70000000 	.word	0x70000000

08005300 <__kernel_rem_pio2>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	ed2d 8b02 	vpush	{d8}
 8005308:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800530c:	f112 0f14 	cmn.w	r2, #20
 8005310:	9306      	str	r3, [sp, #24]
 8005312:	9104      	str	r1, [sp, #16]
 8005314:	4bbe      	ldr	r3, [pc, #760]	@ (8005610 <__kernel_rem_pio2+0x310>)
 8005316:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005318:	9008      	str	r0, [sp, #32]
 800531a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	9b06      	ldr	r3, [sp, #24]
 8005322:	f103 33ff 	add.w	r3, r3, #4294967295
 8005326:	bfa8      	it	ge
 8005328:	1ed4      	subge	r4, r2, #3
 800532a:	9305      	str	r3, [sp, #20]
 800532c:	bfb2      	itee	lt
 800532e:	2400      	movlt	r4, #0
 8005330:	2318      	movge	r3, #24
 8005332:	fb94 f4f3 	sdivge	r4, r4, r3
 8005336:	f06f 0317 	mvn.w	r3, #23
 800533a:	fb04 3303 	mla	r3, r4, r3, r3
 800533e:	eb03 0b02 	add.w	fp, r3, r2
 8005342:	9b00      	ldr	r3, [sp, #0]
 8005344:	9a05      	ldr	r2, [sp, #20]
 8005346:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005600 <__kernel_rem_pio2+0x300>
 800534a:	eb03 0802 	add.w	r8, r3, r2
 800534e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005350:	1aa7      	subs	r7, r4, r2
 8005352:	ae20      	add	r6, sp, #128	@ 0x80
 8005354:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005358:	2500      	movs	r5, #0
 800535a:	4545      	cmp	r5, r8
 800535c:	dd13      	ble.n	8005386 <__kernel_rem_pio2+0x86>
 800535e:	9b06      	ldr	r3, [sp, #24]
 8005360:	aa20      	add	r2, sp, #128	@ 0x80
 8005362:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005366:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800536a:	f04f 0800 	mov.w	r8, #0
 800536e:	9b00      	ldr	r3, [sp, #0]
 8005370:	4598      	cmp	r8, r3
 8005372:	dc31      	bgt.n	80053d8 <__kernel_rem_pio2+0xd8>
 8005374:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005600 <__kernel_rem_pio2+0x300>
 8005378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800537c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005380:	462f      	mov	r7, r5
 8005382:	2600      	movs	r6, #0
 8005384:	e01b      	b.n	80053be <__kernel_rem_pio2+0xbe>
 8005386:	42ef      	cmn	r7, r5
 8005388:	d407      	bmi.n	800539a <__kernel_rem_pio2+0x9a>
 800538a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800538e:	f7fb f875 	bl	800047c <__aeabi_i2d>
 8005392:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005396:	3501      	adds	r5, #1
 8005398:	e7df      	b.n	800535a <__kernel_rem_pio2+0x5a>
 800539a:	ec51 0b18 	vmov	r0, r1, d8
 800539e:	e7f8      	b.n	8005392 <__kernel_rem_pio2+0x92>
 80053a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80053a8:	f7fb f8d2 	bl	8000550 <__aeabi_dmul>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053b4:	f7fa ff16 	bl	80001e4 <__adddf3>
 80053b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053bc:	3601      	adds	r6, #1
 80053be:	9b05      	ldr	r3, [sp, #20]
 80053c0:	429e      	cmp	r6, r3
 80053c2:	f1a7 0708 	sub.w	r7, r7, #8
 80053c6:	ddeb      	ble.n	80053a0 <__kernel_rem_pio2+0xa0>
 80053c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053cc:	f108 0801 	add.w	r8, r8, #1
 80053d0:	ecaa 7b02 	vstmia	sl!, {d7}
 80053d4:	3508      	adds	r5, #8
 80053d6:	e7ca      	b.n	800536e <__kernel_rem_pio2+0x6e>
 80053d8:	9b00      	ldr	r3, [sp, #0]
 80053da:	f8dd 8000 	ldr.w	r8, [sp]
 80053de:	aa0c      	add	r2, sp, #48	@ 0x30
 80053e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80053e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80053e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80053e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80053ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80053f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053f4:	ab98      	add	r3, sp, #608	@ 0x260
 80053f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80053fa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80053fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005402:	ac0c      	add	r4, sp, #48	@ 0x30
 8005404:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005406:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800540a:	46a1      	mov	r9, r4
 800540c:	46c2      	mov	sl, r8
 800540e:	f1ba 0f00 	cmp.w	sl, #0
 8005412:	f1a5 0508 	sub.w	r5, r5, #8
 8005416:	dc77      	bgt.n	8005508 <__kernel_rem_pio2+0x208>
 8005418:	4658      	mov	r0, fp
 800541a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800541e:	f7ff feb3 	bl	8005188 <scalbn>
 8005422:	ec57 6b10 	vmov	r6, r7, d0
 8005426:	2200      	movs	r2, #0
 8005428:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800542c:	4630      	mov	r0, r6
 800542e:	4639      	mov	r1, r7
 8005430:	f7fb f88e 	bl	8000550 <__aeabi_dmul>
 8005434:	ec41 0b10 	vmov	d0, r0, r1
 8005438:	f000 faba 	bl	80059b0 <floor>
 800543c:	4b75      	ldr	r3, [pc, #468]	@ (8005614 <__kernel_rem_pio2+0x314>)
 800543e:	ec51 0b10 	vmov	r0, r1, d0
 8005442:	2200      	movs	r2, #0
 8005444:	f7fb f884 	bl	8000550 <__aeabi_dmul>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fa fec6 	bl	80001e0 <__aeabi_dsub>
 8005454:	460f      	mov	r7, r1
 8005456:	4606      	mov	r6, r0
 8005458:	f7fb fb2a 	bl	8000ab0 <__aeabi_d2iz>
 800545c:	9002      	str	r0, [sp, #8]
 800545e:	f7fb f80d 	bl	800047c <__aeabi_i2d>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4630      	mov	r0, r6
 8005468:	4639      	mov	r1, r7
 800546a:	f7fa feb9 	bl	80001e0 <__aeabi_dsub>
 800546e:	f1bb 0f00 	cmp.w	fp, #0
 8005472:	4606      	mov	r6, r0
 8005474:	460f      	mov	r7, r1
 8005476:	dd6c      	ble.n	8005552 <__kernel_rem_pio2+0x252>
 8005478:	f108 31ff 	add.w	r1, r8, #4294967295
 800547c:	ab0c      	add	r3, sp, #48	@ 0x30
 800547e:	9d02      	ldr	r5, [sp, #8]
 8005480:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005484:	f1cb 0018 	rsb	r0, fp, #24
 8005488:	fa43 f200 	asr.w	r2, r3, r0
 800548c:	4415      	add	r5, r2
 800548e:	4082      	lsls	r2, r0
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	aa0c      	add	r2, sp, #48	@ 0x30
 8005494:	9502      	str	r5, [sp, #8]
 8005496:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800549a:	f1cb 0217 	rsb	r2, fp, #23
 800549e:	fa43 f902 	asr.w	r9, r3, r2
 80054a2:	f1b9 0f00 	cmp.w	r9, #0
 80054a6:	dd64      	ble.n	8005572 <__kernel_rem_pio2+0x272>
 80054a8:	9b02      	ldr	r3, [sp, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	3301      	adds	r3, #1
 80054ae:	9302      	str	r3, [sp, #8]
 80054b0:	4615      	mov	r5, r2
 80054b2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80054b6:	4590      	cmp	r8, r2
 80054b8:	f300 80b8 	bgt.w	800562c <__kernel_rem_pio2+0x32c>
 80054bc:	f1bb 0f00 	cmp.w	fp, #0
 80054c0:	dd07      	ble.n	80054d2 <__kernel_rem_pio2+0x1d2>
 80054c2:	f1bb 0f01 	cmp.w	fp, #1
 80054c6:	f000 80bf 	beq.w	8005648 <__kernel_rem_pio2+0x348>
 80054ca:	f1bb 0f02 	cmp.w	fp, #2
 80054ce:	f000 80c6 	beq.w	800565e <__kernel_rem_pio2+0x35e>
 80054d2:	f1b9 0f02 	cmp.w	r9, #2
 80054d6:	d14c      	bne.n	8005572 <__kernel_rem_pio2+0x272>
 80054d8:	4632      	mov	r2, r6
 80054da:	463b      	mov	r3, r7
 80054dc:	494e      	ldr	r1, [pc, #312]	@ (8005618 <__kernel_rem_pio2+0x318>)
 80054de:	2000      	movs	r0, #0
 80054e0:	f7fa fe7e 	bl	80001e0 <__aeabi_dsub>
 80054e4:	4606      	mov	r6, r0
 80054e6:	460f      	mov	r7, r1
 80054e8:	2d00      	cmp	r5, #0
 80054ea:	d042      	beq.n	8005572 <__kernel_rem_pio2+0x272>
 80054ec:	4658      	mov	r0, fp
 80054ee:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005608 <__kernel_rem_pio2+0x308>
 80054f2:	f7ff fe49 	bl	8005188 <scalbn>
 80054f6:	4630      	mov	r0, r6
 80054f8:	4639      	mov	r1, r7
 80054fa:	ec53 2b10 	vmov	r2, r3, d0
 80054fe:	f7fa fe6f 	bl	80001e0 <__aeabi_dsub>
 8005502:	4606      	mov	r6, r0
 8005504:	460f      	mov	r7, r1
 8005506:	e034      	b.n	8005572 <__kernel_rem_pio2+0x272>
 8005508:	4b44      	ldr	r3, [pc, #272]	@ (800561c <__kernel_rem_pio2+0x31c>)
 800550a:	2200      	movs	r2, #0
 800550c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005510:	f7fb f81e 	bl	8000550 <__aeabi_dmul>
 8005514:	f7fb facc 	bl	8000ab0 <__aeabi_d2iz>
 8005518:	f7fa ffb0 	bl	800047c <__aeabi_i2d>
 800551c:	4b40      	ldr	r3, [pc, #256]	@ (8005620 <__kernel_rem_pio2+0x320>)
 800551e:	2200      	movs	r2, #0
 8005520:	4606      	mov	r6, r0
 8005522:	460f      	mov	r7, r1
 8005524:	f7fb f814 	bl	8000550 <__aeabi_dmul>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005530:	f7fa fe56 	bl	80001e0 <__aeabi_dsub>
 8005534:	f7fb fabc 	bl	8000ab0 <__aeabi_d2iz>
 8005538:	e9d5 2300 	ldrd	r2, r3, [r5]
 800553c:	f849 0b04 	str.w	r0, [r9], #4
 8005540:	4639      	mov	r1, r7
 8005542:	4630      	mov	r0, r6
 8005544:	f7fa fe4e 	bl	80001e4 <__adddf3>
 8005548:	f10a 3aff 	add.w	sl, sl, #4294967295
 800554c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005550:	e75d      	b.n	800540e <__kernel_rem_pio2+0x10e>
 8005552:	d107      	bne.n	8005564 <__kernel_rem_pio2+0x264>
 8005554:	f108 33ff 	add.w	r3, r8, #4294967295
 8005558:	aa0c      	add	r2, sp, #48	@ 0x30
 800555a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005562:	e79e      	b.n	80054a2 <__kernel_rem_pio2+0x1a2>
 8005564:	4b2f      	ldr	r3, [pc, #188]	@ (8005624 <__kernel_rem_pio2+0x324>)
 8005566:	2200      	movs	r2, #0
 8005568:	f7fb fa78 	bl	8000a5c <__aeabi_dcmpge>
 800556c:	2800      	cmp	r0, #0
 800556e:	d143      	bne.n	80055f8 <__kernel_rem_pio2+0x2f8>
 8005570:	4681      	mov	r9, r0
 8005572:	2200      	movs	r2, #0
 8005574:	2300      	movs	r3, #0
 8005576:	4630      	mov	r0, r6
 8005578:	4639      	mov	r1, r7
 800557a:	f7fb fa51 	bl	8000a20 <__aeabi_dcmpeq>
 800557e:	2800      	cmp	r0, #0
 8005580:	f000 80bf 	beq.w	8005702 <__kernel_rem_pio2+0x402>
 8005584:	f108 33ff 	add.w	r3, r8, #4294967295
 8005588:	2200      	movs	r2, #0
 800558a:	9900      	ldr	r1, [sp, #0]
 800558c:	428b      	cmp	r3, r1
 800558e:	da6e      	bge.n	800566e <__kernel_rem_pio2+0x36e>
 8005590:	2a00      	cmp	r2, #0
 8005592:	f000 8089 	beq.w	80056a8 <__kernel_rem_pio2+0x3a8>
 8005596:	f108 38ff 	add.w	r8, r8, #4294967295
 800559a:	ab0c      	add	r3, sp, #48	@ 0x30
 800559c:	f1ab 0b18 	sub.w	fp, fp, #24
 80055a0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f6      	beq.n	8005596 <__kernel_rem_pio2+0x296>
 80055a8:	4658      	mov	r0, fp
 80055aa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005608 <__kernel_rem_pio2+0x308>
 80055ae:	f7ff fdeb 	bl	8005188 <scalbn>
 80055b2:	f108 0301 	add.w	r3, r8, #1
 80055b6:	00da      	lsls	r2, r3, #3
 80055b8:	9205      	str	r2, [sp, #20]
 80055ba:	ec55 4b10 	vmov	r4, r5, d0
 80055be:	aa70      	add	r2, sp, #448	@ 0x1c0
 80055c0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800561c <__kernel_rem_pio2+0x31c>
 80055c4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80055c8:	4646      	mov	r6, r8
 80055ca:	f04f 0a00 	mov.w	sl, #0
 80055ce:	2e00      	cmp	r6, #0
 80055d0:	f280 80cf 	bge.w	8005772 <__kernel_rem_pio2+0x472>
 80055d4:	4644      	mov	r4, r8
 80055d6:	2c00      	cmp	r4, #0
 80055d8:	f2c0 80fd 	blt.w	80057d6 <__kernel_rem_pio2+0x4d6>
 80055dc:	4b12      	ldr	r3, [pc, #72]	@ (8005628 <__kernel_rem_pio2+0x328>)
 80055de:	461f      	mov	r7, r3
 80055e0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80055e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055e6:	9306      	str	r3, [sp, #24]
 80055e8:	f04f 0a00 	mov.w	sl, #0
 80055ec:	f04f 0b00 	mov.w	fp, #0
 80055f0:	2600      	movs	r6, #0
 80055f2:	eba8 0504 	sub.w	r5, r8, r4
 80055f6:	e0e2      	b.n	80057be <__kernel_rem_pio2+0x4be>
 80055f8:	f04f 0902 	mov.w	r9, #2
 80055fc:	e754      	b.n	80054a8 <__kernel_rem_pio2+0x1a8>
 80055fe:	bf00      	nop
	...
 800560c:	3ff00000 	.word	0x3ff00000
 8005610:	08005d28 	.word	0x08005d28
 8005614:	40200000 	.word	0x40200000
 8005618:	3ff00000 	.word	0x3ff00000
 800561c:	3e700000 	.word	0x3e700000
 8005620:	41700000 	.word	0x41700000
 8005624:	3fe00000 	.word	0x3fe00000
 8005628:	08005ce8 	.word	0x08005ce8
 800562c:	f854 3b04 	ldr.w	r3, [r4], #4
 8005630:	b945      	cbnz	r5, 8005644 <__kernel_rem_pio2+0x344>
 8005632:	b123      	cbz	r3, 800563e <__kernel_rem_pio2+0x33e>
 8005634:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005638:	f844 3c04 	str.w	r3, [r4, #-4]
 800563c:	2301      	movs	r3, #1
 800563e:	3201      	adds	r2, #1
 8005640:	461d      	mov	r5, r3
 8005642:	e738      	b.n	80054b6 <__kernel_rem_pio2+0x1b6>
 8005644:	1acb      	subs	r3, r1, r3
 8005646:	e7f7      	b.n	8005638 <__kernel_rem_pio2+0x338>
 8005648:	f108 32ff 	add.w	r2, r8, #4294967295
 800564c:	ab0c      	add	r3, sp, #48	@ 0x30
 800564e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005652:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005656:	a90c      	add	r1, sp, #48	@ 0x30
 8005658:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800565c:	e739      	b.n	80054d2 <__kernel_rem_pio2+0x1d2>
 800565e:	f108 32ff 	add.w	r2, r8, #4294967295
 8005662:	ab0c      	add	r3, sp, #48	@ 0x30
 8005664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005668:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800566c:	e7f3      	b.n	8005656 <__kernel_rem_pio2+0x356>
 800566e:	a90c      	add	r1, sp, #48	@ 0x30
 8005670:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005674:	3b01      	subs	r3, #1
 8005676:	430a      	orrs	r2, r1
 8005678:	e787      	b.n	800558a <__kernel_rem_pio2+0x28a>
 800567a:	3401      	adds	r4, #1
 800567c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005680:	2a00      	cmp	r2, #0
 8005682:	d0fa      	beq.n	800567a <__kernel_rem_pio2+0x37a>
 8005684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005686:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800568a:	eb0d 0503 	add.w	r5, sp, r3
 800568e:	9b06      	ldr	r3, [sp, #24]
 8005690:	aa20      	add	r2, sp, #128	@ 0x80
 8005692:	4443      	add	r3, r8
 8005694:	f108 0701 	add.w	r7, r8, #1
 8005698:	3d98      	subs	r5, #152	@ 0x98
 800569a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800569e:	4444      	add	r4, r8
 80056a0:	42bc      	cmp	r4, r7
 80056a2:	da04      	bge.n	80056ae <__kernel_rem_pio2+0x3ae>
 80056a4:	46a0      	mov	r8, r4
 80056a6:	e6a2      	b.n	80053ee <__kernel_rem_pio2+0xee>
 80056a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056aa:	2401      	movs	r4, #1
 80056ac:	e7e6      	b.n	800567c <__kernel_rem_pio2+0x37c>
 80056ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80056b4:	f7fa fee2 	bl	800047c <__aeabi_i2d>
 80056b8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005980 <__kernel_rem_pio2+0x680>
 80056bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80056c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056c8:	46b2      	mov	sl, r6
 80056ca:	f04f 0800 	mov.w	r8, #0
 80056ce:	9b05      	ldr	r3, [sp, #20]
 80056d0:	4598      	cmp	r8, r3
 80056d2:	dd05      	ble.n	80056e0 <__kernel_rem_pio2+0x3e0>
 80056d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056d8:	3701      	adds	r7, #1
 80056da:	eca5 7b02 	vstmia	r5!, {d7}
 80056de:	e7df      	b.n	80056a0 <__kernel_rem_pio2+0x3a0>
 80056e0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80056e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80056e8:	f7fa ff32 	bl	8000550 <__aeabi_dmul>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056f4:	f7fa fd76 	bl	80001e4 <__adddf3>
 80056f8:	f108 0801 	add.w	r8, r8, #1
 80056fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005700:	e7e5      	b.n	80056ce <__kernel_rem_pio2+0x3ce>
 8005702:	f1cb 0000 	rsb	r0, fp, #0
 8005706:	ec47 6b10 	vmov	d0, r6, r7
 800570a:	f7ff fd3d 	bl	8005188 <scalbn>
 800570e:	ec55 4b10 	vmov	r4, r5, d0
 8005712:	4b9d      	ldr	r3, [pc, #628]	@ (8005988 <__kernel_rem_pio2+0x688>)
 8005714:	2200      	movs	r2, #0
 8005716:	4620      	mov	r0, r4
 8005718:	4629      	mov	r1, r5
 800571a:	f7fb f99f 	bl	8000a5c <__aeabi_dcmpge>
 800571e:	b300      	cbz	r0, 8005762 <__kernel_rem_pio2+0x462>
 8005720:	4b9a      	ldr	r3, [pc, #616]	@ (800598c <__kernel_rem_pio2+0x68c>)
 8005722:	2200      	movs	r2, #0
 8005724:	4620      	mov	r0, r4
 8005726:	4629      	mov	r1, r5
 8005728:	f7fa ff12 	bl	8000550 <__aeabi_dmul>
 800572c:	f7fb f9c0 	bl	8000ab0 <__aeabi_d2iz>
 8005730:	4606      	mov	r6, r0
 8005732:	f7fa fea3 	bl	800047c <__aeabi_i2d>
 8005736:	4b94      	ldr	r3, [pc, #592]	@ (8005988 <__kernel_rem_pio2+0x688>)
 8005738:	2200      	movs	r2, #0
 800573a:	f7fa ff09 	bl	8000550 <__aeabi_dmul>
 800573e:	460b      	mov	r3, r1
 8005740:	4602      	mov	r2, r0
 8005742:	4629      	mov	r1, r5
 8005744:	4620      	mov	r0, r4
 8005746:	f7fa fd4b 	bl	80001e0 <__aeabi_dsub>
 800574a:	f7fb f9b1 	bl	8000ab0 <__aeabi_d2iz>
 800574e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005750:	f10b 0b18 	add.w	fp, fp, #24
 8005754:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005758:	f108 0801 	add.w	r8, r8, #1
 800575c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005760:	e722      	b.n	80055a8 <__kernel_rem_pio2+0x2a8>
 8005762:	4620      	mov	r0, r4
 8005764:	4629      	mov	r1, r5
 8005766:	f7fb f9a3 	bl	8000ab0 <__aeabi_d2iz>
 800576a:	ab0c      	add	r3, sp, #48	@ 0x30
 800576c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005770:	e71a      	b.n	80055a8 <__kernel_rem_pio2+0x2a8>
 8005772:	ab0c      	add	r3, sp, #48	@ 0x30
 8005774:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005778:	f7fa fe80 	bl	800047c <__aeabi_i2d>
 800577c:	4622      	mov	r2, r4
 800577e:	462b      	mov	r3, r5
 8005780:	f7fa fee6 	bl	8000550 <__aeabi_dmul>
 8005784:	4652      	mov	r2, sl
 8005786:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800578a:	465b      	mov	r3, fp
 800578c:	4620      	mov	r0, r4
 800578e:	4629      	mov	r1, r5
 8005790:	f7fa fede 	bl	8000550 <__aeabi_dmul>
 8005794:	3e01      	subs	r6, #1
 8005796:	4604      	mov	r4, r0
 8005798:	460d      	mov	r5, r1
 800579a:	e718      	b.n	80055ce <__kernel_rem_pio2+0x2ce>
 800579c:	9906      	ldr	r1, [sp, #24]
 800579e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80057a2:	9106      	str	r1, [sp, #24]
 80057a4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80057a8:	f7fa fed2 	bl	8000550 <__aeabi_dmul>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4650      	mov	r0, sl
 80057b2:	4659      	mov	r1, fp
 80057b4:	f7fa fd16 	bl	80001e4 <__adddf3>
 80057b8:	3601      	adds	r6, #1
 80057ba:	4682      	mov	sl, r0
 80057bc:	468b      	mov	fp, r1
 80057be:	9b00      	ldr	r3, [sp, #0]
 80057c0:	429e      	cmp	r6, r3
 80057c2:	dc01      	bgt.n	80057c8 <__kernel_rem_pio2+0x4c8>
 80057c4:	42b5      	cmp	r5, r6
 80057c6:	dae9      	bge.n	800579c <__kernel_rem_pio2+0x49c>
 80057c8:	ab48      	add	r3, sp, #288	@ 0x120
 80057ca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80057ce:	e9c5 ab00 	strd	sl, fp, [r5]
 80057d2:	3c01      	subs	r4, #1
 80057d4:	e6ff      	b.n	80055d6 <__kernel_rem_pio2+0x2d6>
 80057d6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80057d8:	2b02      	cmp	r3, #2
 80057da:	dc0b      	bgt.n	80057f4 <__kernel_rem_pio2+0x4f4>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dc39      	bgt.n	8005854 <__kernel_rem_pio2+0x554>
 80057e0:	d05d      	beq.n	800589e <__kernel_rem_pio2+0x59e>
 80057e2:	9b02      	ldr	r3, [sp, #8]
 80057e4:	f003 0007 	and.w	r0, r3, #7
 80057e8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80057ec:	ecbd 8b02 	vpop	{d8}
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d1f3      	bne.n	80057e2 <__kernel_rem_pio2+0x4e2>
 80057fa:	9b05      	ldr	r3, [sp, #20]
 80057fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005800:	eb0d 0403 	add.w	r4, sp, r3
 8005804:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005808:	4625      	mov	r5, r4
 800580a:	46c2      	mov	sl, r8
 800580c:	f1ba 0f00 	cmp.w	sl, #0
 8005810:	f1a5 0508 	sub.w	r5, r5, #8
 8005814:	dc6b      	bgt.n	80058ee <__kernel_rem_pio2+0x5ee>
 8005816:	4645      	mov	r5, r8
 8005818:	2d01      	cmp	r5, #1
 800581a:	f1a4 0408 	sub.w	r4, r4, #8
 800581e:	f300 8087 	bgt.w	8005930 <__kernel_rem_pio2+0x630>
 8005822:	9c05      	ldr	r4, [sp, #20]
 8005824:	ab48      	add	r3, sp, #288	@ 0x120
 8005826:	441c      	add	r4, r3
 8005828:	2000      	movs	r0, #0
 800582a:	2100      	movs	r1, #0
 800582c:	f1b8 0f01 	cmp.w	r8, #1
 8005830:	f300 809c 	bgt.w	800596c <__kernel_rem_pio2+0x66c>
 8005834:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005838:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800583c:	f1b9 0f00 	cmp.w	r9, #0
 8005840:	f040 80a6 	bne.w	8005990 <__kernel_rem_pio2+0x690>
 8005844:	9b04      	ldr	r3, [sp, #16]
 8005846:	e9c3 7800 	strd	r7, r8, [r3]
 800584a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800584e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005852:	e7c6      	b.n	80057e2 <__kernel_rem_pio2+0x4e2>
 8005854:	9d05      	ldr	r5, [sp, #20]
 8005856:	ab48      	add	r3, sp, #288	@ 0x120
 8005858:	441d      	add	r5, r3
 800585a:	4644      	mov	r4, r8
 800585c:	2000      	movs	r0, #0
 800585e:	2100      	movs	r1, #0
 8005860:	2c00      	cmp	r4, #0
 8005862:	da35      	bge.n	80058d0 <__kernel_rem_pio2+0x5d0>
 8005864:	f1b9 0f00 	cmp.w	r9, #0
 8005868:	d038      	beq.n	80058dc <__kernel_rem_pio2+0x5dc>
 800586a:	4602      	mov	r2, r0
 800586c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005870:	9c04      	ldr	r4, [sp, #16]
 8005872:	e9c4 2300 	strd	r2, r3, [r4]
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800587e:	f7fa fcaf 	bl	80001e0 <__aeabi_dsub>
 8005882:	ad4a      	add	r5, sp, #296	@ 0x128
 8005884:	2401      	movs	r4, #1
 8005886:	45a0      	cmp	r8, r4
 8005888:	da2b      	bge.n	80058e2 <__kernel_rem_pio2+0x5e2>
 800588a:	f1b9 0f00 	cmp.w	r9, #0
 800588e:	d002      	beq.n	8005896 <__kernel_rem_pio2+0x596>
 8005890:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005894:	4619      	mov	r1, r3
 8005896:	9b04      	ldr	r3, [sp, #16]
 8005898:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800589c:	e7a1      	b.n	80057e2 <__kernel_rem_pio2+0x4e2>
 800589e:	9c05      	ldr	r4, [sp, #20]
 80058a0:	ab48      	add	r3, sp, #288	@ 0x120
 80058a2:	441c      	add	r4, r3
 80058a4:	2000      	movs	r0, #0
 80058a6:	2100      	movs	r1, #0
 80058a8:	f1b8 0f00 	cmp.w	r8, #0
 80058ac:	da09      	bge.n	80058c2 <__kernel_rem_pio2+0x5c2>
 80058ae:	f1b9 0f00 	cmp.w	r9, #0
 80058b2:	d002      	beq.n	80058ba <__kernel_rem_pio2+0x5ba>
 80058b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80058b8:	4619      	mov	r1, r3
 80058ba:	9b04      	ldr	r3, [sp, #16]
 80058bc:	e9c3 0100 	strd	r0, r1, [r3]
 80058c0:	e78f      	b.n	80057e2 <__kernel_rem_pio2+0x4e2>
 80058c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058c6:	f7fa fc8d 	bl	80001e4 <__adddf3>
 80058ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80058ce:	e7eb      	b.n	80058a8 <__kernel_rem_pio2+0x5a8>
 80058d0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80058d4:	f7fa fc86 	bl	80001e4 <__adddf3>
 80058d8:	3c01      	subs	r4, #1
 80058da:	e7c1      	b.n	8005860 <__kernel_rem_pio2+0x560>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	e7c6      	b.n	8005870 <__kernel_rem_pio2+0x570>
 80058e2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80058e6:	f7fa fc7d 	bl	80001e4 <__adddf3>
 80058ea:	3401      	adds	r4, #1
 80058ec:	e7cb      	b.n	8005886 <__kernel_rem_pio2+0x586>
 80058ee:	ed95 7b00 	vldr	d7, [r5]
 80058f2:	ed8d 7b00 	vstr	d7, [sp]
 80058f6:	ed95 7b02 	vldr	d7, [r5, #8]
 80058fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058fe:	ec53 2b17 	vmov	r2, r3, d7
 8005902:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005906:	f7fa fc6d 	bl	80001e4 <__adddf3>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4606      	mov	r6, r0
 8005910:	460f      	mov	r7, r1
 8005912:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005916:	f7fa fc63 	bl	80001e0 <__aeabi_dsub>
 800591a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800591e:	f7fa fc61 	bl	80001e4 <__adddf3>
 8005922:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005926:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800592a:	e9c5 6700 	strd	r6, r7, [r5]
 800592e:	e76d      	b.n	800580c <__kernel_rem_pio2+0x50c>
 8005930:	ed94 7b00 	vldr	d7, [r4]
 8005934:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005938:	ec51 0b17 	vmov	r0, r1, d7
 800593c:	4652      	mov	r2, sl
 800593e:	465b      	mov	r3, fp
 8005940:	ed8d 7b00 	vstr	d7, [sp]
 8005944:	f7fa fc4e 	bl	80001e4 <__adddf3>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4606      	mov	r6, r0
 800594e:	460f      	mov	r7, r1
 8005950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005954:	f7fa fc44 	bl	80001e0 <__aeabi_dsub>
 8005958:	4652      	mov	r2, sl
 800595a:	465b      	mov	r3, fp
 800595c:	f7fa fc42 	bl	80001e4 <__adddf3>
 8005960:	3d01      	subs	r5, #1
 8005962:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005966:	e9c4 6700 	strd	r6, r7, [r4]
 800596a:	e755      	b.n	8005818 <__kernel_rem_pio2+0x518>
 800596c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005970:	f7fa fc38 	bl	80001e4 <__adddf3>
 8005974:	f108 38ff 	add.w	r8, r8, #4294967295
 8005978:	e758      	b.n	800582c <__kernel_rem_pio2+0x52c>
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w
	...
 8005988:	41700000 	.word	0x41700000
 800598c:	3e700000 	.word	0x3e700000
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	9a04      	ldr	r2, [sp, #16]
 8005994:	601f      	str	r7, [r3, #0]
 8005996:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800599a:	605c      	str	r4, [r3, #4]
 800599c:	609d      	str	r5, [r3, #8]
 800599e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80059a2:	60d3      	str	r3, [r2, #12]
 80059a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059a8:	6110      	str	r0, [r2, #16]
 80059aa:	6153      	str	r3, [r2, #20]
 80059ac:	e719      	b.n	80057e2 <__kernel_rem_pio2+0x4e2>
 80059ae:	bf00      	nop

080059b0 <floor>:
 80059b0:	ec51 0b10 	vmov	r0, r1, d0
 80059b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80059b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80059c0:	2e13      	cmp	r6, #19
 80059c2:	460c      	mov	r4, r1
 80059c4:	4605      	mov	r5, r0
 80059c6:	4680      	mov	r8, r0
 80059c8:	dc34      	bgt.n	8005a34 <floor+0x84>
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	da17      	bge.n	80059fe <floor+0x4e>
 80059ce:	a332      	add	r3, pc, #200	@ (adr r3, 8005a98 <floor+0xe8>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f7fa fc06 	bl	80001e4 <__adddf3>
 80059d8:	2200      	movs	r2, #0
 80059da:	2300      	movs	r3, #0
 80059dc:	f7fb f848 	bl	8000a70 <__aeabi_dcmpgt>
 80059e0:	b150      	cbz	r0, 80059f8 <floor+0x48>
 80059e2:	2c00      	cmp	r4, #0
 80059e4:	da55      	bge.n	8005a92 <floor+0xe2>
 80059e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80059ea:	432c      	orrs	r4, r5
 80059ec:	2500      	movs	r5, #0
 80059ee:	42ac      	cmp	r4, r5
 80059f0:	4c2b      	ldr	r4, [pc, #172]	@ (8005aa0 <floor+0xf0>)
 80059f2:	bf08      	it	eq
 80059f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80059f8:	4621      	mov	r1, r4
 80059fa:	4628      	mov	r0, r5
 80059fc:	e023      	b.n	8005a46 <floor+0x96>
 80059fe:	4f29      	ldr	r7, [pc, #164]	@ (8005aa4 <floor+0xf4>)
 8005a00:	4137      	asrs	r7, r6
 8005a02:	ea01 0307 	and.w	r3, r1, r7
 8005a06:	4303      	orrs	r3, r0
 8005a08:	d01d      	beq.n	8005a46 <floor+0x96>
 8005a0a:	a323      	add	r3, pc, #140	@ (adr r3, 8005a98 <floor+0xe8>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fbe8 	bl	80001e4 <__adddf3>
 8005a14:	2200      	movs	r2, #0
 8005a16:	2300      	movs	r3, #0
 8005a18:	f7fb f82a 	bl	8000a70 <__aeabi_dcmpgt>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d0eb      	beq.n	80059f8 <floor+0x48>
 8005a20:	2c00      	cmp	r4, #0
 8005a22:	bfbe      	ittt	lt
 8005a24:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005a28:	4133      	asrlt	r3, r6
 8005a2a:	18e4      	addlt	r4, r4, r3
 8005a2c:	ea24 0407 	bic.w	r4, r4, r7
 8005a30:	2500      	movs	r5, #0
 8005a32:	e7e1      	b.n	80059f8 <floor+0x48>
 8005a34:	2e33      	cmp	r6, #51	@ 0x33
 8005a36:	dd0a      	ble.n	8005a4e <floor+0x9e>
 8005a38:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005a3c:	d103      	bne.n	8005a46 <floor+0x96>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	f7fa fbcf 	bl	80001e4 <__adddf3>
 8005a46:	ec41 0b10 	vmov	d0, r0, r1
 8005a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a4e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005a52:	f04f 37ff 	mov.w	r7, #4294967295
 8005a56:	40df      	lsrs	r7, r3
 8005a58:	4207      	tst	r7, r0
 8005a5a:	d0f4      	beq.n	8005a46 <floor+0x96>
 8005a5c:	a30e      	add	r3, pc, #56	@ (adr r3, 8005a98 <floor+0xe8>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa fbbf 	bl	80001e4 <__adddf3>
 8005a66:	2200      	movs	r2, #0
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f7fb f801 	bl	8000a70 <__aeabi_dcmpgt>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d0c2      	beq.n	80059f8 <floor+0x48>
 8005a72:	2c00      	cmp	r4, #0
 8005a74:	da0a      	bge.n	8005a8c <floor+0xdc>
 8005a76:	2e14      	cmp	r6, #20
 8005a78:	d101      	bne.n	8005a7e <floor+0xce>
 8005a7a:	3401      	adds	r4, #1
 8005a7c:	e006      	b.n	8005a8c <floor+0xdc>
 8005a7e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005a82:	2301      	movs	r3, #1
 8005a84:	40b3      	lsls	r3, r6
 8005a86:	441d      	add	r5, r3
 8005a88:	4545      	cmp	r5, r8
 8005a8a:	d3f6      	bcc.n	8005a7a <floor+0xca>
 8005a8c:	ea25 0507 	bic.w	r5, r5, r7
 8005a90:	e7b2      	b.n	80059f8 <floor+0x48>
 8005a92:	2500      	movs	r5, #0
 8005a94:	462c      	mov	r4, r5
 8005a96:	e7af      	b.n	80059f8 <floor+0x48>
 8005a98:	8800759c 	.word	0x8800759c
 8005a9c:	7e37e43c 	.word	0x7e37e43c
 8005aa0:	bff00000 	.word	0xbff00000
 8005aa4:	000fffff 	.word	0x000fffff

08005aa8 <_init>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	bf00      	nop
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr

08005ab4 <_fini>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	bf00      	nop
 8005ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aba:	bc08      	pop	{r3}
 8005abc:	469e      	mov	lr, r3
 8005abe:	4770      	bx	lr
