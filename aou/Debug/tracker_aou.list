
tracker_aou.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fe4  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800117c  0800117c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800117c  0800117c  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  0800117c  0800117c  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800117c  0800117c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800117c  0800117c  0000217c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001180  08001180  00002180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001184  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000004  08001188  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001188  00003054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013fb  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000044d  00000000  00000000  0000442f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00004880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ea  00000000  00000000  000049b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013be4  00000000  00000000  00004aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c3d  00000000  00000000  00018686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f907  00000000  00000000  0001a2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099bca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000048c  00000000  00000000  00099c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0009a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001164 	.word	0x08001164

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001164 	.word	0x08001164

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	@ 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db0b      	blt.n	800086e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 021f 	and.w	r2, r3, #31
 800085c:	4907      	ldr	r1, [pc, #28]	@ (800087c <__NVIC_EnableIRQ+0x38>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	095b      	lsrs	r3, r3, #5
 8000864:	2001      	movs	r0, #1
 8000866:	fa00 f202 	lsl.w	r2, r0, r2
 800086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	@ (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	0112      	lsls	r2, r2, #4
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	@ (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0112      	lsls	r2, r2, #4
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ffc2 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <SysTick_Handler>:
   - Increments the millisecond counter.
   - Signals the main loop using loop_run.
   - Manages the two LED timers.
*/
void SysTick_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
    ms_ticks++;
 800091c:	4b17      	ldr	r3, [pc, #92]	@ (800097c <SysTick_Handler+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a16      	ldr	r2, [pc, #88]	@ (800097c <SysTick_Handler+0x64>)
 8000924:	6013      	str	r3, [r2, #0]
    loop_run=1;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <SysTick_Handler+0x68>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]

    /* Manage LED on PB4 */
    if (led_timer > 0)
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <SysTick_Handler+0x6c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00c      	beq.n	800094e <SysTick_Handler+0x36>
    {
        led_timer--;
 8000934:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <SysTick_Handler+0x6c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <SysTick_Handler+0x6c>)
 800093c:	6013      	str	r3, [r2, #0]
        if (led_timer == 0)
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <SysTick_Handler+0x6c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d103      	bne.n	800094e <SysTick_Handler+0x36>
        {
            /* Turn LED PB4 off by resetting bit (16 + 4) in BSRR */
            GPIOB->BSRR = (1 << (16 + 4));
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <SysTick_Handler+0x70>)
 8000948:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800094c:	619a      	str	r2, [r3, #24]
        }
    }

    /* Manage LED on PB7 for discarded message */
    if (pb7_led_timer > 0)
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <SysTick_Handler+0x74>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00c      	beq.n	8000970 <SysTick_Handler+0x58>
    {
        pb7_led_timer--;
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <SysTick_Handler+0x74>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3b01      	subs	r3, #1
 800095c:	4a0b      	ldr	r2, [pc, #44]	@ (800098c <SysTick_Handler+0x74>)
 800095e:	6013      	str	r3, [r2, #0]
        if (pb7_led_timer == 0)
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <SysTick_Handler+0x74>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d103      	bne.n	8000970 <SysTick_Handler+0x58>
        {
            /* Turn LED PB7 off by resetting bit (16 + 7) in BSRR */
            GPIOB->BSRR = (1 << (16 + 7));
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <SysTick_Handler+0x70>)
 800096a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800096e:	619a      	str	r2, [r3, #24]
        }
    }
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000020 	.word	0x20000020
 8000980:	20000024 	.word	0x20000024
 8000984:	20000028 	.word	0x20000028
 8000988:	40020400 	.word	0x40020400
 800098c:	2000002c 	.word	0x2000002c

08000990 <USART1_IRQHandler>:
   - Once header is received, subsequent bytes are stored.
   - Updates last_rx_tick for each byte.
   - When the full 13-byte message is received, it decodes yaw, pitch, and roll.
*/
void USART1_IRQHandler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE)
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <USART1_IRQHandler+0x9c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 0320 	and.w	r3, r3, #32
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d03e      	beq.n	8000a20 <USART1_IRQHandler+0x90>
    {
        uint8_t byte = USART1->DR & 0xFF;
 80009a2:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <USART1_IRQHandler+0x9c>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	71fb      	strb	r3, [r7, #7]

        if (rx_index == 0)
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <USART1_IRQHandler+0xa0>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d115      	bne.n	80009de <USART1_IRQHandler+0x4e>
        {
            if (byte == HEADER_BYTE)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2baa      	cmp	r3, #170	@ 0xaa
 80009b6:	d10a      	bne.n	80009ce <USART1_IRQHandler+0x3e>
            {
                rx_buffer[0] = byte;
 80009b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a34 <USART1_IRQHandler+0xa4>)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	7013      	strb	r3, [r2, #0]
                rx_index = 1;
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <USART1_IRQHandler+0xa0>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
                last_rx_tick = ms_ticks;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <USART1_IRQHandler+0xa8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a3c <USART1_IRQHandler+0xac>)
 80009ca:	6013      	str	r3, [r2, #0]
				led_timer = 500;

            }
        }
    }
}
 80009cc:	e028      	b.n	8000a20 <USART1_IRQHandler+0x90>
            	GPIOB->BSRR = (1 << 7);  // Turn LED PB7 on
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <USART1_IRQHandler+0xb0>)
 80009d0:	2280      	movs	r2, #128	@ 0x80
 80009d2:	619a      	str	r2, [r3, #24]
            	pb7_led_timer = 500;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <USART1_IRQHandler+0xb4>)
 80009d6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	e020      	b.n	8000a20 <USART1_IRQHandler+0x90>
            rx_buffer[rx_index++] = byte;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <USART1_IRQHandler+0xa0>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	b2d1      	uxtb	r1, r2
 80009e8:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <USART1_IRQHandler+0xa0>)
 80009ea:	7011      	strb	r1, [r2, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	4a11      	ldr	r2, [pc, #68]	@ (8000a34 <USART1_IRQHandler+0xa4>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	5453      	strb	r3, [r2, r1]
            last_rx_tick = ms_ticks;
 80009f4:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <USART1_IRQHandler+0xa8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a10      	ldr	r2, [pc, #64]	@ (8000a3c <USART1_IRQHandler+0xac>)
 80009fa:	6013      	str	r3, [r2, #0]
            if (rx_index >= MESSAGE_LENGTH)
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <USART1_IRQHandler+0xa0>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b0d      	cmp	r3, #13
 8000a04:	d90c      	bls.n	8000a20 <USART1_IRQHandler+0x90>
				data_ready = 1;
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <USART1_IRQHandler+0xb8>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
				rx_index = 0;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <USART1_IRQHandler+0xa0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
				GPIOB->BSRR = (1 << 4);
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <USART1_IRQHandler+0xb0>)
 8000a14:	2210      	movs	r2, #16
 8000a16:	619a      	str	r2, [r3, #24]
				led_timer = 500;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <USART1_IRQHandler+0xbc>)
 8000a1a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	2000003f 	.word	0x2000003f
 8000a34:	20000030 	.word	0x20000030
 8000a38:	20000020 	.word	0x20000020
 8000a3c:	20000044 	.word	0x20000044
 8000a40:	40020400 	.word	0x40020400
 8000a44:	2000002c 	.word	0x2000002c
 8000a48:	20000040 	.word	0x20000040
 8000a4c:	20000028 	.word	0x20000028

08000a50 <send_motor_angle_command>:
/* Function to send a 5-byte packet on USART2:
   - First byte: motor ID header.
   - Next 4 bytes: float command.
*/
void send_motor_angle_command(uint8_t motor_id, float command)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	ed87 0a00 	vstr	s0, [r7]
 8000a5c:	71fb      	strb	r3, [r7, #7]
    uint8_t msg[6];
    msg[0] = motor_id;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	733b      	strb	r3, [r7, #12]
    msg[1] = 1; //msg type for angle set
 8000a62:	2301      	movs	r3, #1
 8000a64:	737b      	strb	r3, [r7, #13]
    union { float f; uint8_t b[4]; } conv;
    conv.f = command;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	60bb      	str	r3, [r7, #8]
    msg[2] = conv.b[0];
 8000a6a:	7a3b      	ldrb	r3, [r7, #8]
 8000a6c:	73bb      	strb	r3, [r7, #14]
    msg[3] = conv.b[1];
 8000a6e:	7a7b      	ldrb	r3, [r7, #9]
 8000a70:	73fb      	strb	r3, [r7, #15]
    msg[4] = conv.b[2];
 8000a72:	7abb      	ldrb	r3, [r7, #10]
 8000a74:	743b      	strb	r3, [r7, #16]
    msg[5] = conv.b[3];
 8000a76:	7afb      	ldrb	r3, [r7, #11]
 8000a78:	747b      	strb	r3, [r7, #17]

    for (int i = 0; i < 6; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e010      	b.n	8000aa2 <send_motor_angle_command+0x52>
    {
        while (!(USART2->SR & USART_SR_TXE));  // Wait for TX register to be empty
 8000a80:	bf00      	nop
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <send_motor_angle_command+0x68>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f9      	beq.n	8000a82 <send_motor_angle_command+0x32>
        USART2->DR = msg[i];
 8000a8e:	f107 020c 	add.w	r2, r7, #12
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <send_motor_angle_command+0x68>)
 8000a9a:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < 6; i++)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2b05      	cmp	r3, #5
 8000aa6:	ddeb      	ble.n	8000a80 <send_motor_angle_command+0x30>
    }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40004400 	.word	0x40004400

08000abc <send_motor_stop_command>:

void send_motor_stop_command(uint8_t motor_id){
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[6];
	msg[0] = motor_id;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	733b      	strb	r3, [r7, #12]
	msg[1] = 4; //msg type for angle set
 8000aca:	2304      	movs	r3, #4
 8000acc:	737b      	strb	r3, [r7, #13]
	for (int i = 0; i < 6; i++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e010      	b.n	8000af6 <send_motor_stop_command+0x3a>
	{
		while (!(USART2->SR & USART_SR_TXE));  // Wait for TX register to be empty
 8000ad4:	bf00      	nop
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <send_motor_stop_command+0x50>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f9      	beq.n	8000ad6 <send_motor_stop_command+0x1a>
		USART2->DR = msg[i];
 8000ae2:	f107 020c 	add.w	r2, r7, #12
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	4413      	add	r3, r2
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <send_motor_stop_command+0x50>)
 8000aee:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 6; i++)
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	3301      	adds	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2b05      	cmp	r3, #5
 8000afa:	ddeb      	ble.n	8000ad4 <send_motor_stop_command+0x18>
	}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40004400 	.word	0x40004400

08000b10 <send_motor_start_command>:

void send_motor_start_command(uint8_t motor_id){
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[6];
	msg[0] = motor_id;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	733b      	strb	r3, [r7, #12]
	msg[1] = 5; //msg type for angle set
 8000b1e:	2305      	movs	r3, #5
 8000b20:	737b      	strb	r3, [r7, #13]
	for (int i = 0; i < 6; i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e010      	b.n	8000b4a <send_motor_start_command+0x3a>
	{
		while (!(USART2->SR & USART_SR_TXE));  // Wait for TX register to be empty
 8000b28:	bf00      	nop
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <send_motor_start_command+0x50>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f9      	beq.n	8000b2a <send_motor_start_command+0x1a>
		USART2->DR = msg[i];
 8000b36:	f107 020c 	add.w	r2, r7, #12
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781a      	ldrb	r2, [r3, #0]
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <send_motor_start_command+0x50>)
 8000b42:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 6; i++)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3301      	adds	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	ddeb      	ble.n	8000b28 <send_motor_start_command+0x18>
	}
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	371c      	adds	r7, #28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40004400 	.word	0x40004400

08000b64 <send_motor_err_clear_command>:

void send_motor_err_clear_command(uint8_t motor_id){
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[6];
	msg[0] = motor_id;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	733b      	strb	r3, [r7, #12]
	msg[1] = 6; //msg type for angle set
 8000b72:	2306      	movs	r3, #6
 8000b74:	737b      	strb	r3, [r7, #13]
	for (int i = 0; i < 6; i++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e010      	b.n	8000b9e <send_motor_err_clear_command+0x3a>
	{
		while (!(USART2->SR & USART_SR_TXE));  // Wait for TX register to be empty
 8000b7c:	bf00      	nop
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <send_motor_err_clear_command+0x50>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f9      	beq.n	8000b7e <send_motor_err_clear_command+0x1a>
		USART2->DR = msg[i];
 8000b8a:	f107 020c 	add.w	r2, r7, #12
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	4413      	add	r3, r2
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <send_motor_err_clear_command+0x50>)
 8000b96:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 6; i++)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	ddeb      	ble.n	8000b7c <send_motor_err_clear_command+0x18>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	371c      	adds	r7, #28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400

08000bb8 <main>:

/* Main function */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
    /* Configure system clock, GPIOs, and UARTs */
    SystemClock_Config();
 8000bbe:	f000 f9f1 	bl	8000fa4 <SystemClock_Config>
    GPIO_Config();
 8000bc2:	f000 f949 	bl	8000e58 <GPIO_Config>
    UART1_Config();
 8000bc6:	f000 f9a9 	bl	8000f1c <UART1_Config>
    UART2_Config();
 8000bca:	f000 f9c3 	bl	8000f54 <UART2_Config>

    /* Configure SysTick to generate an interrupt every 1 ms */
    SysTick_Config(SystemCoreClock / 1000);
 8000bce:	4b94      	ldr	r3, [pc, #592]	@ (8000e20 <main+0x268>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a94      	ldr	r2, [pc, #592]	@ (8000e24 <main+0x26c>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	099b      	lsrs	r3, r3, #6
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe7a 	bl	80008d4 <SysTick_Config>

    while (1)
    {
        if (loop_run)
 8000be0:	4b91      	ldr	r3, [pc, #580]	@ (8000e28 <main+0x270>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0fb      	beq.n	8000be0 <main+0x28>
        {
            loop_run=0;  // Consume the 1 ms tick
 8000be8:	4b8f      	ldr	r3, [pc, #572]	@ (8000e28 <main+0x270>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]

            /* Check for partial message timeout.
               If we have started receiving a message but no new byte arrived within
               MESSAGE_TIMEOUT_MS ms then discard the partial message.
            */
            if ((rx_index != 0) && ((ms_ticks - last_rx_tick) > MESSAGE_TIMEOUT_MS))
 8000bee:	4b8f      	ldr	r3, [pc, #572]	@ (8000e2c <main+0x274>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d010      	beq.n	8000c1a <main+0x62>
 8000bf8:	4b8d      	ldr	r3, [pc, #564]	@ (8000e30 <main+0x278>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b8d      	ldr	r3, [pc, #564]	@ (8000e34 <main+0x27c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b0a      	cmp	r3, #10
 8000c04:	d909      	bls.n	8000c1a <main+0x62>
            {
                rx_index = 0;  // Discard the partial message
 8000c06:	4b89      	ldr	r3, [pc, #548]	@ (8000e2c <main+0x274>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]

                /* Blink LED on PB7 for 500 ms to indicate message discard */
                GPIOB->BSRR = (1 << 7);  // Turn LED PB7 on
 8000c0c:	4b8a      	ldr	r3, [pc, #552]	@ (8000e38 <main+0x280>)
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	619a      	str	r2, [r3, #24]
                pb7_led_timer = 500;
 8000c12:	4b8a      	ldr	r3, [pc, #552]	@ (8000e3c <main+0x284>)
 8000c14:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c18:	601a      	str	r2, [r3, #0]
               Here, the commands are computed by direct multiplication:
               - Motor 1: yaw * 25
               - Motor 2: (pitch * 25) + (roll * 75)
               - Motor 3: (-pitch * 25) + (roll * 75)
            */
            if (data_ready)
 8000c1a:	4b89      	ldr	r3, [pc, #548]	@ (8000e40 <main+0x288>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0dd      	beq.n	8000be0 <main+0x28>
            {
            	msg_type = rx_buffer[1];
 8000c24:	4b87      	ldr	r3, [pc, #540]	@ (8000e44 <main+0x28c>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b87      	ldr	r3, [pc, #540]	@ (8000e48 <main+0x290>)
 8000c2c:	701a      	strb	r2, [r3, #0]

				switch(msg_type){
 8000c2e:	4b86      	ldr	r3, [pc, #536]	@ (8000e48 <main+0x290>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	3b01      	subs	r3, #1
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	f200 80e8 	bhi.w	8000e0c <main+0x254>
 8000c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c44 <main+0x8c>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c5d 	.word	0x08000c5d
 8000c48:	08000e0d 	.word	0x08000e0d
 8000c4c:	08000e0d 	.word	0x08000e0d
 8000c50:	08000d5b 	.word	0x08000d5b
 8000c54:	08000d93 	.word	0x08000d93
 8000c58:	08000dcb 	.word	0x08000dcb
				case 1: //angles setpoint
					/* Complete message received. Decode angles from bytes 1..12 */
					union { uint8_t b[4]; float f; } conv;

					/* Yaw: bytes 1 to 4 */
					conv.b[0] = rx_buffer[2];
 8000c5c:	4b79      	ldr	r3, [pc, #484]	@ (8000e44 <main+0x28c>)
 8000c5e:	789b      	ldrb	r3, [r3, #2]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	713b      	strb	r3, [r7, #4]
					conv.b[1] = rx_buffer[3];
 8000c64:	4b77      	ldr	r3, [pc, #476]	@ (8000e44 <main+0x28c>)
 8000c66:	78db      	ldrb	r3, [r3, #3]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	717b      	strb	r3, [r7, #5]
					conv.b[2] = rx_buffer[4];
 8000c6c:	4b75      	ldr	r3, [pc, #468]	@ (8000e44 <main+0x28c>)
 8000c6e:	791b      	ldrb	r3, [r3, #4]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	71bb      	strb	r3, [r7, #6]
					conv.b[3] = rx_buffer[5];
 8000c74:	4b73      	ldr	r3, [pc, #460]	@ (8000e44 <main+0x28c>)
 8000c76:	795b      	ldrb	r3, [r3, #5]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	71fb      	strb	r3, [r7, #7]
					yaw = conv.f;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a73      	ldr	r2, [pc, #460]	@ (8000e4c <main+0x294>)
 8000c80:	6013      	str	r3, [r2, #0]

					/* Pitch: bytes 5 to 8 */
					conv.b[0] = rx_buffer[6];
 8000c82:	4b70      	ldr	r3, [pc, #448]	@ (8000e44 <main+0x28c>)
 8000c84:	799b      	ldrb	r3, [r3, #6]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	713b      	strb	r3, [r7, #4]
					conv.b[1] = rx_buffer[7];
 8000c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8000e44 <main+0x28c>)
 8000c8c:	79db      	ldrb	r3, [r3, #7]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	717b      	strb	r3, [r7, #5]
					conv.b[2] = rx_buffer[8];
 8000c92:	4b6c      	ldr	r3, [pc, #432]	@ (8000e44 <main+0x28c>)
 8000c94:	7a1b      	ldrb	r3, [r3, #8]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	71bb      	strb	r3, [r7, #6]
					conv.b[3] = rx_buffer[9];
 8000c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8000e44 <main+0x28c>)
 8000c9c:	7a5b      	ldrb	r3, [r3, #9]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	71fb      	strb	r3, [r7, #7]
					pitch = conv.f;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8000e50 <main+0x298>)
 8000ca6:	6013      	str	r3, [r2, #0]

					/* Roll: bytes 9 to 12 */
					conv.b[0] = rx_buffer[10];
 8000ca8:	4b66      	ldr	r3, [pc, #408]	@ (8000e44 <main+0x28c>)
 8000caa:	7a9b      	ldrb	r3, [r3, #10]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	713b      	strb	r3, [r7, #4]
					conv.b[1] = rx_buffer[11];
 8000cb0:	4b64      	ldr	r3, [pc, #400]	@ (8000e44 <main+0x28c>)
 8000cb2:	7adb      	ldrb	r3, [r3, #11]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	717b      	strb	r3, [r7, #5]
					conv.b[2] = rx_buffer[12];
 8000cb8:	4b62      	ldr	r3, [pc, #392]	@ (8000e44 <main+0x28c>)
 8000cba:	7b1b      	ldrb	r3, [r3, #12]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	71bb      	strb	r3, [r7, #6]
					conv.b[3] = rx_buffer[13];
 8000cc0:	4b60      	ldr	r3, [pc, #384]	@ (8000e44 <main+0x28c>)
 8000cc2:	7b5b      	ldrb	r3, [r3, #13]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	71fb      	strb	r3, [r7, #7]
					roll = conv.f;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a62      	ldr	r2, [pc, #392]	@ (8000e54 <main+0x29c>)
 8000ccc:	6013      	str	r3, [r2, #0]
					float motor1 = yaw * 25.0f;
					float motor2 = (pitch * 25.0f) + (roll * 75.0f);
					float motor3 = (-pitch * 25.0f) + (roll * 75.0f);
					*/

					float motor1 = yaw;
 8000cce:	4b5f      	ldr	r3, [pc, #380]	@ (8000e4c <main+0x294>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
					float motor2 = pitch;
 8000cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8000e50 <main+0x298>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
					float motor3 = roll;
 8000cda:	4b5e      	ldr	r3, [pc, #376]	@ (8000e54 <main+0x29c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	60bb      	str	r3, [r7, #8]

					send_motor_angle_command(1, motor1*DegToRad);
 8000ce0:	6938      	ldr	r0, [r7, #16]
 8000ce2:	f7ff fd07 	bl	80006f4 <__aeabi_f2d>
 8000ce6:	a34c      	add	r3, pc, #304	@ (adr r3, 8000e18 <main+0x260>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	f7ff fa74 	bl	80001d8 <__aeabi_dmul>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff fd54 	bl	80007a4 <__aeabi_d2f>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	ee00 3a10 	vmov	s0, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fea4 	bl	8000a50 <send_motor_angle_command>
					send_motor_angle_command(2, motor2*DegToRad);
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fcf3 	bl	80006f4 <__aeabi_f2d>
 8000d0e:	a342      	add	r3, pc, #264	@ (adr r3, 8000e18 <main+0x260>)
 8000d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d14:	f7ff fa60 	bl	80001d8 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f7ff fd40 	bl	80007a4 <__aeabi_d2f>
 8000d24:	4603      	mov	r3, r0
 8000d26:	ee00 3a10 	vmov	s0, r3
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f7ff fe90 	bl	8000a50 <send_motor_angle_command>
					send_motor_angle_command(3, motor3*DegToRad);
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f7ff fcdf 	bl	80006f4 <__aeabi_f2d>
 8000d36:	a338      	add	r3, pc, #224	@ (adr r3, 8000e18 <main+0x260>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	f7ff fa4c 	bl	80001d8 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fd2c 	bl	80007a4 <__aeabi_d2f>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	ee00 3a10 	vmov	s0, r3
 8000d52:	2003      	movs	r0, #3
 8000d54:	f7ff fe7c 	bl	8000a50 <send_motor_angle_command>
					break;
 8000d58:	e058      	b.n	8000e0c <main+0x254>
				case 4: //motor stop = 1[HEADER|msg_type|1/0|x|x|x|1/0|x|x|x|1/0|x|x|x|]
					uint8_t turn_off_motor_1 = rx_buffer[2];
 8000d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e44 <main+0x28c>)
 8000d5c:	789b      	ldrb	r3, [r3, #2]
 8000d5e:	767b      	strb	r3, [r7, #25]
					uint8_t turn_off_motor_2 = rx_buffer[6];
 8000d60:	4b38      	ldr	r3, [pc, #224]	@ (8000e44 <main+0x28c>)
 8000d62:	799b      	ldrb	r3, [r3, #6]
 8000d64:	763b      	strb	r3, [r7, #24]
					uint8_t turn_off_motor_3 = rx_buffer[10];
 8000d66:	4b37      	ldr	r3, [pc, #220]	@ (8000e44 <main+0x28c>)
 8000d68:	7a9b      	ldrb	r3, [r3, #10]
 8000d6a:	75fb      	strb	r3, [r7, #23]

					if(turn_off_motor_1)
 8000d6c:	7e7b      	ldrb	r3, [r7, #25]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <main+0x1c0>
						send_motor_stop_command(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff fea2 	bl	8000abc <send_motor_stop_command>
					if(turn_off_motor_2)
 8000d78:	7e3b      	ldrb	r3, [r7, #24]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <main+0x1cc>
						send_motor_stop_command(2);
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f7ff fe9c 	bl	8000abc <send_motor_stop_command>
					if(turn_off_motor_3)
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d03b      	beq.n	8000e02 <main+0x24a>
						send_motor_stop_command(3);
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f7ff fe96 	bl	8000abc <send_motor_stop_command>
					break;
 8000d90:	e037      	b.n	8000e02 <main+0x24a>
				case 5:
					uint8_t turn_on_motor_1 = rx_buffer[2];
 8000d92:	4b2c      	ldr	r3, [pc, #176]	@ (8000e44 <main+0x28c>)
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	773b      	strb	r3, [r7, #28]
					uint8_t turn_on_motor_2 = rx_buffer[6];
 8000d98:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <main+0x28c>)
 8000d9a:	799b      	ldrb	r3, [r3, #6]
 8000d9c:	76fb      	strb	r3, [r7, #27]
					uint8_t turn_on_motor_3 = rx_buffer[10];
 8000d9e:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <main+0x28c>)
 8000da0:	7a9b      	ldrb	r3, [r3, #10]
 8000da2:	76bb      	strb	r3, [r7, #26]

					if(turn_on_motor_1)
 8000da4:	7f3b      	ldrb	r3, [r7, #28]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <main+0x1f8>
						send_motor_start_command(1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f7ff feb0 	bl	8000b10 <send_motor_start_command>
					if(turn_on_motor_2)
 8000db0:	7efb      	ldrb	r3, [r7, #27]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <main+0x204>
						send_motor_start_command(2);
 8000db6:	2002      	movs	r0, #2
 8000db8:	f7ff feaa 	bl	8000b10 <send_motor_start_command>
					if(turn_on_motor_3)
 8000dbc:	7ebb      	ldrb	r3, [r7, #26]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d021      	beq.n	8000e06 <main+0x24e>
						send_motor_start_command(3);
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f7ff fea4 	bl	8000b10 <send_motor_start_command>
					break;
 8000dc8:	e01d      	b.n	8000e06 <main+0x24e>
				case 6:
					uint8_t clear_err_motor_1 = rx_buffer[2];
 8000dca:	4b1e      	ldr	r3, [pc, #120]	@ (8000e44 <main+0x28c>)
 8000dcc:	789b      	ldrb	r3, [r3, #2]
 8000dce:	77fb      	strb	r3, [r7, #31]
					uint8_t clear_err_motor_2 = rx_buffer[6];
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <main+0x28c>)
 8000dd2:	799b      	ldrb	r3, [r3, #6]
 8000dd4:	77bb      	strb	r3, [r7, #30]
					uint8_t clear_err_motor_3 = rx_buffer[10];
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e44 <main+0x28c>)
 8000dd8:	7a9b      	ldrb	r3, [r3, #10]
 8000dda:	777b      	strb	r3, [r7, #29]

					if(clear_err_motor_1)
 8000ddc:	7ffb      	ldrb	r3, [r7, #31]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <main+0x230>
						send_motor_err_clear_command(1);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f7ff febe 	bl	8000b64 <send_motor_err_clear_command>
					if(clear_err_motor_2)
 8000de8:	7fbb      	ldrb	r3, [r7, #30]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <main+0x23c>
						send_motor_err_clear_command(2);
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff feb8 	bl	8000b64 <send_motor_err_clear_command>
					if(clear_err_motor_3)
 8000df4:	7f7b      	ldrb	r3, [r7, #29]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <main+0x252>
						send_motor_err_clear_command(3);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f7ff feb2 	bl	8000b64 <send_motor_err_clear_command>
					break;
 8000e00:	e003      	b.n	8000e0a <main+0x252>
					break;
 8000e02:	bf00      	nop
 8000e04:	e002      	b.n	8000e0c <main+0x254>
					break;
 8000e06:	bf00      	nop
 8000e08:	e000      	b.n	8000e0c <main+0x254>
					break;
 8000e0a:	bf00      	nop
				}



                data_ready = 0;  // Clear the flag once processed
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <main+0x288>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
        if (loop_run)
 8000e12:	e6e5      	b.n	8000be0 <main+0x28>
 8000e14:	f3af 8000 	nop.w
 8000e18:	7707c94d 	.word	0x7707c94d
 8000e1c:	3f91df46 	.word	0x3f91df46
 8000e20:	20000000 	.word	0x20000000
 8000e24:	10624dd3 	.word	0x10624dd3
 8000e28:	20000024 	.word	0x20000024
 8000e2c:	2000003f 	.word	0x2000003f
 8000e30:	20000020 	.word	0x20000020
 8000e34:	20000044 	.word	0x20000044
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	2000002c 	.word	0x2000002c
 8000e40:	20000040 	.word	0x20000040
 8000e44:	20000030 	.word	0x20000030
 8000e48:	2000003e 	.word	0x2000003e
 8000e4c:	20000048 	.word	0x20000048
 8000e50:	2000004c 	.word	0x2000004c
 8000e54:	20000050 	.word	0x20000050

08000e58 <GPIO_Config>:
   - Configures PA2/PA3 for USART2 (AF7).
   - Configures PB4 as an output for the valid-message LED.
   - Configures PB7 as an output for the discard-indicator LED.
*/
void GPIO_Config(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f10 <GPIO_Config+0xb8>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a2b      	ldr	r2, [pc, #172]	@ (8000f10 <GPIO_Config+0xb8>)
 8000e62:	f043 0303 	orr.w	r3, r3, #3
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Configure PA9 and PA10 for USART1 (Alternate Function 7) */
    GPIOA->MODER &= ~((3UL << (9 * 2)) | (3UL << (10 * 2)));
 8000e68:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a29      	ldr	r2, [pc, #164]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e6e:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8000e72:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2UL << (9 * 2)) | (2UL << (10 * 2)));
 8000e74:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a26      	ldr	r2, [pc, #152]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e7a:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000e7e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~((0xF << ((9 - 8) * 4)) | (0xF << ((10 - 8) * 4)));
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e84:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e86:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000e8a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= ((7 << ((9 - 8) * 4)) | (7 << ((10 - 8) * 4)));
 8000e8c:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e90:	4a20      	ldr	r2, [pc, #128]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e92:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 8000e96:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Configure PA2 and PA3 for USART2 (Alternate Function 7) */
    GPIOA->MODER &= ~((3UL << (2 * 2)) | (3UL << (3 * 2)));
 8000e98:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f14 <GPIO_Config+0xbc>)
 8000e9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ea2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2UL << (2 * 2)) | (2UL << (3 * 2)));
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <GPIO_Config+0xbc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f14 <GPIO_Config+0xbc>)
 8000eaa:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000eae:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xF << (2 * 4)) | (0xF << (3 * 4)));
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <GPIO_Config+0xbc>)
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <GPIO_Config+0xbc>)
 8000eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000eba:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((7 << (2 * 4)) | (7 << (3 * 4)));
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <GPIO_Config+0xbc>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <GPIO_Config+0xbc>)
 8000ec2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000ec6:	6213      	str	r3, [r2, #32]

	GPIOA->OSPEEDR |= (3<<4) | (3<<6); //3 ~ 0b11
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <GPIO_Config+0xbc>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <GPIO_Config+0xbc>)
 8000ece:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000ed2:	6093      	str	r3, [r2, #8]


    /* Configure PB4 as a general-purpose output (for valid message LED) */
    GPIOB->MODER &= ~(3UL << (4 * 2));
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <GPIO_Config+0xc0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <GPIO_Config+0xc0>)
 8000eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ede:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1UL << (4 * 2));
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <GPIO_Config+0xc0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <GPIO_Config+0xc0>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eea:	6013      	str	r3, [r2, #0]

    /* Configure PB7 as a general-purpose output (for discard-indicator LED) */
    GPIOB->MODER &= ~(3UL << (7 * 2));
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <GPIO_Config+0xc0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a09      	ldr	r2, [pc, #36]	@ (8000f18 <GPIO_Config+0xc0>)
 8000ef2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ef6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1UL << (7 * 2));
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <GPIO_Config+0xc0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <GPIO_Config+0xc0>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40020400 	.word	0x40020400

08000f1c <UART1_Config>:
   - Sets baud rate (~115200 baud at 84 MHz).
   - Enables the receiver and RXNE interrupt.
   - Enables the NVIC for USART1.
*/
void UART1_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <UART1_Config+0x30>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f24:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <UART1_Config+0x30>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6453      	str	r3, [r2, #68]	@ 0x44
    //USART1->BRR = 730;  // Approximate value for 115200 baud at 84 MHz
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <UART1_Config+0x34>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4a07      	ldr	r2, [pc, #28]	@ (8000f50 <UART1_Config+0x34>)
 8000f32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f36:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 8000f3a:	60d3      	str	r3, [r2, #12]
    USART1->BRR = (5U << 4) | (11U << 0);
 8000f3c:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <UART1_Config+0x34>)
 8000f3e:	225b      	movs	r2, #91	@ 0x5b
 8000f40:	609a      	str	r2, [r3, #8]
    NVIC_EnableIRQ(USART1_IRQn);
 8000f42:	2025      	movs	r0, #37	@ 0x25
 8000f44:	f7ff fc7e 	bl	8000844 <__NVIC_EnableIRQ>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40011000 	.word	0x40011000

08000f54 <UART2_Config>:
   - Enables clock for USART2.
   - Sets baud rate (~115200 baud).
   - Enables the transmitter.
*/
void UART2_Config(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000f58:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <UART2_Config+0x48>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <UART2_Config+0x48>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f62:	6413      	str	r3, [r2, #64]	@ 0x40
    //uint16_t brr = (UART_CLOCK + (BAUD_RATE/2)) / BAUD_RATE;
    //USART2->BRR = (uint32_t)brr;  // Approximate value for 115200 baud
    USART2->BRR = (13<<0) | (23<<4);   // Baud rate of 115200, PCLK1 at 42MHz
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <UART2_Config+0x4c>)
 8000f66:	f240 127d 	movw	r2, #381	@ 0x17d
 8000f6a:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= (1<<2); //RE=1 recieve enable
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <UART2_Config+0x4c>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <UART2_Config+0x4c>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<3); //TE=1
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <UART2_Config+0x4c>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <UART2_Config+0x4c>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= (1<<13); //USART2 enable
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <UART2_Config+0x4c>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <UART2_Config+0x4c>)
 8000f8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40004400 	.word	0x40004400

08000fa4 <SystemClock_Config>:
   - Configures the PLL (PLLM = 16, PLLN = 336, PLLP = 4, PLLQ = 7) for an 84 MHz clock.
   - Sets Flash latency and switches the system clock to the PLL.
   - Configures AHB/APB prescalers.
*/
void SystemClock_Config(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;
 8000fa8:	4b26      	ldr	r3, [pc, #152]	@ (8001044 <SystemClock_Config+0xa0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a25      	ldr	r2, [pc, #148]	@ (8001044 <SystemClock_Config+0xa0>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));
 8000fb4:	bf00      	nop
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <SystemClock_Config+0xa0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f9      	beq.n	8000fb6 <SystemClock_Config+0x12>

    /* Disable PLL for configuration */
    RCC->CR &= ~RCC_CR_PLLON;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <SystemClock_Config+0xa0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001044 <SystemClock_Config+0xa0>)
 8000fc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000fcc:	6013      	str	r3, [r2, #0]

    RCC->PLLCFGR = (16)              |  // PLLM = 16
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <SystemClock_Config+0xa0>)
 8000fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001048 <SystemClock_Config+0xa4>)
 8000fd2:	605a      	str	r2, [r3, #4]
                   (336 << 6)        |  // PLLN = 336
                   (1 << 16)         |  // PLLP = 4 (01 in bits 17:16)
                   (7 << 24);           // PLLQ = 7

    RCC->CR |= RCC_CR_PLLON;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <SystemClock_Config+0xa0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <SystemClock_Config+0xa0>)
 8000fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fde:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8000fe0:	bf00      	nop
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <SystemClock_Config+0xa0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f9      	beq.n	8000fe2 <SystemClock_Config+0x3e>

    FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_2WS;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <SystemClock_Config+0xa8>)
 8000ff0:	f240 6202 	movw	r2, #1538	@ 0x602
 8000ff4:	601a      	str	r2, [r3, #0]

    RCC->CFGR &= ~RCC_CFGR_SW;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <SystemClock_Config+0xa0>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <SystemClock_Config+0xa0>)
 8000ffc:	f023 0303 	bic.w	r3, r3, #3
 8001000:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <SystemClock_Config+0xa0>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <SystemClock_Config+0xa0>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800100e:	bf00      	nop
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <SystemClock_Config+0xa0>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b08      	cmp	r3, #8
 800101a:	d1f9      	bne.n	8001010 <SystemClock_Config+0x6c>

    /* Set AHB = 1, APB1 = /2, APB2 = 1 */
    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2);
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <SystemClock_Config+0xa0>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <SystemClock_Config+0xa0>)
 8001022:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8001026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800102a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <SystemClock_Config+0xa0>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <SystemClock_Config+0xa0>)
 8001032:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001036:	6093      	str	r3, [r2, #8]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	07015410 	.word	0x07015410
 800104c:	40023c00 	.word	0x40023c00

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <NMI_Handler+0x4>

08001058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <MemManage_Handler+0x4>

08001068 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <UsageFault_Handler+0x4>

08001078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001100 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010cc:	f7ff ffea 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d2:	490d      	ldr	r1, [pc, #52]	@ (8001108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f000 f811 	bl	800111c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fd5d 	bl	8000bb8 <main>
  bx  lr    
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800110c:	08001184 	.word	0x08001184
  ldr r2, =_sbss
 8001110:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001114:	20000054 	.word	0x20000054

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <__libc_init_array>:
 800111c:	b570      	push	{r4, r5, r6, lr}
 800111e:	4d0d      	ldr	r5, [pc, #52]	@ (8001154 <__libc_init_array+0x38>)
 8001120:	4c0d      	ldr	r4, [pc, #52]	@ (8001158 <__libc_init_array+0x3c>)
 8001122:	1b64      	subs	r4, r4, r5
 8001124:	10a4      	asrs	r4, r4, #2
 8001126:	2600      	movs	r6, #0
 8001128:	42a6      	cmp	r6, r4
 800112a:	d109      	bne.n	8001140 <__libc_init_array+0x24>
 800112c:	4d0b      	ldr	r5, [pc, #44]	@ (800115c <__libc_init_array+0x40>)
 800112e:	4c0c      	ldr	r4, [pc, #48]	@ (8001160 <__libc_init_array+0x44>)
 8001130:	f000 f818 	bl	8001164 <_init>
 8001134:	1b64      	subs	r4, r4, r5
 8001136:	10a4      	asrs	r4, r4, #2
 8001138:	2600      	movs	r6, #0
 800113a:	42a6      	cmp	r6, r4
 800113c:	d105      	bne.n	800114a <__libc_init_array+0x2e>
 800113e:	bd70      	pop	{r4, r5, r6, pc}
 8001140:	f855 3b04 	ldr.w	r3, [r5], #4
 8001144:	4798      	blx	r3
 8001146:	3601      	adds	r6, #1
 8001148:	e7ee      	b.n	8001128 <__libc_init_array+0xc>
 800114a:	f855 3b04 	ldr.w	r3, [r5], #4
 800114e:	4798      	blx	r3
 8001150:	3601      	adds	r6, #1
 8001152:	e7f2      	b.n	800113a <__libc_init_array+0x1e>
 8001154:	0800117c 	.word	0x0800117c
 8001158:	0800117c 	.word	0x0800117c
 800115c:	0800117c 	.word	0x0800117c
 8001160:	08001180 	.word	0x08001180

08001164 <_init>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	bf00      	nop
 8001168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116a:	bc08      	pop	{r3}
 800116c:	469e      	mov	lr, r3
 800116e:	4770      	bx	lr

08001170 <_fini>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr
